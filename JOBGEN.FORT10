      subroutine dumpkv(outfil,
     &            nkey,key,pval,nval,val,maxkey,maxval)
      implicit integer (a-z)
      integer outfil, nkey
      integer pval(maxkey), nval(maxkey)
      character*80 key(maxkey)
      character*80 val(maxval)
 
      write(6,'(a)') 'dumpkv:'
      do 101 i = 1, nkey
        write(6,'(a20)') key(i)(1:20)
        do 201 j = pval(i), pval(i) + nval(i) - 1
          write(6,'(20x,a20)') val(j)(1:20)
  201     continue
  101   continue
      write(6,*)
      return
      end
      subroutine endjob(jobfil)
      implicit integer (a-z)
      write(jobfil,1) '//'
    1 format(a2)
      return
      end
      subroutine excstp(jobfil,outfil,
     &           line,nkey,key,pval,nval,val,maxkey,maxval)
      implicit integer (a-z)
      parameter (maxseq = 1000)
      integer pval(maxkey), nval(maxkey)
      character*80 key(maxkey)
      character*80 val(maxval)
      character*80 line
 
      integer nseq
      character*8 seq(maxseq)
      logical posseq
 
      nseq = 1
      seq(1) = line
      do 105 i = 2, maxseq
        seq(i) = ' '
  105   continue
 
      write(jobfil,'(a)') '//* jobgen: excstp: line = '
      write(jobfil,'(a)') '//* '//line
 
c posseq is set to true if it is possible that a SEQ. has brought into s
 901  continue
      posseq = .false.
      is = 1
      do 101 i = 1, nseq
c Determine the sequence of fundamental steps to be executed.
        call fndval(ptmp,ntmp,'SEQ.'//seq(is),
     &              nkey,key,pval,nval,val,maxkey,maxval)
        if (ptmp .ne. 0) then
          posseq = .true.
          do 201 j = nseq + ntmp - 1, is + ntmp, -1
            if (j .gt. maxseq) then
              write(outfil,*) 'jobgen: excstp: maxseq must be increased'
              write(outfil,*) '         or possible recursive SEQ'
              call jgabrt
              endif
            seq(j) = seq(j - ntmp + 1)
  201       continue
          nseq = nseq - 1
          do 202 j = 1, ntmp
            if (is .gt. maxseq) then
              write(outfil,*) 'jobgen: excstp: maxseq must be increased'
              write(outfil,*) '         or possible recursive SEQ'
              call jgabrt
              endif
            seq(is) = val(ptmp + j - 1)
            is = is + 1
            nseq = nseq + 1
  202       continue
        else
          is = is + 1
          endif
  101   continue
 
      if (posseq) goto 901
 
      do 103 i = 1, nseq
        write(jobfil,'(a)') '//*'//seq(i)
        call step(outfil,jobfil,seq(i),
     &           nkey,key,pval,nval,val,maxkey,maxval)
  103   continue
 
      return
      end
      subroutine fndval(ptmp,ntmp,name,nkey,key,
     &           pval, nval, val, maxkey, maxval)
      implicit integer (a-z)
      integer pval(maxkey), nval(maxkey)
      character*80 key(maxkey)
      character*80 val(maxval)
      character*(*) name
 
      do 101 i = 1, nkey
        if (name .eq. key(i)) then
          ptmp = pval(i)
          ntmp = nval(i)
          return
          endif
  101   continue
 
      ptmp = 0
      ntmp = 0
 
      return
      end
      subroutine init(nkey,key,pval,nval,val,maxkey,maxval)
      implicit integer (a-z)
      integer nkey
      integer pval(maxkey), nval(maxkey)
      character*80 key(maxkey)
      character*80 val(maxval)
 
      do 101 i = 1, maxkey
        pval(i) = 0
        nval(i) = 0
        key(i) = ' '
  101   continue
 
      do 102 i = 1, maxval
        val(i) = ' '
  102   continue
 
      nkey = 0
 
      return
      end
      subroutine jgabrt
      stop 10
      end
      program jobgen
      implicit integer (a-z)
      parameter (maxkey = 2000, maxval=10000)
      integer nkey
      integer pval(maxkey), nval(maxkey)
      integer infil, outfil, jobfil
      character*80 key(maxkey)
      character*80 val(maxval)
      character*80 line,prefix
      logical setup
 
      open(3,file='defaults')
      open(5,file='infil')
      open(6,file='outfil')
      open(7,file='jobfil')
 
      infil = 3
      outfil = 6
      jobfil = 7
 
      prefix = ' '
      setup = .true.
      call init(nkey,key,pval,nval,val,maxkey,maxval)
      call strjob(jobfil,outfil,nkey,key,pval,nval,val,maxkey,maxval)
 
      write(outfil,*) 'jobgen: reading from unit ', infil
      linnum = 0
 800  continue
        call dumpkv(outfil,nkey,key,pval,nval,val,maxkey,maxval)
        linnum = linnum + 1
        read(infil,1,end=900) line
    1   format(a80)
 
        call mvalid(line)
 
        if (line(1:6) .eq. 'PREFIX') then
          prefix = line(8:80)
          goto 800
        else if (line(1:7) .eq. 'VERSION') then
          if (line(9:11) .ne. '1.0') then
            write(outfil,*) 'jobgen: input must be version 1.0'
            call jgabrt
            endif
          goto 800
        else if (setstm(line) .eq. 1) then
          call setval(infil,jobfil,outfil,prefix,
     &            line,nkey,key,pval,nval,val,maxkey,maxval)
          goto 800
        else if (endfil(line) .eq. 1) then
          goto 900
        else if (nulstm(line) .eq. 1) then
          write(jobfil,1) '//*'//line(2:78)
          goto 800
        else
          call excstp(jobfil,outfil,
     &           line,nkey,key,pval,nval,val,maxkey,maxval)
          goto 800
          endif
 
 900    continue
 
      if (setup) then
        prefix = ' '
        infil = 5
        setup = .false.
        call locate(5,'# JOB ####',ierr)
        if (ierr .ne. 0) then
          write(outfil,*) 'jobgen: could not locate ''# JOB ####'' '
          call jgabrt
          endif
        linnum = 0
        write(outfil,*) 'jobgen: reading from unit ', infil
        goto 800
        endif
 
      call endjob(jobfil)
 
      stop
      end
c----------------------------------------------------------------------
      subroutine pline(nline,prefix,line)
c Puts the prefix on the line
      implicit integer (a-z)
      character*80 nline,line,prefix
 
      ip = 1
      in = 1
      il = 1
  801 continue
        if (prefix(ip:ip) .ne. ' ') then
          nline(in:in) = prefix(ip:ip)
          in = in + 1
          ip = ip + 1
          goto 801
          endif
 
      if ((in .gt. 1).and.(in .le. 80)) then
        nline(in:in) = '.'
        in = in + 1
        endif
 
  802 continue
        if (in .le. 80) then
          nline(in:in) = line(il:il)
          in = in + 1
          il = il + 1
          goto 802
          endif
 
      return
      end
 
      SUBROUTINE LOCATE(INPUT,TOKEN,IERROR)
C
C     ----- SEARCH THROUGH INPUT FILE FOR TOKEN BEGINNING
C           WITH # TO LOCATE INPUT FOR PROGRAM.  IERROR IS
C           SET TO 0 IF NO ERRORS, 1 IF ANY ERROR OCCURS.
C
C
      CHARACTER*10 TOKEN,LINE
C
      REWIND (UNIT=INPUT,ERR=99)
C
    1 CONTINUE
      READ (UNIT=INPUT,FMT='(A10)',END=99,ERR=99) LINE
      IF (LINE.NE.TOKEN) GO TO 1
C
      IERROR=0
      RETURN
C
C
   99 CONTINUE
      IERROR=1
      RETURN
      END
      integer function setstm(line)
c returns 1 if the statement in line is a set statement
c returns 0 otherwise
c anything between single quotes is taken literally
c any statement with at least one '=' not
c as the first character is considered a set statement
c note: everything after a '*' is ignored
      implicit integer (a-z)
      character*80 line
      logical quote
 
      quote = .false.
 
      do 101 i = 1, 80
        if (line(i:i) .eq. '*') then
          setstm = 0
          return
        else if (line(i:i) .eq. '=') then
          if (i .eq. 1) then
            setstm = 0
          else
            setstm = 1
            endif
          return
          endif
  101   continue
 
      setstm = 0
      return
      end
c-----------------------------------------------------------------------
      integer function endfil(line)
c returns 1 if the statement ends the input ('#','END','DONE','QUIT' do
c returns 0 otherwise
      implicit integer (a-z)
      character*80 line
 
      if (line(1:1) .eq. '#') then
        endfil = 1
      else if (line .eq. 'END') then
        endfil = 1
      else if (line .eq. 'DONE') then
        endfil = 1
      else if (line .eq. 'QUIT') then
        endfil = 1
      else
        endfil = 0
        endif
 
      return
      end
c-----------------------------------------------------------------------
      integer function nulstm(line)
c returns 1 if line is blank or a comment
c returns 0 otherwise
      implicit integer (a-z)
      character*80 line
 
      if (line(1:1) .eq. '!') then
        nulstm = 1
      else if (line .eq. ' ') then
        nulstm = 1
      else
        nulstm = 0
        endif
 
      return
      end
c-----------------------------------------------------------------------
      subroutine mvalid(line)
c Takes a line as input and reformats it somewhat (gets rid of leading
c blanks, strips comments off of lines that have other commands, convert
c to lower case). If a line has nothing but a comment on it, then the
c comment is not stripped off the line so that it can be placed in the
c jobstream for debugging purposes.
      implicit integer (a-z)
      character*80 line, tmp
      character*26 lower, upper
      logical blank, commnt
      data lower/'abcdefghijklmnopqrstuvwxyz'/
      data upper/'ABCDEFGHIJKLMNOPQRSTUVWXYZ'/
 
c Remove unneeded blanks
      tmp = ' '
      tmpptr = 1
      blank = .true.
      do 101 i = 1, 80
        if (blank .and. (line(i:i) .eq. ' ')) then
          goto 101
        else if ((.not.blank) .and. (line(i:i) .eq. ' ')) then
          tmp(tmpptr:tmpptr) = line(i:i)
          tmpptr = tmpptr + 1
          blank = .true.
        else
          tmp(tmpptr:tmpptr) = line(i:i)
          tmpptr = tmpptr + 1
          blank = .false.
          endif
 101    continue
 
c Remove comments on lines with other commands
      if (tmp(1:1) .ne. '!') then
        commnt = .false.
        do 102 i = 2,80
          if (tmp(i:i) .eq. '!') then
            tmp(i:i) = ' '
            commnt = .true.
          else if (commnt) then
            tmp(i:i) = ' '
            endif
  102     continue
        endif
 
c Convert to upper case.
      do 103 i = 1, 80
        do 203 j = 1, 26
          if (tmp(i:i) .eq. lower(j:j)) tmp(i:i) = upper(j:j)
  203     continue
  103   continue
 
      line = tmp
 
      return
      end
 
      subroutine setval(infil,jobfil,outfil,prefix,
     &                 oline,nkey,key,pval,nval,
     &                 val,maxkey,maxval)
      implicit integer (a-z)
      character*80 oline, line
      integer nkey
      integer pval(maxkey), nval(maxkey)
      character*80 key(maxkey), val(maxval)
      character*(*) prefix
 
      integer tkey, tkey
      character*80 tmpkey,line1,line2
      logical array
      logical quote
 
c Put the prefix on the line
      call pline(line,prefix,oline)
 
c Determine the key
      tmpkey = ' '
      iline = 1
      do 101 i = 1, 80
        iline = iline + 1
        if ((line(i:i).eq.' ').or.(line(i:i).eq.'=')) goto 900
        tmpkey(i:i) = line(i:i)
  101   continue
 
 900  continue
 
c Current top of key array and val array
      tkey = nkey
      tval = pval(nkey) + nval(nkey) - 1
 
c If key already exists, then remove it
      inckey = 0
      incval = 0
      do 102 i = 1, nkey
        key(i+inckey) = key(i)
        pval(i+inckey) = pval(i) + incval
        nval(i+inckey) = nval(i)
        do 202 j = 1, nval(i)
          val(pval(i+inckey)+j-1) = val(pval(i)+j-1)
  202     continue
        if (key(i) .eq. tmpkey) then
          inckey = inckey - 1
          incval = incval - nval(i)
          endif
  102   continue
      nkey = nkey + inckey
 
c Delete old keys and values
      do 108 i = nkey + 1, tkey
        key(i) = ' '
        pval(i) = 0
        nval(i) = 0
  108   continue
      do 109 i = pval(nkey) + nval(nkey), tval
        val(i) = ' '
  109   continue
 
c Put the key on the end of the list
      nkey = nkey + 1
      key(nkey) = tmpkey
      if (nkey .gt. 1) then
        pval(nkey) = pval(nkey-1) + nval(nkey-1)
      else
        pval(nkey) = 1
        endif
 
c get the value(s)
      ival = 0
      inval = 1
      array = .false.
      quote = .false.
 801  continue
      if (iline .eq. 81) then
        if (quote) then
          write(outfil,*) 'jobgen: setval:'
     &                 //' cannot quote pass end of line'
          call jgabrt
          endif
        if (array .and. (ival .eq. 0)) then
c         read another line
 802      read(infil,1,end=999) line
    1     format(a80)
          iline = 1
          call mvalid(line)
          if (endfil(line) .eq. 1) goto 999
          if (nulstm(line) .eq. 1) goto 802
          goto 801
        else if (array) then
          write(outfil,*) 'jobgen: setval: missing a '')'' '
          call jgabrt
        else
          goto 901
          endif
      else if ((line(iline:iline).eq.'''').and.quote) then
        quote = .false.
      else if ((line(iline:iline).eq.'''').and.(.not.quote)) then
        quote = .true.
      else if (quote) then
        ival = ival + 1
        val(pval(nkey)+inval-1)(ival:ival) = line(iline:iline)
      else if (     (line(iline:iline).eq. ' ')
     &         .or. (line(iline:iline).eq. '=') ) then
      else if (line(iline:iline) .eq. '(') then
        if (array) then
          write(outfil,*) 'jobgen: setval: nested arrays not allowed'
          call jgabrt
          endif
        array = .true.
      else if (line(iline:iline) .eq. ')') then
        if (.not. array) then
          write(outfil,*) 'jobgen: setval: missing a ''('' '
          call jgabrt
          endif
        goto 901
      else if (line(iline:iline) .eq. ',') then
        if (.not. array) then
          write(outfil,*) 'jobgen: setval: read an extra '','' '
          call jgabrt
          endif
        ival = 0
        if (val(pval(nkey)+inval-1)(1:1).eq.'$') then
          call fndval(ptmp,ntmp,val(pval(nkey)+inval-1)(2:80),
     &               nkey,key,pval,nval,val,maxkey,maxval)
          if (ptmp .eq. 0) then
            write(outfil,*) 'jobgen: setval: variable not set: '//
     &                      val(pval(nkey)+inval-1)(2:80)
            call jgabrt
            endif
          do 128 i = 1, ntmp
            val(pval(nkey)+inval-1) = val(ptmp+i-1)
c           inval = inval + 1
            call ininvl(inval,pval(nkey),maxval)
  128       continue
          inval = inval - 1
        else if (val(pval(nkey)+inval-1)(1:1).eq.'%') then
          line1 = val(pval(nkey)+inval-1)(2:80)
          call pline(line2,prefix,line1)
          call fndval(ptmp,ntmp,line2,
     &               nkey,key,pval,nval,val,maxkey,maxval)
          if (ptmp .eq. 0) then
            write(outfil,*) 'jobgen: setval: variable not set: '//
     &                      val(pval(nkey)+inval-1)(2:80)
            call jgabrt
            endif
          do 129 i = 1, ntmp
            val(pval(nkey)+inval-1) = val(ptmp+i-1)
c           inval = inval + 1
            call ininvl(inval,pval(nkey),maxval)
  129       continue
          inval = inval - 1
          endif
c       inval = inval + 1
        call ininvl(inval,pval(nkey),maxval)
      else
        ival = ival + 1
        val(pval(nkey)+inval-1)(ival:ival) = line(iline:iline)
        endif
      iline = iline + 1
      goto 801
 
 901  continue
 
      if (val(pval(nkey)+inval-1)(1:1).eq.'$') then
        call fndval(ptmp,ntmp,val(pval(nkey)+inval-1)(2:80),
     &             nkey,key,pval,nval,val,maxkey,maxval)
        if (ptmp .eq. 0) then
          write(outfil,*) 'jobgen: setval: variable not set: '//
     &                    val(pval(nkey)+inval-1)(2:80)
          call jgabrt
          endif
        do 118 i = 1, ntmp
          val(pval(nkey)+inval-1) = val(ptmp+i-1)
c         inval = inval + 1
          call ininvl(inval,pval(nkey),maxval)
  118     continue
        inval = inval - 1
      else if (val(pval(nkey)+inval-1)(1:1).eq.'%') then
        line1 = val(pval(nkey)+inval-1)(2:80)
        call pline(line2,prefix,line1)
        call fndval(ptmp,ntmp,line2,
     &             nkey,key,pval,nval,val,maxkey,maxval)
        if (ptmp .eq. 0) then
          write(outfil,*) 'jobgen: setval: variable not set: '//
     &                    val(pval(nkey)+inval-1)(2:80)
          call jgabrt
          endif
        do 119 i = 1, ntmp
          val(pval(nkey)+inval-1) = val(ptmp+i-1)
c         inval = inval + 1
          call ininvl(inval,pval(nkey),maxval)
  119     continue
        inval = inval - 1
        endif
 
      nval(nkey) = inval
      return
 
c Variable expansion is above.
c This call will expand variables in the values
c     call expvar(jobfil,outfil,prefix,val(nkey),nval(nkey),
c    &            nkey-1,key,pval,nval,val,maxkey,maxval)
 
 999  continue
      write(outfil,*) 'jobgen: setval: missing continuation'
      call jgabrt
 
      return
      end
 
      subroutine ininvl(inval,pval,maxval)
c Increment inval and make sure we are not exceeding limit of val array
      implicit integer (a-z)
      inval = inval + 1
      if (inval + pval - 1 .gt. maxval) then
        write(6,*) 'jobgen: setval: out of memory: increase maxval'
        call jgabrt
        endif
      return
      end
      subroutine step(outfil,jobfil,jobstp,
     &                nkey,key,pval,nval,val,maxkey,maxval)
      implicit integer (a-z)
      integer outfil, jobfil
      character*(*) jobstp
      integer pval(maxkey), nval(maxkey)
      character*80 key(maxkey)
      character*80 val(maxval)
 
      write(jobfil,'(2a)') '//* step ', jobstp
 
      return
      end
      subroutine strjob(jobfil,outfil,nkey,key,pval,nval,
     &                  val,maxkey,maxval)
      implicit integer (a-z)
      integer jobfil,outfil
      integer nkey
      integer pval(maxkey), nval(maxkey)
      character*80 key(maxkey)
      character*80 val(maxval)
 
      call fndval(pid,ntmp,'JOBID',
     &            nkey,key,pval,nval,val,maxkey,maxval)
 
      return
      end
