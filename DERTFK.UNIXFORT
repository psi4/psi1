      SUBROUTINE BASIS(EX,CSPD,KATOM,KTYPE,KSTART,KLOC,KMIN,KMAX,
     #KNG,ZAN,C,T,INVT,ISO,LBLAT,ICT,PTR,DTR,RCSPD)
C
C     EXTENDED DUMMY EX,CSPD,KATOM,KTYPE,KSTART,KLOC,KMIN,KMAX,
C    #KNG,ZAN,C,T,INVT,ISO,LBLAT,ICT,PTR,RCSPD
CSEL  REAL*8 EX(NPRIM),CSPD(NPRIM,3),ZAN(NAT),C(3,NAT),T(MXT)
CSEL  REAL*8 A10(100),PTR(3,3,NT)
C
      REAL*8 RCSPD(NPRIM,3),A10(100),ESCF
      INTEGER EX(1),CSPD(1),ZAN(1),C(1),T(1),PTR(1),DTR(1)
      INTEGER KATOM(NSHELL),KTYPE(NSHELL),KSTART(NSHELL)
      INTEGER KLOC(NSHELL),KMIN(NSHELL),KMAX(NSHELL),KNG(NSHELL)
      INTEGER INVT(NT),ISO(NSHELL,NISO),LBLAT(2,NAT),ICT(NAT,NT)
      LOGICAL OPEN
      CHARACTER*5 CALTYP
      CHARACTER*6 SCFTYP,DERTYP,CITYP
C
      COMMON /INFOA/  NAT,NUM,NNP,NSHELL,NIRRED,NT,NPRIM,MXT,NISO
      COMMON /ITAP30/ I10(200),ITAP30,IEND,MPOINT,MCONST,MCALCS,
     #NCALCS
      COMMON /CNTRL/  IPRINT,NDERIV,INTOUT,INFOUT,OPEN,SCFTYP,CALTYP
      COMMON /TAPES/  IOUT,ICHECK,INPUT,ITAP42,ITAP49
      COMMON /TYPES/  DERTYP,CITYP
      COMMON /HOLL/   ESCF,FMTER(13),JL
      COMMON /LABELS/ IALBEL(20),IBLBEL(20)
C
      EQUIVALENCE (I10,A10)
C
      ITAP11 = 11
C
C     ----- READ POINTERS FROM TAPE30 -----
C
      JUNK=101+MCONST
      CALL WREADW(ITAP30,I10,MPOINT,JUNK,JUNK)
C
C     ----- NOW GO FOR THE GUSTO -----
C
      CALL WREADW(ITAP30,ZAN,INTOWP(NAT),I10(1),JUNK)
      CALL WREADW(ITAP30,ICT,NAT*NT,I10(2),JUNK)
      CALL WREADW(ITAP30,EX,INTOWP(NPRIM),I10(5),JUNK)
      CALL WREADW(ITAP30,CSPD,INTOWP(NPRIM*3),I10(6),JUNK)
      CALL WREADW(ITAP30,KSTART,NSHELL,I10(7),JUNK)
      CALL WREADW(ITAP30,KATOM,NSHELL,I10(8),JUNK)
      CALL WREADW(ITAP30,KTYPE,NSHELL,I10(9),JUNK)
      CALL WREADW(ITAP30,KNG,NSHELL,I10(10),JUNK)
      CALL WREADW(ITAP30,KLOC,NSHELL,I10(11),JUNK)
      CALL WREADW(ITAP30,KMIN,NSHELL,I10(12),JUNK)
      CALL WREADW(ITAP30,KMAX,NSHELL,I10(13),JUNK)
      CALL WREADW(ITAP30,T,INTOWP(MXT),I10(25),JUNK)
      CALL WREADW(ITAP30,INVT,NT,I10(26),JUNK)
      CALL WREADW(ITAP30,ISO,NSHELL*NISO,I10(27),JUNK)
      CALL WREADW(ITAP30,LBLAT,2*NAT,I10(28),JUNK)
      CALL WREADW(ITAP30,PTR,INTOWP(3*3*NT),I10(31),JUNK)
      CALL WREADW(ITAP30,DTR,INTOWP(6*6*NT),I10(32),JUNK)
C
C     ----- AND GET LOCATION OF INDIVIDUAL CALCULATION TO GET GEOM
C
      JUNK=101+MCONST+MPOINT+NCALCS-1
      CALL WREADW(ITAP30,LOCCAL,1,JUNK,JUNK)
C
      CALL WREADW(ITAP30,I10,60,LOCCAL,LOCCAL)
C
      DO 200  ILBL=1,20
         IALBEL(ILBL) =  I10(ILBL)
CCCC     CALL ITC(I10(ILBL),0,ALABEL(ILBL))
  200 CONTINUE
C
CC    WRITE(3,*) ' CITYP =',CITYP,' DERTYP = ',DERTYP
CC    IF(CITYP.NE.'CI    ' .AND. DERTYP.EQ.'FIRST ') THEN
CC    WRITE (ITAP11,899) (I10(I),I=1,20)
C 899 FORMAT (20A4,/)
      WRITE (IOUT,900) (I10(I),I=1,20)
  900 FORMAT (/,(1X,20A4)/)
CCCCC END IF
C
      LOCCAL=LOCCAL+20
      CALL WREADW(ITAP30,C,INTOWP(3*NAT),LOCCAL,LOCCAL)
C
C     ----- GET ENERGIES AND WRITE OUT -----
C
      CALL WREADW(ITAP30,I10,INTOWP(10),LOCCAL,LOCCAL)
C
      ESCF = A10(2)
C
      WRITE (IOUT,901) A10(1)
  901 FORMAT (' NUCLEAR REPULSION ENERGY:',F16.9)
      IF (CALTYP.EQ.'SCF  ') WRITE (IOUT,902) ESCF
  902 FORMAT ('               SCF ENERGY:',F16.9)
      IF (CALTYP.EQ.'MCSCF') WRITE (IOUT,903) A10(3)
  903 FORMAT ('             MCSCF ENERGY:',F15.9)
C
C     ----- COLLAPSE CONTRACTION COEFFICIENTS INTO ONE-D ARRAY -----
C
      DO 10 ISHELL=1,NSHELL
        DO 9 I=KSTART(ISHELL),KSTART(ISHELL)+KNG(ISHELL)-1
          RCSPD(I,1)=RCSPD(I,KTYPE(ISHELL))
    9   CONTINUE
   10 CONTINUE
C
C
C
      RETURN
      END
      SUBROUTINE BFTOAT(IBF2AT,KATOM,KLOC,KMIN,KMAX)
C
      IMPLICIT REAL*8 (A-H,O-Z)
C
C     EXTENDED DUMMY IBF2AT,KATOM,KLOC,KMIN,KMAX
C
      INTEGER KATOM(NSHELL),KLOC(NSHELL),KMIN(NSHELL),KMAX(NSHELL)
C
      COMMON /INFOA/  NAT,NUM,NNP,NSHELL,NIRRED,NT,NPRIM,MXT,NISO
      COMMON /TAPES/  IOUT,ICHECK,INPUT,ITAP42,ITAP49
C
      DIMENSION IBF2AT(NUM)
C
      DO 2 ISHELL=1,NSHELL
        IATOM=KATOM(ISHELL)
        MINBF=KLOC(ISHELL)
        MAXBF=MINBF+KMAX(ISHELL)-KMIN(ISHELL)
        DO 1 IBF=MINBF,MAXBF
          IBF2AT(IBF)=IATOM
    1   CONTINUE
    2 CONTINUE
C
      RETURN
      END
      SUBROUTINE DABIN(IA,DT,D,ABDENS,LENBLK,jump)
C
C
C
      IMPLICIT REAL*8 (A-H,O-Z)
C
C     EXTENDED DUMMY IA,DT,D,ABDENS
C
      LOGICAL OUT,IANDJ,KANDL,SAME
      LOGICAL OPEN
      CHARACTER*5 CALTYP
      CHARACTER*6 SCFTYP
C
      COMMON /TOLER/  F00TOL,FTOL
      COMMON /IOFILE/ IR,IW,IP,IS,IPK,IDAF,NAV,IODA(20),IOUT,IFLAG3
      COMMON /DSHLT/  TOL,CUTOFF,OUT
      COMMON /OUTPUT/ NPRINT,ITOL,ICUT,NORMF,NORMP,NOPK
      COMMON /TCSCF/  OCC1,OCC12,OCC2,SOCC1,SOCC12,SOCC2,ITCSCF
      COMMON /COUPLC/ FOCC(5),ALP(5,5),BET(5,5),NTYPES
      COMMON /INFOA/  NAT,NUM,NNP,NSHELL,NIRRED,NT,NPRIM,MXT,NISO
      COMMON /DMISC/  IANDJ,KANDL,SAME
CIBM  COMMON /SHELLD/ NATOM(4),NPASS
      COMMON /SHELLD/ XIDER,YIDER,ZIDER,XJDER,YJDER,ZJDER
     2,               XKDER,YKDER,ZKDER,NATOM(4),NPASS
      COMMON /DSHLNO/ LIT,LJT,LKT,LLT,LOCI,LOCJ,LOCK,LOCL
     1,               MINI,MINJ,MINK,MINL,MAXI,MAXJ,MAXK,MAXL
     2,               NIJ,IJD,KLD,IJ,KL
      COMMON /CNTRL/  IPRINT,NDERIV,INTOUT,INFOUT,OPEN,SCFTYP,CALTYP
C
      DIMENSION IA(NUM),DT(NNP),D(NNP,NTYPES)
      DIMENSION ABDENS(LENBLK)
C
      ICHECK = 3
C
      DATA TWO,FOUR /2.0D+00,4.0D+00/
C
C       INITIALIZE ROUTE FOR EACH TYPE OF CALCULATION
C
      IF (SCFTYP(1:5).EQ.'CLSCF') ASSIGN 1 TO JUMP
      IF (SCFTYP(1:5).EQ.'HSOP ') ASSIGN 2 TO JUMP
      IF (SCFTYP(1:5).EQ.'OPSNG') ASSIGN 3 TO JUMP
      IF (SCFTYP(1:5).EQ.'GRSCF') ASSIGN 5 TO JUMP
      IF (SCFTYP(1:5).EQ.'TCSCF') ASSIGN 5 TO JUMP
      IF (ITCSCF.EQ.1)       ASSIGN 4 TO JUMP
C
      RETURN
C
C-------------------------------------------------DAB------------
C
      ENTRY DAB(II,JJ,KK,LL,Q4,ia,dt,d,abdens,lenblk,jump)
C
      NN=0
      DMAX=0.0
      DO 1700 I=MINI,MAXI
        DO 1600 J=MINJ,MAXJ
          LMAX=MAXL
          DO 1500 K=MINK,MAXK
            IF (KANDL) LMAX=K
            DO 1400 L=MINL,LMAX
              NN=NN+1
              I1=LOCI+I
              I2=LOCJ+J
              I3=LOCK+K
              I4=LOCL+L
              IF(I1.GE.I2) GO TO 700
              N=I1
              I1=I2
              I2=N
  700         IF(I3.GE.I4) GO TO 800
              N=I3
              I3=I4
              I4=N
  800         IF(I1-I3) 900,1000,1100
  900         N=I1
              I1=I3
              I3=N
              N=I2
              I2=I4
              I4=N
              GO TO 1100
 1000         IF(I2.LT.I4) GO TO 900
 1100         CONTINUE
              MIJ=IA(I1)+I2
              MIK=IA(I1)+I3
              MIL=IA(I1)+I4
              MKL=IA(I3)+I4
              IF(I2.LT.I3) GO TO 5100
              MJK=IA(I2)+I3
              MJL=IA(I2)+I4
              GO TO 7100
 5100         MJK=IA(I3)+I2
              IF(I2.LT.I4) GO TO 6100
              MJL=IA(I2)+I4
              GO TO 7100
 6100         MJL=IA(I4)+I2
 7100         CONTINUE
              GO TO JUMP, (1,2,3,4,5)
    1         CONTINUE
C
C     ----- CLOSED SHELL SINGLET -----
C
              DFAC=DT(MIJ)*DT(MKL)*4.0-DT(MIK)*DT(MJL)-DT(MIL)*DT(
     *        MJK)
              GO TO 9
    2         CONTINUE
C
C     ----- HIGH-SPIN OPEN-SHELL -----
C
              DFAC=DT(MIJ)*DT(MKL)*4.0-DT(MIK)*DT(MJL)-DT(MIL)*DT(
     *        MJK)-                        D(MIK,2)*D(MJL,2)-D(MIL,2
     *        )*D(MJK,2)
              GO TO 9
    3         CONTINUE
C
C     ----- OPEN SHELL SINGLET -----
C
              DFAC=( DT(MIJ)* DT(MKL)- D(MIJ,2)* D(MKL,2)
     #        +     D(MIJ,3)*D(MKL,4)+D(MIJ,4)*D(MKL,3))*4.0D+00
     #        -      DT(MIK)* DT(MJL)- DT(MIL)* DT(MJK)
     #        +      D(MIK,2)* D(MJL,2)+ D(MIL,2)* D(MJK,2)
     #        +    (D(MIK,3)*D(MJL,4)+D(MIK,4)*D(MJL,3)
     #        +     D(MIL,3)*D(MJK,4)+D(MIL,4)*D(MJK,3))*2.0D+00
              GO TO 9
    4         CONTINUE
CTJL          WRITE(*,*) '  IN TCSCF PART '
C
C     ----- TWO-CONFIGURATION SCF (GVB) -----
C
              DFAC=( DT(MIJ)* DT(MKL)- D(MIJ,2)* D(MKL,2)
     #        +     D(MIJ,3)*D(MKL,3)*SOCC1+D(MIJ,4)*D(MKL,4)*SOCC2)
     *        *4.0D+00-      DT(MIK)* DT(MJL)- DT(MIL)* DT(MJK)
     #        +      D(MIK,2)* D(MJL,2)+ D(MIL,2)* D(MJK,2)
     #        +    (D(MIK,3)*D(MJL,4)+D(MIK,4)*D(MJL,3)
     #        +     D(MIL,3)*D(MJK,4)+D(MIL,4)*D(MJK,3))*SOCC12
              GO TO 9
C
C     ----- GENERAL OPEN SHELL SCF -----
C
    5         CONTINUE
CTJL          WRITE(*,*) '  IN GRSCF PART '
              DFAC1 = 0.0D+00
              DFAC2 = 0.0D+00
              DO 1320 ITYP = 1,NTYPES
                DO 1320 JTYP = 1,NTYPES
                  DFAC1 = DFAC1 + D(MIJ,ITYP)*D(MKL,JTYP) * ALP(
     *            ITYP,JTYP)
                  DFAC2 = DFAC2 +(D(MIK,ITYP)*D(MJL,JTYP)+D(MIL,
     *            ITYP)*D(MJK,JTYP))* BET(ITYP,JTYP)
 1320         CONTINUE
              DFAC = DFAC1 * 8.0D+00 + DFAC2 * 4.0D+00
C
C
    9         CONTINUE
CD    WRITE(ICHECK,991) I1,I2,I3,I4,DFAC/8.0D+00
CD991 FORMAT('  DAB',4I4,F12.7)
              IF(I1.EQ.I2) DFAC=DFAC/TWO
              IF(I3.EQ.I4) DFAC=DFAC/TWO
              DFAC=DFAC*Q4
C
C     ----- THIS FACTOR OF TWO IS NEEDED BECAUSE ONLY GENERATE
C               ONE OF TWO POSSIBLE DERIVATIVES OF [II,KL]     -----
C
              IF (IANDJ.AND.I.EQ.J) DFAC=DFAC*2.0D+00
C
              IF (ABS(DFAC).GT.DMAX) DMAX=ABS(DFAC)
C
CD    IF (ABS(ABDENS(NN)-DFAC).LT.1.0D-6) GO TO 1399
CD    WRITE(ICHECK,992) II,JJ,KK,LL,I1,I2,I3,I4,ABDENS(NN),DFAC
C 992 FORMAT('  DIF?',4I3,I5,3I4,2F12.6)
C1399 CONTINUE
CD    DFAC=ABDENS(NN)
              ABDENS(NN)=DFAC
 1400       CONTINUE
 1500     CONTINUE
 1600   CONTINUE
 1700 CONTINUE
C     IF (ABS(DMAX).GT.1.0E-15) THEN
C     F00TOL=FTOL/DMAX
C     ELSE
C     F00TOL=1.0E+10
C     END IF
      F00TOL=-1.0E+10
      RETURN
      END
      SUBROUTINE DDEBUT(SCFTYP)
C
C
C
C
      IMPLICIT REAL*8 (A-H,O-Z)
      LOGICAL OUT
      CHARACTER*6 SCFTYP
C
      COMMON /OUTPUT/ NPRINT,ITOL,ICUT,NORMF,NORMP,NOPK
      COMMON /DSHLT/  TOL,CUTOFF,OUT
      COMMON /TAPES/  IOUT,ICHECK,INPUT,ITAP42,ITAP49
C
      DATA ONE,TEN,E /1.0E+00,1.0E+01,2.30258E+00/
C
      NPRINT=0
      OUT=NPRINT.EQ.-4
      ICUT0=IABS(ICUT)
      IF(ICUT0.LE.0) ICUT0=9
      CUTOFF=ONE/(TEN**ICUT0)
      IF(ITOL.EQ.0) ITOL=20
      TOL=E*ITOL
      RETURN
      END
cets The following is called by a C program which handles dynamic
cets allocation of memory.
      subroutine fentry(rz,iz,maxcor)
cets  PROGRAM DERIVA
C**********************************************************************
C*   NOTICE OF PROGRAM MODIFICATION                                   *
C**********************************************************************
C*  BY:  RICHARD REMINGTON                         SEARCH:  C3-24-88  *
C*  DATE:  MARCH  24,  1988                                           *
C*  REASON: DECREASE CORE TO RUN IN 7MB ON 9370                       *
C**********************************************************************
C      BY:  WESLEY ALLEN                                              *
C    DATE:  NOVEMBER 5,1986                                           *
C  REASON:  INCREASE CORE SO THAT LARGER CI GRADIENTS CAN RUN.        *
C**********************************************************************
C      BY:  TIM LEE                                                   *
C    DATE:  SEPTEMBER 21,1985                                         *
C  REASON:  MODIFICATIONS FOR TCSCF-CI GRADIENTS                      *
C**********************************************************************
C      BY:  RICHARD REMINGTON                                         *
C    DATE:  FEBRUARY  1, 1985                                         *
C  REASON:  CLEANUP OUTPUT AND STANDARDIZE UNIT 6 TO OUTPUT AND       *
C     UNIT 3 TO CHECK                                                 *
C**********************************************************************
C      BY:  RICHARD REMINGTON                                         *
C    DATE:  FEBRUARY  5, 1985   AND FEB. 6, 1985                      *
C  REASON:  CHANGE UNIT NUMBERS !! 10=>30,44=>34,57=>47,22=>42  !     *
C           CHANGE UNIT NUMBERS !! 21=>55                       !     *
C**********************************************************************
C      BY:  RICHARD REMINGTON                                         *
C    DATE:  FEBRUARY 11, 1985                                         *
C  REASON:  PRINT FILE11 PROPERLY                                     *
C**********************************************************************
C
C
      COMMON /TAPES/  IOUT,ICHECK,INPUT,ITAP42,ITAP49
C
C3-24-88  INTEGER IZ(1600000)
cets  INTEGER IZ(760000)
C3-24-88  REAL*8 RZ(800000)
cets  REAL*8 RZ(380000)
cets  EQUIVALENCE (RZ,IZ)
      real*8 rz(maxcor)
      integer iz(intowp(maxcor))
C
C TO SUPPRESS UNDERFLOW MESSAGES ON THE IBM
      CALL drum
      WRITE(3,*) '   BEFORE CALL TO INIT47 '
      CALL INIT47
      WRITE(3,*) '   AFTER CALL TO INIT47 '
C
      ICHECK = 3
      INPUT  = 5
      IOUT   = 6
      ITAP42 = 42
      ITAP49 = 49
C
C3-24-88  MAXCOR=800000
cets  MAXCOR=380000
C*********************************************************************
      CALL ZERO(RZ,MAXCOR)
      WRITE(ICHECK,10)
  10  FORMAT(/' NEW VERSION OF DERIVA')
C
      CALL MAIN(RZ,IZ,MAXCOR)
C
      JCODE = 3
      CALL RCLOSE(ITAP42,JCODE)
      CALL RCLOSE(30,JCODE)
      CALL RCLOSE(47,JCODE)
      CALL RCLOSE(ITAP49,JCODE)
C
c     CALL TSTOP(6)
c     CALL TSTOP(3)
C
      STOP
      END
      SUBROUTINE DGEN1A(xin,yin,zin,dxi,dyi,dzi,dxj,dyj,dzj,dxk,dyk,dzk,
     #len2d,abdens,lenblk)
C
C
C
      IMPLICIT REAL*8 (A-H,O-Z)
C
      LOGICAL IANDJ,KANDL,SAME,OUT,NORM
      LOGICAL KSKIP,IXCORD,IYCORD,IZCORD,ISSSS
      LOGICAL IPSSS,IPSPS,IPPSS,IPPPP
      LOGICAL OPEN
      real*8 abdens(lenblk)
      CHARACTER*5 CALTYP
      CHARACTER*6 SCFTYP
C
      COMMON /LOCSYM/ NXYZ,IXCORD,IYCORD,IZCORD,ISSSS
     1,               IPSSS,IPSPS,IPPSS,IPPPP,IWHICH
C
      INTEGER*4 ITIME1,ITIME2,ITIME3,ITIME4
C
      COMMON /TIME/   IXYZ(4),JXYZ(4),IFRM(4),JFRM(4), ITIME
C
      COMMON /DSHLNF/ AG(10),CSA(10),CPA(10),CDA(10)
     1,               BG(10),CSB(10),CPB(10),CDB(10)
     1,               CG(10),CSC(10),CPC(10),CDC(10)
     1,               DG(10),CSD(10),CPD(10),CDD(10)
     1,               XI,YI,ZI,XJ,YJ,ZJ,RRI,XK,YK,ZK,XL,YL,ZL,RRK
     1,               NGA,NGB,NGC,NGD
      COMMON /DIJPRM/ AA(100),R(100),X1(100),Y1(100),Z1(100),DD(400)
     1,               IJDEN(36),EIS(100),EJS(100),EIIAS(100),EJIAS(100)
     #,               EIJIAS(100)
      COMMON /DSHLNO/ LIT,LJT,LKT,LLT,LOCI,LOCJ,LOCK,LOCL
     1,               MINI,MINJ,MINK,MINL,MAXI,MAXJ,MAXK,MAXL
     2,               NIJ,IJD,KLD,IJ,KL
      COMMON /ROOT/   XX,U(9),WT(9),NROOTS
      COMMON /DSHLT/  TOL,CUTOFF,OUT
      COMMON /DMISC/  IANDJ,KANDL,SAME
      COMMON /OUTPUT/ NPRINT,ITOL,ICUT,NORMF,NORMP,NOPK
      COMMON /DDENS/  DIJKL
      COMMON /ROOTS/  NONZER
      COMMON /TOLER/  F00TOL,FTOL
CIBM  COMMON /SHELLD/ NATOM(4),NPASS
      COMMON /SHELLD/ XIDER,YIDER,ZIDER,XJDER,YJDER,ZJDER
     2,               XKDER,YKDER,ZKDER,NATOM(4),NPASS
      COMMON /SETD/   BP01,B00,B10,XCP00,XC00,YCP00,YC00,ZCP00,ZC00,F00
     1,               NIMAX,NJMAX,NKMAX,NLMAX,NMAX,MMAX,IOFFST
     2,               IN(6),KN(6)
      COMMON /GEOINF/ XIMXJ,YIMYJ,ZIMZJ,XKMXL,YKMYL,ZKMZL
     1,               XAMXB,YAMYB,ZAMZB
      COMMON /EXPNTS/ EIIA,EJIA,EKIB,EIJIA,EKLIB,RHO,RHOTSQ
     1,               EI,EJ,EK,A,B
      COMMON /CNTRL/  IPRINT,NDERIV,INTOUT,INFOUT,OPEN,SCFTYP,CALTYP
      COMMON /TAPES/  IOUT,ICHECK,INPUT,ITAP42,ITAP49
C
      dimension xin(len2d),yin(len2d),zin(len2d)
      dimension dxi(len2d),dyi(len2d),dzi(len2d)
      dimension dxj(len2d),dyj(len2d),dzj(len2d)
      dimension dxk(len2d),dyk(len2d),dzk(len2d)
      DATA PI252/34.986836655250D+00/
C
      NIMAX=LIT-1
      NJMAX=LJT-1
      NKMAX=LKT-1
      NLMAX=LLT-1
CYO   IF (ONEDER) THEN
C     IF (ONEDER.AND..NOT.CIONE) THEN
C
C     IF THE INTEGRAL HAS TWO P'S AND TWO S'S OR MORE S'S AND LESS P'S
C     CALL FAST ROUTINES
C
      IWHICH=NPASS
C     IWHICH=NXYZ+NPASS
C     IF (ISSSS) THEN
C     CALL SSSS
C     RETURN
C     ELSE IF (IPSSS) THEN
C     CALL PSSS
C     RETURN
C     ELSE IF (IPSPS) THEN
C     CALL PSPS
C     RETURN
C     ELSE IF (IPPSS) THEN
C     CALL PPSS
C     RETURN
C     END IF
CYO
      NMAX=NIMAX+NJMAX
      MMAX=NKMAX+NLMAX
C
C     ----- K PRIMITIVE
C
      LDMAX=NGD
      DO 5000 KG=1,NGC
        EK=CG(KG)
        BRRK=EK*RRK
        EKXK=EK*XK
        EKYK=EK*YK
        EKZK=EK*ZK
        CSK=CSC(KG)*PI252
C
C     ----- L PRIMITIVE
C
        IF (KANDL) LDMAX=KG
        DO 4000 LG=1,LDMAX
          EL=DG(LG)
          B=EK+EL
          BBRRK=EL*BRRK/B
          IF(BBRRK.GT.TOL) GO TO 4000
          EKIB=EK/B
          EKLIB=EL*EKIB
          CSL=CSD(LG)/B
          XB=(EKXK+EL*XL)/B
          YB=(EKYK+EL*YL)/B
          ZB=(EKZK+EL*ZL)/B
          BXBK=B*(XB-XK)
          BYBK=B*(YB-YK)
          BZBK=B*(ZB-ZK)
          BXBI=B*(XB-XI)
          BYBI=B*(YB-YI)
          BZBI=B*(ZB-ZI)
C
C     ----- DENSITY FACTOR
C
          IF (KANDL.AND.KG.NE.LG) THEN
            DKL=CSK*CSL*2.0
          ELSE
            DKL=CSK*CSL
          END IF
C
C     ----- PAIR OF I,J PRIMITIVES
C
          DO 3000 N=1,NIJ
            DUM=BBRRK+R(N)
            IF(DUM.GT.TOL) GO TO 3000
            EI=EIS(N)
            EJ=EJS(N)
            EIIA=EIIAS(N)
            EJIA=EJIAS(N)
            EIJIA=EIJIAS(N)
            A=AA(N)
            AB=A*B
            AANDB=A+B
            EXPE=DD(N)*DKL*EXP(-DUM)/DSQRT(AANDB)
            RHO=AB/AANDB
            XA=X1(N)
            YA=Y1(N)
            ZA=Z1(N)
            XAMXB=XA-XB
            YAMYB=YA-YB
            ZAMZB=ZA-ZB
            XX=RHO*((XAMXB)**2+(YAMYB)**2+(ZAMZB)**2)
            AXEK=A*(XA-XK)
            AYEK=A*(YA-YK)
            AZEK=A*(ZA-ZK)
            AXAI=A*(XA-XI)
            AYAI=A*(YA-YI)
            AZAI=A*(ZA-ZI)
            C1X=BXBK+AXEK
            C2X=A*BXBK
            C3X=BXBI+AXAI
            C4X=B*AXAI
            C1Y=BYBK+AYEK
            C2Y=A*BYBK
            C3Y=BYBI+AYAI
            C4Y=B*AYAI
            C1Z=BZBK+AZEK
            C2Z=A*BZBK
            C3Z=BZBI+AZAI
            C4Z=B*AZAI
C
C     ----- ROOTS AND WEIGHTS FOR QUADRATURE
C
            IF(NROOTS.LE.3) THEN
              CALL RT123
            ELSE IF(NROOTS.EQ.4) THEN
              CALL ROOT4
            ELSE IF(NROOTS.EQ.5) THEN
              CALL ROOT5
            ELSE IF(NROOTS.GT.5.AND.NROOTS.LE.9) THEN
              CALL DROOT
            ELSE
              WRITE (IOUT,900) NROOTS
  900         FORMAT (//,' DERIV ERROR IN NUMBER OF ROOTS:',I8,//)
              STOP ' WEIRD NUMBER OF ROOTS'
            END IF
            IOFFST=0
            NONZER=0
C
C     ----- COMPUTE TWO-ELECTRON  INTEGRALS FOR EACH ROOT -----
C
            DO 2000 M=1,NROOTS
              U2=U(M)*RHO
              RHOTSQ=U2*RHO/(RHO+U2)
              F00=EXPE*WT(M)
C     IF (F00.LT.F00TOL) THEN
C     GO TO 2000
C     END IF
              NONZER=NONZER+1
              DUM=AB+U2*AANDB
              DUM2=DUM+DUM
              BP01=(A+U2)/DUM2
              B00=U2/DUM2
              B10=(B+U2)/DUM2
              XCP00=(U2*C1X+C2X)/DUM
              XC00 =(U2*C3X+C4X)/DUM
              YCP00=(U2*C1Y+C2Y)/DUM
              YC00 =(U2*C3Y+C4Y)/DUM
              ZCP00=(U2*C1Z+C2Z)/DUM
              ZC00 =(U2*C3Z+C4Z)/DUM
              IXYZ(NPASS)=IXYZ(NPASS)+1
C
CYO   GO TO (1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16), IWHICH
C     GO TO (1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16
C    *,      13,14,15,16,17,18,19,20),IWHICH
              GO TO (1,2,3,4),IWHICH
              STOP
C
    1         CALL XYZIJK(xin,yin,zin,dxi,dyi,dzi,dxj,dyj,dzj,dxk,dyk,
     #dzk,len2d)
              GO TO 1999
    2         CALL XYZIJ(xin,yin,zin,dxi,dyi,dzi,dxj,dyj,dzj,len2d)
              GO TO 1999
    3         CALL XYZIK(xin,yin,zin,dxi,dyi,dzi,dxk,dyk,
     #dzk,len2d)
              GO TO 1999
    4         CALL XYZI(xin,yin,zin,dxi,dyi,dzi,len2d)
              GO TO 1999
C   5 CALL YZIJK
C     GO TO 1999
C   6 CALL YZIJ
C     GO TO 1999
C   7 CALL YZIK
C     GO TO 1999
C   8 CALL YZI
C     GO TO 1999
C   9 CALL ZIJK
C     GO TO 1999
C  10 CALL ZIJ
C     GO TO 1999
C  11 CALL ZIK
C     GO TO 1999
C  12 CALL QZI
C     GO TO 1999
C  13 CALL TWOIJK
C     GO TO 1999
C  14 CALL TWOIJ
C     GO TO 1999
C  15 CALL TWOIK
C     GO TO 1999
C  16 CALL TWOI
C     GO TO 1999
C  17 CALL ONEIJK
C     GO TO 1999
C  18 CALL ONEIJ
C     GO TO 1999
C  19 CALL ONEIK
C     GO TO 1999
C  20 CALL ONEI
C
 1999         CONTINUE
              IOFFST=IOFFST + 256
 2000       CONTINUE
C
C     ----- FORM (I,J//K,L) INTEGRALS
C
            IF (NONZER.EQ.0) GO TO 3000
            IFRM(NPASS)=IFRM(NPASS)+1
C
CYO   GO TO (101,102,103,104,105,106,107,108,109,110,
CYO  #       111,112,113,114,115,116), IWHICH
C     GO TO (101,102,103,104,105,106,107,108,109,110,
C    #       111,112,113,114,115,116,117,118,119,120,
C    #       121,122,123,124),IWHICH
            GO TO (101,102,103,104), IWHICH
            STOP
C
  101       CALL FRMIJK(xin,yin,zin,dxi,dyi,dzi,dxj,dyj,dzj,dxk,dyk,
     #dzk,len2d,abdens,lenblk)
            GO TO 2999
  102       CALL FRMIJ(xin,yin,zin,dxi,dyi,dzi,dxj,dyj,dzj,len2d,
     #abdens,lenblk)
            GO TO 2999
  103       CALL FRMIK(xin,yin,zin,dxi,dyi,dzi,dxk,dyk,
     #dzk,len2d,abdens,lenblk)
            GO TO 2999
  104       CALL FRMI(xin,yin,zin,dxi,dyi,dzi,len2d,abdens,lenblk)
            GO TO 2999
C 105 CALL FYZIJK
C     GO TO 2999
C 106 CALL FYZIJ
C     GO TO 2999
C 107 CALL FYZIK
C     GO TO 2999
C 108 CALL FYZI
C     GO TO 2999
C 109 CALL FZIJK
C     GO TO 2999
C 110 CALL FZIJ
C     GO TO 2999
C 111 CALL FZIK
C     GO TO 2999
C 112 CALL FZI
C     GO TO 2999
C 113 CALL MAKIJK
C     GO TO 2999
C 114 CALL MAKIJ
C     GO TO 2999
C 115 CALL MAKIK
C     GO TO 2999
C 116 CALL MAKI
C     GO TO 2999
CYOC
C 117 CALL MK2IJK
C     GO TO 2999
C 118 CALL MK2IJ
C     GO TO 2999
C 119 CALL MK2IK
C     GO TO 2999
C 120 CALL MK2I
C     GO TO 2999
C 121 CALL MK1IJK
C     GO TO 2999
C 122 CALL MK1IJ
C     GO TO 2999
C 123 CALL MK1IK
C     GO TO 2999
C 124 CALL MK1I
CYO
C
 2999       CONTINUE
 3000     CONTINUE
 4000   CONTINUE
 5000 CONTINUE
      RETURN
      END
      SUBROUTINE DGEN1B(xin,yin,zin,dxi,dyi,dzi,dxj,dyj,dzj,dxk,dyk,
     #dzk,len2d,xidint,yidint,zidint,xjdint,yjdint,zjdint,
     #xkdint,ykdint,zkdint,lenint)
C
      IMPLICIT REAL*8 (A-H,O-Z)
C
      LOGICAL IANDJ,KANDL,SAME,OUT,NORM
      LOGICAL KSKIP,IXCORD,IYCORD,IZCORD,ISSSS
      LOGICAL IPSSS,IPSPS,IPPSS,IPPPP
      LOGICAL OPEN
      CHARACTER*5 CALTYP
      CHARACTER*6 SCFTYP
C
      COMMON /LOCSYM/ NXYZ,IXCORD,IYCORD,IZCORD,ISSSS
     1,               IPSSS,IPSPS,IPPSS,IPPPP,IWHICH
C
      INTEGER*4 ITIME1,ITIME2,ITIME3,ITIME4
C
      COMMON /TIME/   IXYZ(4),JXYZ(4),IFRM(4),JFRM(4), ITIME
C
      COMMON /DSHLNF/ AG(10),CSA(10),CPA(10),CDA(10)
     1,               BG(10),CSB(10),CPB(10),CDB(10)
     1,               CG(10),CSC(10),CPC(10),CDC(10)
     1,               DG(10),CSD(10),CPD(10),CDD(10)
     1,               XI,YI,ZI,XJ,YJ,ZJ,RRI,XK,YK,ZK,XL,YL,ZL,RRK
     1,               NGA,NGB,NGC,NGD
      COMMON /DIJPRM/ AA(100),R(100),X1(100),Y1(100),Z1(100),DD(400)
     1,               IJDEN(36),EIS(100),EJS(100),EIIAS(100),EJIAS(100)
     #,               EIJIAS(100)
      COMMON /DSHLNO/ LIT,LJT,LKT,LLT,LOCI,LOCJ,LOCK,LOCL
     1,               MINI,MINJ,MINK,MINL,MAXI,MAXJ,MAXK,MAXL
     2,               NIJ,IJD,KLD,IJ,KL
      COMMON /ROOT/   XX,U(9),WT(9),NROOTS
      COMMON /DSHLT/  TOL,CUTOFF,OUT
      COMMON /DMISC/  IANDJ,KANDL,SAME
      COMMON /OUTPUT/ NPRINT,ITOL,ICUT,NORMF,NORMP,NOPK
      COMMON /DDENS/  DIJKL
      COMMON /ROOTS/  NONZER
      COMMON /TOLER/  F00TOL,FTOL
CIBM  COMMON /SHELLD/ NATOM(4),NPASS
      COMMON /SHELLD/ XIDER,YIDER,ZIDER,XJDER,YJDER,ZJDER
     2,               XKDER,YKDER,ZKDER,NATOM(4),NPASS
      COMMON /SETD/   BP01,B00,B10,XCP00,XC00,YCP00,YC00,ZCP00,ZC00,F00
     1,               NIMAX,NJMAX,NKMAX,NLMAX,NMAX,MMAX,IOFFST
     2,               IN(6),KN(6)
      COMMON /GEOINF/ XIMXJ,YIMYJ,ZIMZJ,XKMXL,YKMYL,ZKMZL
     1,               XAMXB,YAMYB,ZAMZB
      COMMON /EXPNTS/ EIIA,EJIA,EKIB,EIJIA,EKLIB,RHO,RHOTSQ
     1,               EI,EJ,EK,A,B
      COMMON /CNTRL/  IPRINT,NDERIV,INTOUT,INFOUT,OPEN,SCFTYP,CALTYP
      COMMON /TAPES/  IOUT,ICHECK,INPUT,ITAP42,ITAP49
C
      dimension xin(len2d),yin(len2d),zin(len2d)
      dimension dxi(len2d),dyi(len2d),dzi(len2d)
      dimension dxj(len2d),dyj(len2d),dzj(len2d)
      dimension dxk(len2d),dyk(len2d),dzk(len2d)
      dimension xidint(lenint),yidint(lenint),zidint(lenint)
      dimension xjdint(lenint),yjdint(lenint),zjdint(lenint)
      dimension xkdint(lenint),ykdint(lenint),zkdint(lenint)
      DATA PI252/34.986836655250D+00/
C
      NIMAX=LIT-1
      NJMAX=LJT-1
      NKMAX=LKT-1
      NLMAX=LLT-1
      NMAX=NIMAX+NJMAX
      MMAX=NKMAX+NLMAX
C
C     ----- K PRIMITIVE
C
      LDMAX=NGD
      DO 5000 KG=1,NGC
        EK=CG(KG)
        BRRK=EK*RRK
        EKXK=EK*XK
        EKYK=EK*YK
        EKZK=EK*ZK
        CSK=CSC(KG)*PI252
C
C     ----- L PRIMITIVE
C
        IF (KANDL) LDMAX=KG
        DO 4000 LG=1,LDMAX
          EL=DG(LG)
          B=EK+EL
          BBRRK=EL*BRRK/B
          IF(BBRRK.GT.TOL) GO TO 4000
          EKIB=EK/B
          EKLIB=EL*EKIB
          CSL=CSD(LG)/B
          XB=(EKXK+EL*XL)/B
          YB=(EKYK+EL*YL)/B
          ZB=(EKZK+EL*ZL)/B
          BXBK=B*(XB-XK)
          BYBK=B*(YB-YK)
          BZBK=B*(ZB-ZK)
          BXBI=B*(XB-XI)
          BYBI=B*(YB-YI)
          BZBI=B*(ZB-ZI)
C
C     ----- DENSITY FACTOR
C
          IF (KANDL.AND.KG.NE.LG) THEN
            DKL=CSK*CSL*2.0
          ELSE
            DKL=CSK*CSL
          END IF
C
C     ----- PAIR OF I,J PRIMITIVES
C
          DO 3000 N=1,NIJ
            DUM=BBRRK+R(N)
            IF(DUM.GT.TOL) GO TO 3000
            EI=EIS(N)
            EJ=EJS(N)
            EIIA=EIIAS(N)
            EJIA=EJIAS(N)
            EIJIA=EIJIAS(N)
            A=AA(N)
            AB=A*B
            AANDB=A+B
            EXPE=DD(N)*DKL*EXP(-DUM)/DSQRT(AANDB)
            RHO=AB/AANDB
            XA=X1(N)
            YA=Y1(N)
            ZA=Z1(N)
            XAMXB=XA-XB
            YAMYB=YA-YB
            ZAMZB=ZA-ZB
            XX=RHO*((XAMXB)**2+(YAMYB)**2+(ZAMZB)**2)
            AXEK=A*(XA-XK)
            AYEK=A*(YA-YK)
            AZEK=A*(ZA-ZK)
            AXAI=A*(XA-XI)
            AYAI=A*(YA-YI)
            AZAI=A*(ZA-ZI)
            C1X=BXBK+AXEK
            C2X=A*BXBK
            C3X=BXBI+AXAI
            C4X=B*AXAI
            C1Y=BYBK+AYEK
            C2Y=A*BYBK
            C3Y=BYBI+AYAI
            C4Y=B*AYAI
            C1Z=BZBK+AZEK
            C2Z=A*BZBK
            C3Z=BZBI+AZAI
            C4Z=B*AZAI
C
C     ----- ROOTS AND WEIGHTS FOR QUADRATURE
C
            IF(NROOTS.LE.3) THEN
              CALL RT123
            ELSE IF(NROOTS.EQ.4) THEN
              CALL ROOT4
            ELSE IF(NROOTS.EQ.5) THEN
              CALL ROOT5
            ELSE IF(NROOTS.GT.5.AND.NROOTS.LE.9) THEN
              CALL DROOT
            ELSE
              WRITE (IOUT,900) NROOTS
  900         FORMAT (//,' DERIV ERROR IN NUMBER OF ROOTS:',I8,//)
              STOP ' WEIRD NUMBER OF ROOTS'
            END IF
            IOFFST=0
            NONZER=0
C
C     ----- COMPUTE TWO-ELECTRON  INTEGRALS FOR EACH ROOT -----
C
            DO 2000 M=1,NROOTS
              U2=U(M)*RHO
              RHOTSQ=U2*RHO/(RHO+U2)
              F00=EXPE*WT(M)
C     IF (F00.LT.F00TOL) THEN
C     GO TO 2000
C     END IF
              NONZER=NONZER+1
              DUM=AB+U2*AANDB
              DUM2=DUM+DUM
              BP01=(A+U2)/DUM2
              B00=U2/DUM2
              B10=(B+U2)/DUM2
              XCP00=(U2*C1X+C2X)/DUM
              XC00 =(U2*C3X+C4X)/DUM
              YCP00=(U2*C1Y+C2Y)/DUM
              YC00 =(U2*C3Y+C4Y)/DUM
              ZCP00=(U2*C1Z+C2Z)/DUM
              ZC00 =(U2*C3Z+C4Z)/DUM
              IXYZ(NPASS)=IXYZ(NPASS)+1
C
              GO TO (1,2,3,4),NPASS
              STOP
C
    1         CALL XYZIJK(xin,yin,zin,dxi,dyi,dzi,dxj,dyj,dzj,dxk,dyk,
     #dzk,len2d)
              GO TO 1999
    2         CALL XYZIJ(xin,yin,zin,dxi,dyi,dzi,dxj,dyj,dzj,len2d)
              GO TO 1999
    3         CALL XYZIK(xin,yin,zin,dxi,dyi,dzi,dxk,dyk,dzk,len2d)
              GO TO 1999
    4         CALL XYZI(xin,yin,zin,dxi,dyi,dzi,len2d)
              GO TO 1999
C
 1999         CONTINUE
              IOFFST=IOFFST + 256
 2000       CONTINUE
C
C     ----- FORM (I,J//K,L) INTEGRALS
C
            IF (NONZER.EQ.0) GO TO 3000
            IFRM(NPASS)=IFRM(NPASS)+1
C
            GO TO (101,102,103,104), NPASS
            STOP
C
  101       CALL MAKIJK(xin,yin,zin,dxi,dyi,dzi,dxj,dyj,dzj,dxk,dyk,
     #dzk,len2d,xidint,yidint,zidint,xjdint,yjdint,zjdint,
     #xkdint,ykdint,zkdint,lenint)
            GO TO 2999
  102       CALL MAKIJ(xin,yin,zin,dxi,dyi,dzi,dxj,dyj,dzj,
     #len2d,xidint,yidint,zidint,xjdint,yjdint,zjdint,
     #lenint)
            GO TO 2999
  103       CALL MAKIK(xin,yin,zin,dxi,dyi,dzi,dxk,dyk,
     #dzk,len2d,xidint,yidint,zidint,xjdint,yjdint,zjdint,
     #lenint)
            GO TO 2999
  104       CALL MAKI(xin,yin,zin,dxi,dyi,dzi,
     #len2d,xidint,yidint,zidint,lenint)
            GO TO 2999
C
 2999       CONTINUE
 3000     CONTINUE
 4000   CONTINUE
 5000 CONTINUE
      RETURN
      END
      SUBROUTINE DGEN2(xin,yin,zin,dxi,dyi,dzi,dxj,dyj,dzj,dxk,dyk,
     #dzk,dxixi,dxixj,dxixk,dxjxj,dxjxk,dxkxk,
     #dyiyi,dyiyj,dyiyk,dyjyj,dyjyk,dykyk,
     #dzizi,dzizj,dzizk,dzjzj,dzjzk,dzkzk,len2d,
     #xidint,yidint,zidint,xjdint,yjdint,zjdint,
     #xkdint,ykdint,zkdint,lenint,abdens,lenblk)
C
C
C
      IMPLICIT REAL*8 (A-H,O-Z)
C
      LOGICAL IANDJ,KANDL,SAME,OUT,NORM
      LOGICAL KSKIP,IXCORD,IYCORD,IZCORD,ISSSS
      LOGICAL IPSSS,IPSPS,IPPSS,IPPPP
      LOGICAL OPEN
      CHARACTER*5 CALTYP
      CHARACTER*6 SCFTYP
      real*8 xin(len2d),yin(len2d),zin(len2d)
      real*8 dxi(len2d),dyi(len2d),dzi(len2d)
      real*8 dxj(len2d),dyj(len2d),dzj(len2d)
      real*8 dxk(len2d),dyk(len2d),dzk(len2d)
      real*8 dxixi(len2d),dxixj(len2d),dxixk(len2d)
      real*8 dxjxj(len2d),dxjxk(len2d),dxkxk(len2d)
      real*8 dyiyi(len2d),dyiyj(len2d),dyiyk(len2d)
      real*8 dyjyj(len2d),dyjyk(len2d),dykyk(len2d)
      real*8 dzizi(len2d),dzizj(len2d),dzizk(len2d)
      real*8 dzjzj(len2d),dzjzk(len2d),dzkzk(len2d)
      real*8 xidint(lenint),yidint(lenint),zidint(lenint)
      real*8 xjdint(lenint),yjdint(lenint),zjdint(lenint)
      real*8 xkdint(lenint),ykdint(lenint),zkdint(lenint)
      real*8 abdens(lenblk)
C
      COMMON /LOCSYM/ NXYZ,IXCORD,IYCORD,IZCORD,ISSSS
     1,               IPSSS,IPSPS,IPPSS,IPPPP,IWHICH
C
      INTEGER*4 ITIME1,ITIME2,ITIME3,ITIME4
C
      COMMON /TIME/   IXYZ(4),JXYZ(4),IFRM(4),JFRM(4), ITIME
C
      COMMON /DSHLNF/ AG(10),CSA(10),CPA(10),CDA(10)
     1,               BG(10),CSB(10),CPB(10),CDB(10)
     1,               CG(10),CSC(10),CPC(10),CDC(10)
     1,               DG(10),CSD(10),CPD(10),CDD(10)
     1,               XI,YI,ZI,XJ,YJ,ZJ,RRI,XK,YK,ZK,XL,YL,ZL,RRK
     1,               NGA,NGB,NGC,NGD
      COMMON /DIJPRM/ AA(100),R(100),X1(100),Y1(100),Z1(100),DD(400)
     1,               IJDEN(36),EIS(100),EJS(100),EIIAS(100),EJIAS(100)
     #,               EIJIAS(100)
      COMMON /DSHLNO/ LIT,LJT,LKT,LLT,LOCI,LOCJ,LOCK,LOCL
     1,               MINI,MINJ,MINK,MINL,MAXI,MAXJ,MAXK,MAXL
     2,               NIJ,IJD,KLD,IJ,KL
      COMMON /ROOT/   XX,U(9),WT(9),NROOTS
      COMMON /DSHLT/  TOL,CUTOFF,OUT
      COMMON /DMISC/  IANDJ,KANDL,SAME
      COMMON /OUTPUT/ NPRINT,ITOL,ICUT,NORMF,NORMP,NOPK
      COMMON /DDENS/  DIJKL
      COMMON /ROOTS/  NONZER
      COMMON /TOLER/  F00TOL,FTOL
CIBM  COMMON /SHELLD/ NATOM(4),NPASS
      COMMON /SHELLD/ XIDER,YIDER,ZIDER,XJDER,YJDER,ZJDER
     2,               XKDER,YKDER,ZKDER,NATOM(4),NPASS
      COMMON /SETD/   BP01,B00,B10,XCP00,XC00,YCP00,YC00,ZCP00,ZC00,F00
     1,               NIMAX,NJMAX,NKMAX,NLMAX,NMAX,MMAX,IOFFST
     2,               IN(6),KN(6)
      COMMON /GEOINF/ XIMXJ,YIMYJ,ZIMZJ,XKMXL,YKMYL,ZKMZL
     1,               XAMXB,YAMYB,ZAMZB
      COMMON /EXPNTS/ EIIA,EJIA,EKIB,EIJIA,EKLIB,RHO,RHOTSQ
     1,               EI,EJ,EK,A,B
      COMMON /TAPES/  IOUT,ICHECK,INPUT,ITAP42,ITAP49
      COMMON /CNTRL/  IPRINT,NDERIV,INTOUT,INFOUT,OPEN,SCFTYP,CALTYP
C
      DATA PI252/34.986836655250D+00/
C
      NIMAX=LIT-1
      NJMAX=LJT-1
      NKMAX=LKT-1
      NLMAX=LLT-1
      NMAX=NIMAX+NJMAX
      MMAX=NKMAX+NLMAX
C
C     ----- K PRIMITIVE
C
      LDMAX=NGD
      DO 5000 KG=1,NGC
         EK=CG(KG)
         BRRK=EK*RRK
         EKXK=EK*XK
         EKYK=EK*YK
         EKZK=EK*ZK
         CSK=CSC(KG)*PI252
C
C     ----- L PRIMITIVE
C
         IF (KANDL) LDMAX=KG
         DO 4000 LG=1,LDMAX
            EL=DG(LG)
            B=EK+EL
            BBRRK=EL*BRRK/B
            IF(BBRRK.GT.TOL) GO TO 4000
            EKIB=EK/B
            EKLIB=EL*EKIB
            CSL=CSD(LG)/B
            XB=(EKXK+EL*XL)/B
            YB=(EKYK+EL*YL)/B
            ZB=(EKZK+EL*ZL)/B
            BXBK=B*(XB-XK)
            BYBK=B*(YB-YK)
            BZBK=B*(ZB-ZK)
            BXBI=B*(XB-XI)
            BYBI=B*(YB-YI)
            BZBI=B*(ZB-ZI)
C
C     ----- DENSITY FACTOR
C
            IF (KANDL.AND.KG.NE.LG) THEN
               DKL=CSK*CSL*2.0
            ELSE
               DKL=CSK*CSL
            END IF
C
C     ----- PAIR OF I,J PRIMITIVES
C
            DO 3000 N=1,NIJ
               DUM=BBRRK+R(N)
               IF(DUM.GT.TOL) GO TO 3000
               EI=EIS(N)
               EJ=EJS(N)
               EIIA=EIIAS(N)
               EJIA=EJIAS(N)
               EIJIA=EIJIAS(N)
               A=AA(N)
               AB=A*B
               AANDB=A+B
               EXPE=DD(N)*DKL*EXP(-DUM)/DSQRT(AANDB)
               RHO=AB/AANDB
               XA=X1(N)
               YA=Y1(N)
               ZA=Z1(N)
               XAMXB=XA-XB
               YAMYB=YA-YB
               ZAMZB=ZA-ZB
               XX=RHO*((XAMXB)**2+(YAMYB)**2+(ZAMZB)**2)
               AXEK=A*(XA-XK)
               AYEK=A*(YA-YK)
               AZEK=A*(ZA-ZK)
               AXAI=A*(XA-XI)
               AYAI=A*(YA-YI)
               AZAI=A*(ZA-ZI)
               C1X=BXBK+AXEK
               C2X=A*BXBK
               C3X=BXBI+AXAI
               C4X=B*AXAI
               C1Y=BYBK+AYEK
               C2Y=A*BYBK
               C3Y=BYBI+AYAI
               C4Y=B*AYAI
               C1Z=BZBK+AZEK
               C2Z=A*BZBK
               C3Z=BZBI+AZAI
               C4Z=B*AZAI
C
C     ----- ROOTS AND WEIGHTS FOR QUADRATURE
C
               IF(NROOTS.LE.3) THEN
                  CALL RT123
               ELSE IF(NROOTS.EQ.4) THEN
                  CALL ROOT4
               ELSE IF(NROOTS.EQ.5) THEN
                  CALL ROOT5
               ELSE IF(NROOTS.GT.5.AND.NROOTS.LE.9) THEN
                  CALL DROOT
               ELSE
                  WRITE (IOUT,900) NROOTS
  900             FORMAT (//,' DERIV: ERROR IN NUMBER OF ROOTS:',I8,//)
                  STOP ' WEIRD NUMBER OF ROOTS'
               END IF
               IOFFST=0
               NONZER=0
C
C     ----- COMPUTE TWO-ELECTRON  INTEGRALS FOR EACH ROOT -----
C
               DO 2000 M=1,NROOTS
                  U2=U(M)*RHO
                  RHOTSQ=U2*RHO/(RHO+U2)
                  F00=EXPE*WT(M)
C     IF (F00.LT.F00TOL) THEN
C     GO TO 2000
C     END IF
                  NONZER=NONZER+1
                  DUM=AB+U2*AANDB
                  DUM2=DUM+DUM
                  BP01=(A+U2)/DUM2
                  B00=U2/DUM2
                  B10=(B+U2)/DUM2
                  XCP00=(U2*C1X+C2X)/DUM
                  XC00 =(U2*C3X+C4X)/DUM
                  YCP00=(U2*C1Y+C2Y)/DUM
                  YC00 =(U2*C3Y+C4Y)/DUM
                  ZCP00=(U2*C1Z+C2Z)/DUM
                  ZC00 =(U2*C3Z+C4Z)/DUM
                  IXYZ(NPASS)=IXYZ(NPASS)+1
C
                  GO TO (1,2,3,4),NPASS
                  STOP
C
    1             CONTINUE
                  CALL TWOIJK (xin,yin,zin,dxi,dyi,dzi,dxj,dyj,dzj,dxk,
     #dyk,dzk,dxixi,dxixj,dxixk,dxjxj,dxjxk,dxkxk,
     #dyiyi,dyiyj,dyiyk,dyjyj,dyjyk,dykyk,
     #dzizi,dzizj,dzizk,dzjzj,dzjzk,dzkzk,len2d)
                  CALL MK2IJK(xin,yin,zin,dxi,dyi,dzi,dxj,dyj,dzj,dxk,
     #dyk,dzk,dxixi,dxixj,dxixk,dxjxj,dxjxk,dxkxk,
     #dyiyi,dyiyj,dyiyk,dyjyj,dyjyk,dykyk,
     #dzizi,dzizj,dzizk,dzjzj,dzjzk,dzkzk,len2d,
     #xidint,yidint,zidint,xjdint,yjdint,zjdint,
     #xkdint,ykdint,zkdint,lenint,abdens,lenblk)
                  GO TO 1999
    2             CONTINUE
                  CALL TWOIJ (xin,yin,zin,dxi,dyi,dzi,dxj,dyj,dzj,dxk,
     #dyk,dzk,dxixi,dxixj,dxixk,dxjxj,dxjxk,dxkxk,
     #dyiyi,dyiyj,dyiyk,dyjyj,dyjyk,dykyk,
     #dzizi,dzizj,dzizk,dzjzj,dzjzk,dzkzk,len2d)
                  CALL MK2IJ(xin,yin,zin,dxi,dyi,dzi,dxj,dyj,dzj,dxk,
     #dyk,dzk,dxixi,dxixj,dxixk,dxjxj,dxjxk,dxkxk,
     #dyiyi,dyiyj,dyiyk,dyjyj,dyjyk,dykyk,
     #dzizi,dzizj,dzizk,dzjzj,dzjzk,dzkzk,len2d,
     #xidint,yidint,zidint,xjdint,yjdint,zjdint,
     #xkdint,ykdint,zkdint,lenint,abdens,lenblk)
                  GO TO 1999
    3             CONTINUE
                  CALL TWOIK(xin,yin,zin,dxi,dyi,dzi,dxj,dyj,dzj,dxk,
     #dyk,dzk,dxixi,dxixj,dxixk,dxjxj,dxjxk,dxkxk,
     #dyiyi,dyiyj,dyiyk,dyjyj,dyjyk,dykyk,
     #dzizi,dzizj,dzizk,dzjzj,dzjzk,dzkzk,len2d)
                  CALL MK2IK (xin,yin,zin,dxi,dyi,dzi,dxj,dyj,dzj,dxk,
     #dyk,dzk,dxixi,dxixj,dxixk,dxjxj,dxjxk,dxkxk,
     #dyiyi,dyiyj,dyiyk,dyjyj,dyjyk,dykyk,
     #dzizi,dzizj,dzizk,dzjzj,dzjzk,dzkzk,len2d,
     #xidint,yidint,zidint,xjdint,yjdint,zjdint,
     #xkdint,ykdint,zkdint,lenint,abdens,lenblk)
                  GO TO 1999
    4             CONTINUE
                  CALL TWOI(xin,yin,zin,dxi,dyi,dzi,dxj,dyj,dzj,dxk,
     #dyk,dzk,dxixi,dxixj,dxixk,dxjxj,dxjxk,dxkxk,
     #dyiyi,dyiyj,dyiyk,dyjyj,dyjyk,dykyk,
     #dzizi,dzizj,dzizk,dzjzj,dzjzk,dzkzk,len2d)
                  CALL MK2I(xin,yin,zin,dxi,dyi,dzi,dxj,dyj,dzj,dxk,dyk,
     #dzk,dxixi,dxixj,dxixk,dxjxj,dxjxk,dxkxk,
     #dyiyi,dyiyj,dyiyk,dyjyj,dyjyk,dykyk,
     #dzizi,dzizj,dzizk,dzjzj,dzjzk,dzkzk,len2d,
     #xidint,yidint,zidint,xjdint,yjdint,zjdint,
     #xkdint,ykdint,zkdint,lenint,abdens,lenblk)
                  GO TO 1999
C
 1999             CONTINUE
 2000          CONTINUE
 3000       CONTINUE
 4000    CONTINUE
 5000 CONTINUE
      RETURN
      END
      SUBROUTINE DPRIM
C
      IMPLICIT REAL*8 (A-H,O-Z)
      LOGICAL IANDJ,KANDL,SAME,OUT,NORM
C
      COMMON /TAPES/  IOUT,ICHECK,INPUT,ITAP42,ITAP49
      COMMON/OUTPUT/NPRINT,ITOL,ICUT,NORMF,NORMP,NOPK
      COMMON/DSHLT/TOL,CUTOFF,OUT
      COMMON/DSHLNF/AG(10),CSA(10),CPA(10),CDA(10)
     1,             BG(10),CSB(10),CPB(10),CDB(10)
     1,             CG(10),CSC(10),CPC(10),CDC(10)
     1,             DG(10),CSD(10),CPD(10),CDD(10)
     1,             XI,YI,ZI,XJ,YJ,ZJ,RRI,XK,YK,ZK,XL,YL,ZL,RRK
     1,             NGA,NGB,NGC,NGD
      COMMON/DMISC/IANDJ,KANDL,SAME
      COMMON/DSHLNO/LIT,LJT,LKT,LLT,LOCI,LOCJ,LOCK,LOCL,
     1MINI,MINJ,MINK,MINL,MAXI,MAXJ,MAXK,MAXL,
     2NIJ,IJD,KLD,IJ,KL
      COMMON/DIJPRM/AA(100),R(100),X1(100),Y1(100),Z1(100),DIJ(400),
     1IJDEN(36),EIS(100),EJS(100),EIIAS(100),EJIAS(100),EIJIAS(100)
      COMMON /GEOINF/ XIMXJ,YIMYJ,ZIMZJ,XKMXL,YKMYL,ZKMZL
     1,               XAMXB,YAMYB,ZAMZB
      COMMON /EXPNTS/ EIIA,EJIA,EKIB,EIJIA,EKLIB,RHO,RHOTSQ
     1,               EI,EJ,EK,A,B
C
      DIMENSION NA(4),NB(4)
C
      DATA NA /1,1,2,10/, NB /1,1,3,0 /
C
      NORM=NORMF.NE.1.OR.NORMP.NE.1
      MAX=MAXJ
C
C     ----- I PRIMITIVE
C
      NIJ=0
      JBMAX=NGB
      DO 2000 IA=1,NGA
        AI=AG(IA)
        ARRI=AI*RRI
        AXI=AI*XI
        AYI=AI*YI
        AZI=AI*ZI
        CSI=CSA(IA)
C
C     ----- J PRIMITIVE
C
C     IF(IANDJ) JBMAX=IA
        DO 1000 JB=1,JBMAX
          AJ=BG(JB)
          AQ=AI+AJ
          DUM=AJ*ARRI/AQ
          IF(DUM.GT.TOL) GO TO 1000
          CSJ=CSB(JB)/AQ
          NIJ=NIJ+1
          R(NIJ)=DUM
          AA(NIJ)=AQ
          EIS(NIJ)=AI
          EJS(NIJ)=AJ
          EIIAS(NIJ)=AI/AQ
          EJIAS(NIJ)=AJ/AQ
          EIJIAS(NIJ)=AI*EJIAS(NIJ)
          X1(NIJ)=(AXI+AJ*XJ)/AQ
          Y1(NIJ)=(AYI+AJ*YJ)/AQ
          Z1(NIJ)=(AZI+AJ*ZJ)/AQ
C
C     ----- DENSITY FACTOR
C
          DIJ(NIJ)=CSI*CSJ
 1000   CONTINUE
 2000 CONTINUE
      RETURN
      END
      SUBROUTINE DTOTEN(D,NAT)
C
      IMPLICIT INTEGER (A-Z)
C
C
      INTEGER D(1)
C
      COMMON /TAPES/  IOUT,ICHECK,INPUT,ITAP42,ITAP49
      COMMON /ITAP30/ I10(200),ITAP30,IEND,MPOINT,MCONST,MCALCS
     #,               NCALCS
C
C
C
      JUNK=101+MCONST+MPOINT+NCALCS-1
      CALL WREADW(ITAP30,LOCCAL,1,JUNK,JUNK)
C
      LOCCAL=LOCCAL+61
      CALL WREADW(ITAP30,LOCDER,1,LOCCAL,JUNK)
      IF (LOCDER.LE.0) THEN
        LOCDER=IEND
        IEND=IEND+INTOWP(3*NAT)
        CALL WWRITW(ITAP30,LOCDER,1,LOCCAL,JUNK)
        CALL WWRITW(ITAP30,IEND,1,101,JUNK)
      END IF
C
      CALL WWRITW(ITAP30,D,INTOWP(3*NAT),LOCDER,JUNK)
C
C
      RETURN
      END
C    LIBRARY 3 OF DERTFK
C**********************************************************************
C*   NOTICE OF PROGRAM MODIFICATION                                   *
C**********************************************************************
C*  BY:  RICHARD REMINGTON                         SEARCH:  C3-24-88  *
C*  DATE:  MARCH  24,  1988                                           *
C*  REASON: MIGRATION TO RUN IN 7MB ON 9370                           *
C**********************************************************************
C*       BY: TJL                                                      *
C*     DATE: FEBRUARY 24, 1986                                        *
C*   REASON: IMPLEMENT CHANGES FOR TCSCF-CI GRADIENTS AND             *
C*   REASON: CI SECOND DERIVATIVES                                    *
C**********************************************************************
C
      SUBROUTINE FOLD(A,N)
C
C     EXTENDED DUMMY A
C
      REAL*8 A(N,N)
C
      DO 2 J=1,N
         DO 1 I=1,J-1
            A(I,J)=A(I,J)+A(J,I)
            A(J,I)=A(I,J)
    1    CONTINUE
    2 CONTINUE
C
      RETURN
      END
      SUBROUTINE FORME2(D2E)
C
C
C
      IMPLICIT REAL*8 (A-H,O-Z)
C
C     EXTENDED DUMMY D2E
C
      REAL*8 D2E(NAT3,NAT3)
C
CIBM  COMMON /SHELLD/ NATOM(4),NPASS
      COMMON /SHELLD/ XIDER,YIDER,ZIDER,XJDER,YJDER,ZJDER
     2,               XKDER,YKDER,ZKDER,NATOM(4),NPASS
      COMMON /D2INT/  DXIDXI ,DXIDXJ ,DXIDXK
     #,               DXJDXJ ,DXJDXK ,DXKDXK
     #,               DYIDYI ,DYIDYJ ,DYIDYK
     #,               DYJDYJ ,DYJDYK ,DYKDYK
     #,               DZIDZI ,DZIDZJ ,DZIDZK
     #,               DZJDZJ ,DZJDZK ,DZKDZK
     #,               DXIDYI ,DXJDYI ,DXKDYI
     #,               DXIDYJ ,DXJDYJ ,DXKDYJ
     #,               DXIDYK ,DXJDYK ,DXKDYK
     #,               DXIDZI ,DXJDZI ,DXKDZI
     #,               DXIDZJ ,DXJDZJ ,DXKDZJ
     #,               DXIDZK ,DXJDZK ,DXKDZK
     #,               DYIDZI ,DYJDZI ,DYKDZI
     #,               DYIDZJ ,DYJDZJ ,DYKDZJ
     #,               DYIDZK ,DYJDZK ,DYKDZK
      COMMON /SECOND/ NAT3
      COMMON /SHELL/  ISH,JSH,KSH,LSH
      COMMON /INFOA/  NAT,NUM,NNP,NSHELL,NIRRED,NT,NPRIM,MXT,NISO
C
C
      IF (NPASS.EQ.1) THEN
         I=(NATOM(1)-1)*3
         J=(NATOM(2)-1)*3
         K=(NATOM(3)-1)*3
         L=(NATOM(4)-1)*3
C
         D2E(I+1,I+1)=D2E(I+1,I+1)+DXIDXI
         D2E(I+1,I+2)=D2E(I+1,I+2)+DXIDYI
         D2E(I+1,I+3)=D2E(I+1,I+3)+DXIDZI
C
         D2E(I+1,J+1)=D2E(I+1,J+1)+DXIDXJ
         D2E(I+1,J+2)=D2E(I+1,J+2)+DXIDYJ
         D2E(I+1,J+3)=D2E(I+1,J+3)+DXIDZJ
C
         D2E(I+1,K+1)=D2E(I+1,K+1)+DXIDXK
         D2E(I+1,K+2)=D2E(I+1,K+2)+DXIDYK
         D2E(I+1,K+3)=D2E(I+1,K+3)+DXIDZK
C
         D2E(I+1,L+1)=D2E(I+1,L+1)-DXIDXI-DXIDXJ-DXIDXK
         D2E(I+1,L+2)=D2E(I+1,L+2)-DXIDYI-DXIDYJ-DXIDYK
         D2E(I+1,L+3)=D2E(I+1,L+3)-DXIDZI-DXIDZJ-DXIDZK
C
         D2E(I+2,I+2)=D2E(I+2,I+2)+DYIDYI
         D2E(I+2,I+3)=D2E(I+2,I+3)+DYIDZI
C
         D2E(I+2,J+1)=D2E(I+2,J+1)+DXJDYI
         D2E(I+2,J+2)=D2E(I+2,J+2)+DYIDYJ
         D2E(I+2,J+3)=D2E(I+2,J+3)+DYIDZJ
C
         D2E(I+2,K+1)=D2E(I+2,K+1)+DXKDYI
         D2E(I+2,K+2)=D2E(I+2,K+2)+DYIDYK
         D2E(I+2,K+3)=D2E(I+2,K+3)+DYIDZK
C
         D2E(I+2,L+1)=D2E(I+2,L+1)-DXIDYI-DXJDYI-DXKDYI
         D2E(I+2,L+2)=D2E(I+2,L+2)-DYIDYI-DYIDYJ-DYIDYK
         D2E(I+2,L+3)=D2E(I+2,L+3)-DYIDZI-DYIDZJ-DYIDZK
C
C
         D2E(I+3,I+3)=D2E(I+3,I+3)+DZIDZI
C
         D2E(I+3,J+1)=D2E(I+3,J+1)+DXJDZI
         D2E(I+3,J+2)=D2E(I+3,J+2)+DYJDZI
         D2E(I+3,J+3)=D2E(I+3,J+3)+DZIDZJ
C
         D2E(I+3,K+1)=D2E(I+3,K+1)+DXKDZI
         D2E(I+3,K+2)=D2E(I+3,K+2)+DYKDZI
         D2E(I+3,K+3)=D2E(I+3,K+3)+DZIDZK
C
         D2E(I+3,L+1)=D2E(I+3,L+1)-DXIDZI-DXJDZI-DXKDZI
         D2E(I+3,L+2)=D2E(I+3,L+2)-DYIDZI-DYJDZI-DYKDZI
         D2E(I+3,L+3)=D2E(I+3,L+3)-DZIDZI-DZIDZJ-DZIDZK
C
C
         D2E(J+1,J+1)=D2E(J+1,J+1)+DXJDXJ
         D2E(J+1,J+2)=D2E(J+1,J+2)+DXJDYJ
         D2E(J+1,J+3)=D2E(J+1,J+3)+DXJDZJ
C
         D2E(J+1,K+1)=D2E(J+1,K+1)+DXJDXK
         D2E(J+1,K+2)=D2E(J+1,K+2)+DXJDYK
         D2E(J+1,K+3)=D2E(J+1,K+3)+DXJDZK
C
         D2E(J+1,L+1)=D2E(J+1,L+1)-DXIDXJ-DXJDXJ-DXJDXK
         D2E(J+1,L+2)=D2E(J+1,L+2)-DXJDYI-DXJDYJ-DXJDYK
         D2E(J+1,L+3)=D2E(J+1,L+3)-DXJDZI-DXJDZJ-DXJDZK
C
C
         D2E(J+2,J+2)=D2E(J+2,J+2)+DYJDYJ
         D2E(J+2,J+3)=D2E(J+2,J+3)+DYJDZJ
C
         D2E(J+2,K+1)=D2E(J+2,K+1)+DXKDYJ
         D2E(J+2,K+2)=D2E(J+2,K+2)+DYJDYK
         D2E(J+2,K+3)=D2E(J+2,K+3)+DYJDZK
C
         D2E(J+2,L+1)=D2E(J+2,L+1)-DXIDYJ-DXJDYJ-DXKDYJ
         D2E(J+2,L+2)=D2E(J+2,L+2)-DYIDYJ-DYJDYJ-DYJDYK
         D2E(J+2,L+3)=D2E(J+2,L+3)-DYJDZI-DYJDZJ-DYJDZK
C
C
         D2E(J+3,J+3)=D2E(J+3,J+3)+DZJDZJ
C
         D2E(J+3,K+1)=D2E(J+3,K+1)+DXKDZJ
         D2E(J+3,K+2)=D2E(J+3,K+2)+DYKDZJ
         D2E(J+3,K+3)=D2E(J+3,K+3)+DZJDZK
C
         D2E(J+3,L+1)=D2E(J+3,L+1)-DXIDZJ-DXJDZJ-DXKDZJ
         D2E(J+3,L+2)=D2E(J+3,L+2)-DYIDZJ-DYJDZJ-DYKDZJ
         D2E(J+3,L+3)=D2E(J+3,L+3)-DZIDZJ-DZJDZJ-DZJDZK
C
C
         D2E(K+1,K+1)=D2E(K+1,K+1)+DXKDXK
         D2E(K+1,K+2)=D2E(K+1,K+2)+DXKDYK
         D2E(K+1,K+3)=D2E(K+1,K+3)+DXKDZK
C
         D2E(K+1,L+1)=D2E(K+1,L+1)-DXIDXK-DXJDXK-DXKDXK
         D2E(K+1,L+2)=D2E(K+1,L+2)-DXKDYI-DXKDYJ-DXKDYK
         D2E(K+1,L+3)=D2E(K+1,L+3)-DXKDZI-DXKDZJ-DXKDZK
C
C
         D2E(K+2,K+2)=D2E(K+2,K+2)+DYKDYK
         D2E(K+2,K+3)=D2E(K+2,K+3)+DYKDZK
C
         D2E(K+2,L+1)=D2E(K+2,L+1)-DXIDYK-DXJDYK-DXKDYK
         D2E(K+2,L+2)=D2E(K+2,L+2)-DYIDYK-DYJDYK-DYKDYK
         D2E(K+2,L+3)=D2E(K+2,L+3)-DYKDZI-DYKDZJ-DYKDZK
C
C
         D2E(K+3,K+3)=D2E(K+3,K+3)+DZKDZK
C
         D2E(K+3,L+1)=D2E(K+3,L+1)-DXIDZK-DXJDZK-DXKDZK
         D2E(K+3,L+2)=D2E(K+3,L+2)-DYIDZK-DYJDZK-DYKDZK
         D2E(K+3,L+3)=D2E(K+3,L+3)-DZIDZK-DZJDZK-DZKDZK
C
C
         D2E(L+1,L+1)=D2E(L+1,L+1)+DXIDXI+DXIDXJ+DXIDXK+DXIDXJ+DXJDXJ
     #   +                         DXJDXK+DXIDXK+DXJDXK+DXKDXK
         D2E(L+1,L+2)=D2E(L+1,L+2)+DXIDYI+DXIDYJ+DXIDYK+DXJDYI+DXJDYJ
     #   +                         DXJDYK+DXKDYI+DXKDYJ+DXKDYK
         D2E(L+1,L+3)=D2E(L+1,L+3)+DXIDZI+DXIDZJ+DXIDZK+DXJDZI+DXJDZJ
     #   +                         DXJDZK+DXKDZI+DXKDZJ+DXKDZK
C
C
         D2E(L+2,L+2)=D2E(L+2,L+2)+DYIDYI+DYIDYJ+DYIDYK+DYIDYJ+DYJDYJ
     #   +                         DYJDYK+DYIDYK+DYJDYK+DYKDYK
         D2E(L+2,L+3)=D2E(L+2,L+3)+DYIDZI+DYIDZJ+DYIDZK+DYJDZI+DYJDZJ
     #   +                         DYJDZK+DYKDZI+DYKDZJ+DYKDZK
C
C
         D2E(L+3,L+3)=D2E(L+3,L+3)+DZIDZI+DZIDZJ+DZIDZK+DZIDZJ+DZJDZJ
     #   +                         DZJDZK+DZIDZK+DZJDZK+DZKDZK
C
C
      ELSE IF (NPASS.EQ.2) THEN
         I=(NATOM(1)-1)*3
         J=(NATOM(2)-1)*3
         K=(NATOM(3)-1)*3
         IF (I.EQ.J) THEN
            D2E(I+1,I+1)=D2E(I+1,I+1)+DXIDXJ
            D2E(I+2,I+2)=D2E(I+2,I+2)+DYIDYJ
            D2E(I+3,I+3)=D2E(I+3,I+3)+DZIDZJ
         END IF
C
         D2E(I+1,I+1)=D2E(I+1,I+1)+DXIDXI
         D2E(I+1,I+2)=D2E(I+1,I+2)+DXIDYI
         D2E(I+1,I+3)=D2E(I+1,I+3)+DXIDZI
C
         D2E(I+1,J+1)=D2E(I+1,J+1)+DXIDXJ
         D2E(I+1,J+2)=D2E(I+1,J+2)+DXIDYJ
         D2E(I+1,J+3)=D2E(I+1,J+3)+DXIDZJ
C
         D2E(I+1,K+1)=D2E(I+1,K+1)-DXIDXI-DXIDXJ
         D2E(I+1,K+2)=D2E(I+1,K+2)-DXIDYI-DXIDYJ
         D2E(I+1,K+3)=D2E(I+1,K+3)-DXIDZI-DXIDZJ
C
         D2E(I+2,I+2)=D2E(I+2,I+2)+DYIDYI
         D2E(I+2,I+3)=D2E(I+2,I+3)+DYIDZI
C
         D2E(I+2,J+1)=D2E(I+2,J+1)+DXJDYI
         D2E(I+2,J+2)=D2E(I+2,J+2)+DYIDYJ
         D2E(I+2,J+3)=D2E(I+2,J+3)+DYIDZJ
C
         D2E(I+2,K+1)=D2E(I+2,K+1)-DXIDYI-DXJDYI
         D2E(I+2,K+2)=D2E(I+2,K+2)-DYIDYI-DYIDYJ
         D2E(I+2,K+3)=D2E(I+2,K+3)-DYIDZI-DYIDZJ
C
C
         D2E(I+3,I+3)=D2E(I+3,I+3)+DZIDZI
C
         D2E(I+3,J+1)=D2E(I+3,J+1)+DXJDZI
         D2E(I+3,J+2)=D2E(I+3,J+2)+DYJDZI
         D2E(I+3,J+3)=D2E(I+3,J+3)+DZIDZJ
C
         D2E(I+3,K+1)=D2E(I+3,K+1)-DXIDZI-DXJDZI
         D2E(I+3,K+2)=D2E(I+3,K+2)-DYIDZI-DYJDZI
         D2E(I+3,K+3)=D2E(I+3,K+3)-DZIDZI-DZIDZJ
C
C
         D2E(J+1,J+1)=D2E(J+1,J+1)+DXJDXJ
         D2E(J+1,J+2)=D2E(J+1,J+2)+DXJDYJ
         D2E(J+1,J+3)=D2E(J+1,J+3)+DXJDZJ
C
CYO   D2E(J+1,K+1)=D2E(J+1,K+1)
CYO   D2E(J+1,K+2)=D2E(J+1,K+2)
CYO   D2E(J+1,K+3)=D2E(J+1,K+3)
C
         D2E(J+1,K+1)=D2E(J+1,K+1)-DXIDXJ-DXJDXJ
         D2E(J+1,K+2)=D2E(J+1,K+2)-DXJDYI-DXJDYJ
         D2E(J+1,K+3)=D2E(J+1,K+3)-DXJDZI-DXJDZJ
C
C
         D2E(J+2,J+2)=D2E(J+2,J+2)+DYJDYJ
         D2E(J+2,J+3)=D2E(J+2,J+3)+DYJDZJ
C
         D2E(J+2,K+1)=D2E(J+2,K+1)-DXIDYJ-DXJDYJ
         D2E(J+2,K+2)=D2E(J+2,K+2)-DYIDYJ-DYJDYJ
         D2E(J+2,K+3)=D2E(J+2,K+3)-DYJDZI-DYJDZJ
C
C
         D2E(J+3,J+3)=D2E(J+3,J+3)+DZJDZJ
C
         D2E(J+3,K+1)=D2E(J+3,K+1)-DXIDZJ-DXJDZJ
         D2E(J+3,K+2)=D2E(J+3,K+2)-DYIDZJ-DYJDZJ
         D2E(J+3,K+3)=D2E(J+3,K+3)-DZIDZJ-DZJDZJ
C
C
         D2E(K+1,K+1)=D2E(K+1,K+1)+DXIDXI+DXIDXJ+DXIDXJ+DXJDXJ
         D2E(K+1,K+2)=D2E(K+1,K+2)+DXIDYI+DXIDYJ+DXJDYI+DXJDYJ
         D2E(K+1,K+3)=D2E(K+1,K+3)+DXIDZI+DXIDZJ+DXJDZI+DXJDZJ
C
C
         D2E(K+2,K+2)=D2E(K+2,K+2)+DYIDYI+DYIDYJ+DYIDYJ+DYJDYJ
         D2E(K+2,K+3)=D2E(K+2,K+3)+DYIDZI+DYIDZJ+DYJDZI+DYJDZJ
C
C
         D2E(K+3,K+3)=D2E(K+3,K+3)+DZIDZI+DZIDZJ+DZIDZJ+DZJDZJ
C
C
      ELSE IF (NPASS.EQ.3) THEN
         I=(NATOM(1)-1)*3
         K=(NATOM(2)-1)*3
         L=(NATOM(3)-1)*3
         IF (I.EQ.K) THEN
            D2E(I+1,I+1)=D2E(I+1,I+1)+DXIDXK
            D2E(I+2,I+2)=D2E(I+2,I+2)+DYIDYK
            D2E(I+3,I+3)=D2E(I+3,I+3)+DZIDZK
         END IF
C
         D2E(I+1,I+1)=D2E(I+1,I+1)+DXIDXI
         D2E(I+1,I+2)=D2E(I+1,I+2)+DXIDYI
         D2E(I+1,I+3)=D2E(I+1,I+3)+DXIDZI
C
         D2E(I+1,K+1)=D2E(I+1,K+1)+DXIDXK
         D2E(I+1,K+2)=D2E(I+1,K+2)+DXIDYK
         D2E(I+1,K+3)=D2E(I+1,K+3)+DXIDZK
C
         D2E(I+1,L+1)=D2E(I+1,L+1)-DXIDXI-DXIDXK
         D2E(I+1,L+2)=D2E(I+1,L+2)-DXIDYI-DXIDYK
         D2E(I+1,L+3)=D2E(I+1,L+3)-DXIDZI-DXIDZK
C
         D2E(I+2,I+2)=D2E(I+2,I+2)+DYIDYI
         D2E(I+2,I+3)=D2E(I+2,I+3)+DYIDZI
C
         D2E(I+2,K+1)=D2E(I+2,K+1)+DXKDYI
         D2E(I+2,K+2)=D2E(I+2,K+2)+DYIDYK
         D2E(I+2,K+3)=D2E(I+2,K+3)+DYIDZK
C
         D2E(I+2,L+1)=D2E(I+2,L+1)-DXIDYI-DXKDYI
         D2E(I+2,L+2)=D2E(I+2,L+2)-DYIDYI-DYIDYK
         D2E(I+2,L+3)=D2E(I+2,L+3)-DYIDZI-DYIDZK
C
C
         D2E(I+3,I+3)=D2E(I+3,I+3)+DZIDZI
C
         D2E(I+3,K+1)=D2E(I+3,K+1)+DXKDZI
         D2E(I+3,K+2)=D2E(I+3,K+2)+DYKDZI
         D2E(I+3,K+3)=D2E(I+3,K+3)+DZIDZK
C
         D2E(I+3,L+1)=D2E(I+3,L+1)-DXIDZI-DXKDZI
         D2E(I+3,L+2)=D2E(I+3,L+2)-DYIDZI-DYKDZI
         D2E(I+3,L+3)=D2E(I+3,L+3)-DZIDZI-DZIDZK
C
C
         D2E(K+1,K+1)=D2E(K+1,K+1)+DXKDXK
         D2E(K+1,K+2)=D2E(K+1,K+2)+DXKDYK
         D2E(K+1,K+3)=D2E(K+1,K+3)+DXKDZK
C
CYO   D2E(K+1,L+1)=D2E(K+1,L+1)
CYO   D2E(K+1,L+2)=D2E(K+1,L+2)
CYO   D2E(K+1,L+3)=D2E(K+1,L+3)
C
         D2E(K+1,L+1)=D2E(K+1,L+1)-DXIDXK-DXKDXK
         D2E(K+1,L+2)=D2E(K+1,L+2)-DXKDYI-DXKDYK
         D2E(K+1,L+3)=D2E(K+1,L+3)-DXKDZI-DXKDZK
C
C
         D2E(K+2,K+2)=D2E(K+2,K+2)+DYKDYK
         D2E(K+2,K+3)=D2E(K+2,K+3)+DYKDZK
C
         D2E(K+2,L+1)=D2E(K+2,L+1)-DXIDYK-DXKDYK
         D2E(K+2,L+2)=D2E(K+2,L+2)-DYIDYK-DYKDYK
         D2E(K+2,L+3)=D2E(K+2,L+3)-DYKDZI-DYKDZK
C
C
         D2E(K+3,K+3)=D2E(K+3,K+3)+DZKDZK
C
         D2E(K+3,L+1)=D2E(K+3,L+1)-DXIDZK-DXKDZK
         D2E(K+3,L+2)=D2E(K+3,L+2)-DYIDZK-DYKDZK
         D2E(K+3,L+3)=D2E(K+3,L+3)-DZIDZK-DZKDZK
C
C
         D2E(L+1,L+1)=D2E(L+1,L+1)+DXIDXI+DXIDXK+DXIDXK+DXKDXK
         D2E(L+1,L+2)=D2E(L+1,L+2)+DXIDYI+DXIDYK+DXKDYI+DXKDYK
         D2E(L+1,L+3)=D2E(L+1,L+3)+DXIDZI+DXIDZK+DXKDZI+DXKDZK
C
C
         D2E(L+2,L+2)=D2E(L+2,L+2)+DYIDYI+DYIDYK+DYIDYK+DYKDYK
         D2E(L+2,L+3)=D2E(L+2,L+3)+DYIDZI+DYIDZK+DYKDZI+DYKDZK
C
C
         D2E(L+3,L+3)=D2E(L+3,L+3)+DZIDZI+DZIDZK+DZIDZK+DZKDZK
C
C
      ELSE IF (NPASS.EQ.4) THEN
         I=(NATOM(1)-1)*3
         J=(NATOM(2)-1)*3
C
         D2E(I+1,I+1)=D2E(I+1,I+1)+DXIDXI
         D2E(I+1,I+2)=D2E(I+1,I+2)+DXIDYI
         D2E(I+1,I+3)=D2E(I+1,I+3)+DXIDZI
C
         D2E(I+1,J+1)=D2E(I+1,J+1)-DXIDXI
         D2E(I+1,J+2)=D2E(I+1,J+2)-DXIDYI
         D2E(I+1,J+3)=D2E(I+1,J+3)-DXIDZI
C
         D2E(I+2,I+2)=D2E(I+2,I+2)+DYIDYI
         D2E(I+2,I+3)=D2E(I+2,I+3)+DYIDZI
C
         D2E(I+2,J+1)=D2E(I+2,J+1)-DXIDYI
         D2E(I+2,J+2)=D2E(I+2,J+2)-DYIDYI
         D2E(I+2,J+3)=D2E(I+2,J+3)-DYIDZI
C
C
         D2E(I+3,I+3)=D2E(I+3,I+3)+DZIDZI
C
         D2E(I+3,J+1)=D2E(I+3,J+1)-DXIDZI
         D2E(I+3,J+2)=D2E(I+3,J+2)-DYIDZI
         D2E(I+3,J+3)=D2E(I+3,J+3)-DZIDZI
C
C
C
         D2E(J+1,J+1)=D2E(J+1,J+1)+DXIDXI
         D2E(J+1,J+2)=D2E(J+1,J+2)+DXIDYI
         D2E(J+1,J+3)=D2E(J+1,J+3)+DXIDZI
C
C
         D2E(J+2,J+2)=D2E(J+2,J+2)+DYIDYI
         D2E(J+2,J+3)=D2E(J+2,J+3)+DYIDZI
C
C
         D2E(J+3,J+3)=D2E(J+3,J+3)+DZIDZI
C
C
      ELSE
         STOP 'INVALID VALUE OF NPASS IN FORME2'
      END IF
      RETURN
      END
      SUBROUTINE FORMEG(DE)
C
C
C
      IMPLICIT REAL*8 (A-H,O-Z)
C
      character*50 title
C     EXTENDED DUMMY DE
C
CIBM  COMMON /SHELLD/ NATOM(4),NPASS
      COMMON /SHELLD/ XIDER,YIDER,ZIDER,XJDER,YJDER,ZJDER
     2,               XKDER,YKDER,ZKDER,NATOM(4),NPASS
      COMMON /SHELL/  ISH,JSH,KSH,LSH
      COMMON /INFOA/  NAT,NUM,NNP,NSHELL,NIRRED,NT,NPRIM,MXT,NISO
      COMMON /TAPES/  IOUT,ICHECK,INPUT,ITAP42,ITAP49
C
      DIMENSION DE(3,NAT)
C
      IF (NPASS.EQ.1) THEN
        DE(1,NATOM(1)) = DE(1,NATOM(1)) + XIDER
        DE(2,NATOM(1)) = DE(2,NATOM(1)) + YIDER
        DE(3,NATOM(1)) = DE(3,NATOM(1)) + ZIDER
        DE(1,NATOM(2)) = DE(1,NATOM(2)) + XJDER
        DE(2,NATOM(2)) = DE(2,NATOM(2)) + YJDER
        DE(3,NATOM(2)) = DE(3,NATOM(2)) + ZJDER
        DE(1,NATOM(3)) = DE(1,NATOM(3)) + XKDER
        DE(2,NATOM(3)) = DE(2,NATOM(3)) + YKDER
        DE(3,NATOM(3)) = DE(3,NATOM(3)) + ZKDER
        DE(1,NATOM(4)) = DE(1,NATOM(4)) - XIDER - XJDER - XKDER
        DE(2,NATOM(4)) = DE(2,NATOM(4)) - YIDER - YJDER - YKDER
        DE(3,NATOM(4)) = DE(3,NATOM(4)) - ZIDER - ZJDER - ZKDER
C     PRINT '(' IJKL:',4I3,' ATOM:',T25,I2,3G18.8,/,(T25,I2,3G18.8))',
C    1 ISH,JSH,KSH,LSH,NATOM(1),XIDER,YIDER,ZIDER
C    2,NATOM(2),XJDER,YJDER,ZJDER,NATOM(3),XKDER,YKDER,ZKDER
C    3,NATOM(4),-XIDER-XJDER-XKDER,-YIDER-YJDER-YKDER,-ZIDER-ZJDER-ZKDER
      ELSE IF (NPASS.EQ.2) THEN
        DE(1,NATOM(1)) = DE(1,NATOM(1)) + XIDER
        DE(2,NATOM(1)) = DE(2,NATOM(1)) + YIDER
        DE(3,NATOM(1)) = DE(3,NATOM(1)) + ZIDER
        DE(1,NATOM(2)) = DE(1,NATOM(2)) + XJDER
        DE(2,NATOM(2)) = DE(2,NATOM(2)) + YJDER
        DE(3,NATOM(2)) = DE(3,NATOM(2)) + ZJDER
        DE(1,NATOM(3)) = DE(1,NATOM(3)) - XIDER - XJDER
        DE(2,NATOM(3)) = DE(2,NATOM(3)) - YIDER - YJDER
        DE(3,NATOM(3)) = DE(3,NATOM(3)) - ZIDER - ZJDER
C     PRINT '(' IJKL:',4I3,' ATOM:',T25,I2,3G18.8,/,(T25,I2,3G18.8))',
C    1 ISH,JSH,KSH,LSH,NATOM(1),XIDER,YIDER,ZIDER
C    2,NATOM(2),XJDER,YJDER,ZJDER
C    3,NATOM(3),-XIDER-XJDER      ,-YIDER-YJDER      ,-ZIDER-ZJDER
      ELSE IF (NPASS.EQ.3) THEN
        DE(1,NATOM(1)) = DE(1,NATOM(1)) + XIDER
        DE(2,NATOM(1)) = DE(2,NATOM(1)) + YIDER
        DE(3,NATOM(1)) = DE(3,NATOM(1)) + ZIDER
        DE(1,NATOM(2)) = DE(1,NATOM(2)) + XKDER
        DE(2,NATOM(2)) = DE(2,NATOM(2)) + YKDER
        DE(3,NATOM(2)) = DE(3,NATOM(2)) + ZKDER
        DE(1,NATOM(3)) = DE(1,NATOM(3)) - XIDER - XKDER
        DE(2,NATOM(3)) = DE(2,NATOM(3)) - YIDER - YKDER
        DE(3,NATOM(3)) = DE(3,NATOM(3)) - ZIDER - ZKDER
C     PRINT '(' IJKL:',4I3,' ATOM:',T25,I2,3G18.8,/,(T25,I2,3G18.8))',
C    1 ISH,JSH,KSH,LSH,NATOM(1),XIDER,YIDER,ZIDER
C    2,                           NATOM(2),XKDER,YKDER,ZKDER
C    3,NATOM(3),-XIDER      -XKDER,-YIDER      -YKDER,-ZIDER      -ZKDER
      ELSE IF (NPASS.EQ.4) THEN
        DE(1,NATOM(1)) = DE(1,NATOM(1)) + XIDER
        DE(2,NATOM(1)) = DE(2,NATOM(1)) + YIDER
        DE(3,NATOM(1)) = DE(3,NATOM(1)) + ZIDER
        DE(1,NATOM(2)) = DE(1,NATOM(2)) - XIDER
        DE(2,NATOM(2)) = DE(2,NATOM(2)) - YIDER
        DE(3,NATOM(2)) = DE(3,NATOM(2)) - ZIDER
C     PRINT '(' IJKL:',4I3,' ATOM:',T25,I2,3G18.8,/,(T25,I2,3G18.8))',
C    1 ISH,JSH,KSH,LSH,NATOM(1),XIDER,YIDER,ZIDER
C    3,NATOM(2),-XIDER            ,-YIDER            ,-ZIDER
      ELSE
        STOP 'INVALID VALUE OF NPASS IN FORMEG'
      END IF
      title ='forme'
cets  call prnone(title,de)
      RETURN
      END
      SUBROUTINE GLIMIT(KATOM,KLOC)
C
C
C MODIFIED 25 AUGUST 1983 AT BRL TO HANDLE VARIABLE DIMENSIONING
C OF HONDO ARRAYS                                          PWS
C
      IMPLICIT REAL*8 (A-H,O-Z)
C
C     EXTENDED DUMMY KATOM,KLOC
C
      INTEGER KATOM(NSHELL),KLOC(NSHELL)
C
      COMMON /INFOA/  NAT,NUM,NNP,NSHELL,NIRRED,NT,NPRIM,MXT,NISO
      COMMON /ALIM/  LIMINF(30),LIMSUP(30)
      COMMON /TAPES/  IOUT,ICHECK,INPUT,ITAP42,ITAP49
C
      LIMINF(1)=1
      LAT=1
      J=1
      DO 10 I=1,NSHELL
        IAT=KATOM(I)
        IF(LAT.EQ.IAT) GO TO 10
        LAT=IAT
        LIMSUP(J)=KLOC(I)-1
        J=J+1
        LIMINF(J)=KLOC(I)
   10 CONTINUE
      LIMSUP(J)=NUM
      RETURN
      END
      SUBROUTINE I2MIJK(XIN,YIN,ZIN,DXI,DYI,DZI,DXJ,DYJ,DZJ,DXK,DYK,
     #DZK,DXIXI,DXIXJ,DXIXK,DXJXJ,DXJXK,DXKXK,
     #DYIYI,DYIYJ,DYIYK,DYJYJ,DYJYK,DYKYK,
     #DZIZI,DZIZJ,DZIZK,DZJZJ,DZJZK,DZKZK,LEN2D,
     #XIDINT,YIDINT,ZIDINT,XJDINT,YJDINT,ZJDINT,
     #XKDINT,YKDINT,ZKDINT,LENINT,ABDENS,LENBLK)
C
C     ----- FORM INTEGRALS OVER FUNCTIONS -----
C
      IMPLICIT REAL*8 (A-H,O-Z)
C
C     EXTENDED DUMMY XIN,YIN,ZIN,DXI,DYI,DZI,DXJ,DYJ,DZJ,DXK,DYK,DZK
C    #,              DXIXI,DXIXJ,DXIXK,DXJXJ,DXJXK,DXKXK,DYIYI,DYIYJ
C    #,              DYIYK,DYJYJ,DYJYK,DZIZI,DZIZJ,DZIZK,DZJZJ,DZJZK
C    #,              DZKZK,XIDINT,YIDINT,ZIDINT,XJDINT,YJDINT,ZJDINT
C    #,              XKDINT,YKDINT,ZKDINT,DYKYK,ABDENS
C
      REAL*8 XIN(LEN2D),YIN(LEN2D),ZIN(LEN2D)
      REAL*8 DXI(LEN2D),DYI(LEN2D),DZI(LEN2D)
      REAL*8 DXJ(LEN2D),DYJ(LEN2D),DZJ(LEN2D)
      REAL*8 DXK(LEN2D),DYK(LEN2D),DZK(LEN2D)
      REAL*8 DXIXI(LEN2D),DXIXJ(LEN2D),DXIXK(LEN2D)
      REAL*8 DXJXJ(LEN2D),DXJXK(LEN2D),DXKXK(LEN2D)
      REAL*8 DYIYI(LEN2D),DYIYJ(LEN2D),DYIYK(LEN2D)
      REAL*8 DYJYJ(LEN2D),DYJYK(LEN2D),DYKYK(LEN2D)
      REAL*8 DZIZI(LEN2D),DZIZJ(LEN2D),DZIZK(LEN2D)
      REAL*8 DZJZJ(LEN2D),DZJZK(LEN2D),DZKZK(LEN2D)
      REAL*8 XIDINT(LENINT),YIDINT(LENINT),ZIDINT(LENINT)
      REAL*8 XJDINT(LENINT),YJDINT(LENINT),ZJDINT(LENINT)
      REAL*8 XKDINT(LENINT),YKDINT(LENINT),ZKDINT(LENINT)
      REAL*8 ABDENS(LENBLK)
C
C
      COMMON /ROOTS/  NONZER
      COMMON /DINDEX/ IJGT(36),IJX(36),IJY(36),IJZ(36)
     1,               KLGT(78),KLX(78),KLY(78),KLZ(78)
     2,               IJDGT(36),KLDGT(36),KDG(10),LDG(10)
      COMMON /DSHLNO/ LIT,LJT,LKT,LLT,LOCI,LOCJ,LOCK,LOCL
     1,               MINI,MINJ,MINK,MINL,MAXI,MAXJ,MAXK,MAXL
     2,               NIJ,IJD,KLD,IJ,KL
CIBM  COMMON /SHELLD/ NATOM(4),NPASS
      COMMON /SHELLD/ XIDER,YIDER,ZIDER,XJDER,YJDER,ZJDER
     2,               XKDER,YKDER,ZKDER,NATOM(4),NPASS
      COMMON /D2INT/  DXIDXI ,DXIDXJ ,DXIDXK
     #,               DXJDXJ ,DXJDXK ,DXKDXK
     #,               DYIDYI ,DYIDYJ ,DYIDYK
     #,               DYJDYJ ,DYJDYK ,DYKDYK
     #,               DZIDZI ,DZIDZJ ,DZIDZK
     #,               DZJDZJ ,DZJDZK ,DZKDZK
     #,               DXIDYI ,DXJDYI ,DXKDYI
     #,               DXIDYJ ,DXJDYJ ,DXKDYJ
     #,               DXIDYK ,DXJDYK ,DXKDYK
     #,               DXIDZI ,DXJDZI ,DXKDZI
     #,               DXIDZJ ,DXJDZJ ,DXKDZJ
     #,               DXIDZK ,DXJDZK ,DXKDZK
     #,               DYIDZI ,DYJDZI ,DYKDZI
     #,               DYIDZJ ,DYJDZJ ,DYKDZJ
     #,               DYIDZK ,DYJDZK ,DYKDZK
C
      RETURN
C
C--------------------------------------------------------MK2IJK
C
      ENTRY MK2IJK (XIN,YIN,ZIN,DXI,DYI,DZI,DXJ,DYJ,DZJ,DXK,DYK,
     #DZK,DXIXI,DXIXJ,DXIXK,DXJXJ,DXJXK,DXKXK,
     #DYIYI,DYIYJ,DYIYK,DYJYJ,DYJYK,DYKYK,
     #DZIZI,DZIZJ,DZIZK,DZJZJ,DZJZK,DZKZK,LEN2D,
     #XIDINT,YIDINT,ZIDINT,XJDINT,YJDINT,ZJDINT,
     #XKDINT,YKDINT,ZKDINT,LENINT,ABDENS,LENBLK)
C
      N=0
      DO 1 I=1,IJ
        NX=IJX(I)
        NY=IJY(I)
        NZ=IJZ(I)
        DO 1 K=1,KL
          MX=NX+KLX(K)
          MY=NY+KLY(K)
          MZ=NZ+KLZ(K)
          N=N+1
          X=XIN(MX)
          Y=YIN(MY)
          Z=ZIN(MZ)
          XY=X*Y
          XZ=X*Z
          YZ=Y*Z
          XI=DXI(MX)
          XJ=DXJ(MX)
          XK=DXK(MX)
          YI=DYI(MY)
          YJ=DYJ(MY)
          YK=DYK(MY)
          ZI=DZI(MZ)
          ZJ=DZJ(MZ)
          ZK=DZK(MZ)
C
          XIDINT(N)=XIDINT(N) + XI * YZ
          XJDINT(N)=XJDINT(N) + XJ * YZ
          XKDINT(N)=XKDINT(N) + XK * YZ
          YIDINT(N)=YIDINT(N) + YI * XZ
          YJDINT(N)=YJDINT(N) + YJ * XZ
          YKDINT(N)=YKDINT(N) + YK * XZ
          ZIDINT(N)=ZIDINT(N) + ZI * XY
          ZJDINT(N)=ZJDINT(N) + ZJ * XY
          ZKDINT(N)=ZKDINT(N) + ZK * XY
C
          DENSTY=ABDENS(N)
          IF (ABS(DENSTY).LT.1.0D-08) GO TO 1
          X=X*DENSTY
          Y=Y*DENSTY
          Z=Z*DENSTY
          XY=XY*DENSTY
          XZ=XZ*DENSTY
          YZ=YZ*DENSTY
          XITZ=XI*Z
          XJTZ=XJ*Z
          XKTZ=XK*Z
          XITY=XI*Y
          XJTY=XJ*Y
          XKTY=XK*Y
          XTYI=X*YI
          XTYJ=X*YJ
          XTYK=X*YK
C
          DXIDXI = DXIDXI + DXIXI(MX) * YZ
          DXIDXJ = DXIDXJ + DXIXJ(MX) * YZ
          DXIDXK = DXIDXK + DXIXK(MX) * YZ
          DXJDXJ = DXJDXJ + DXJXJ(MX) * YZ
          DXJDXK = DXJDXK + DXJXK(MX) * YZ
          DXKDXK = DXKDXK + DXKXK(MX) * YZ
C
          DYIDYI = DYIDYI + DYIYI(MY) * XZ
          DYIDYJ = DYIDYJ + DYIYJ(MY) * XZ
          DYIDYK = DYIDYK + DYIYK(MY) * XZ
          DYJDYJ = DYJDYJ + DYJYJ(MY) * XZ
          DYJDYK = DYJDYK + DYJYK(MY) * XZ
          DYKDYK = DYKDYK + DYKYK(MY) * XZ
C
          DZIDZI = DZIDZI + DZIZI(MZ) * XY
          DZIDZJ = DZIDZJ + DZIZJ(MZ) * XY
          DZIDZK = DZIDZK + DZIZK(MZ) * XY
          DZJDZJ = DZJDZJ + DZJZJ(MZ) * XY
          DZJDZK = DZJDZK + DZJZK(MZ) * XY
          DZKDZK = DZKDZK + DZKZK(MZ) * XY
C
          DXIDYI = DXIDYI + XITZ * YI
          DXIDYJ = DXIDYJ + XITZ * YJ
          DXIDYK = DXIDYK + XITZ * YK
          DXJDYI = DXJDYI + XJTZ * YI
          DXJDYJ = DXJDYJ + XJTZ * YJ
          DXJDYK = DXJDYK + XJTZ * YK
          DXKDYI = DXKDYI + XKTZ * YI
          DXKDYJ = DXKDYJ + XKTZ * YJ
          DXKDYK = DXKDYK + XKTZ * YK
C
          DXIDZI = DXIDZI + XITY  * ZI
          DXIDZJ = DXIDZJ + XITY  * ZJ
          DXIDZK = DXIDZK + XITY  * ZK
          DXJDZI = DXJDZI + XJTY  * ZI
          DXJDZJ = DXJDZJ + XJTY  * ZJ
          DXJDZK = DXJDZK + XJTY  * ZK
          DXKDZI = DXKDZI + XKTY  * ZI
          DXKDZJ = DXKDZJ + XKTY  * ZJ
          DXKDZK = DXKDZK + XKTY  * ZK
C
          DYIDZI = DYIDZI + XTYI * ZI
          DYIDZJ = DYIDZJ + XTYI * ZJ
          DYIDZK = DYIDZK + XTYI * ZK
          DYJDZI = DYJDZI + XTYJ * ZI
          DYJDZJ = DYJDZJ + XTYJ * ZJ
          DYJDZK = DYJDZK + XTYJ * ZK
          DYKDZI = DYKDZI + XTYK * ZI
          DYKDZJ = DYKDZJ + XTYK * ZJ
          DYKDZK = DYKDZK + XTYK * ZK
C
    1 CONTINUE
      RETURN
C
C-----------------------------------------------------------MK2IJ
C
      ENTRY MK2IJ (XIN,YIN,ZIN,DXI,DYI,DZI,DXJ,DYJ,DZJ,DXK,DYK,
     #DZK,DXIXI,DXIXJ,DXIXK,DXJXJ,DXJXK,DXKXK,
     #DYIYI,DYIYJ,DYIYK,DYJYJ,DYJYK,DYKYK,
     #DZIZI,DZIZJ,DZIZK,DZJZJ,DZJZK,DZKZK,LEN2D,
     #XIDINT,YIDINT,ZIDINT,XJDINT,YJDINT,ZJDINT,
     #XKDINT,YKDINT,ZKDINT,LENINT,ABDENS,LENBLK)
C
      N=0
      DO 2 I=1,IJ
        NX=IJX(I)
        NY=IJY(I)
        NZ=IJZ(I)
        DO 2 K=1,KL
          MX=NX+KLX(K)
          MY=NY+KLY(K)
          MZ=NZ+KLZ(K)
          N=N+1
          X=XIN(MX)
          Y=YIN(MY)
          Z=ZIN(MZ)
          XY=X*Y
          XZ=X*Z
          YZ=Y*Z
          XI=DXI(MX)
          XJ=DXJ(MX)
          YI=DYI(MY)
          YJ=DYJ(MY)
          ZI=DZI(MZ)
          ZJ=DZJ(MZ)
C
          XIDINT(N)=XIDINT(N) + XI * YZ
          XJDINT(N)=XJDINT(N) + XJ * YZ
          YIDINT(N)=YIDINT(N) + YI * XZ
          YJDINT(N)=YJDINT(N) + YJ * XZ
          ZIDINT(N)=ZIDINT(N) + ZI * XY
          ZJDINT(N)=ZJDINT(N) + ZJ * XY
C
          DENSTY=ABDENS(N)
          IF (ABS(DENSTY).LT.1.0D-08) GO TO 2
          X=X*DENSTY
          Y=Y*DENSTY
          Z=Z*DENSTY
          XY=XY*DENSTY
          XZ=XZ*DENSTY
          YZ=YZ*DENSTY
          XITZ=XI*Z
          XJTZ=XJ*Z
          XITY=XI*Y
          XJTY=XJ*Y
          XTYI=X*YI
          XTYJ=X*YJ
C
          DXIDXI = DXIDXI + DXIXI(MX) * YZ
          DXIDXJ = DXIDXJ + DXIXJ(MX) * YZ
          DXJDXJ = DXJDXJ + DXJXJ(MX) * YZ
C
          DYIDYI = DYIDYI + DYIYI(MY) * XZ
          DYIDYJ = DYIDYJ + DYIYJ(MY) * XZ
          DYJDYJ = DYJDYJ + DYJYJ(MY) * XZ
C
          DZIDZI = DZIDZI + DZIZI(MZ) * XY
          DZIDZJ = DZIDZJ + DZIZJ(MZ) * XY
          DZJDZJ = DZJDZJ + DZJZJ(MZ) * XY
C
          DXIDYI = DXIDYI + XITZ * YI
          DXIDYJ = DXIDYJ + XITZ * YJ
          DXJDYI = DXJDYI + XJTZ * YI
          DXJDYJ = DXJDYJ + XJTZ * YJ
C
          DXIDZI = DXIDZI + XITY  * ZI
          DXIDZJ = DXIDZJ + XITY  * ZJ
          DXJDZI = DXJDZI + XJTY  * ZI
          DXJDZJ = DXJDZJ + XJTY  * ZJ
C
          DYIDZI = DYIDZI + XTYI * ZI
          DYIDZJ = DYIDZJ + XTYI * ZJ
          DYJDZI = DYJDZI + XTYJ * ZI
          DYJDZJ = DYJDZJ + XTYJ * ZJ
C
    2 CONTINUE
      RETURN
C
C-------------------------------------------------------MK2IK
C
      ENTRY MK2IK(XIN,YIN,ZIN,DXI,DYI,DZI,DXJ,DYJ,DZJ,DXK,DYK,
     #DZK,DXIXI,DXIXJ,DXIXK,DXJXJ,DXJXK,DXKXK,
     #DYIYI,DYIYJ,DYIYK,DYJYJ,DYJYK,DYKYK,
     #DZIZI,DZIZJ,DZIZK,DZJZJ,DZJZK,DZKZK,LEN2D,
     #XIDINT,YIDINT,ZIDINT,XJDINT,YJDINT,ZJDINT,
     #XKDINT,YKDINT,ZKDINT,LENINT,ABDENS,LENBLK)
C
      N=0
      DO 3 I=1,IJ
        NX=IJX(I)
        NY=IJY(I)
        NZ=IJZ(I)
        DO 3 K=1,KL
          MX=NX+KLX(K)
          MY=NY+KLY(K)
          MZ=NZ+KLZ(K)
          N=N+1
          X=XIN(MX)
          Y=YIN(MY)
          Z=ZIN(MZ)
          XY=X*Y
          XZ=X*Z
          YZ=Y*Z
          XI=DXI(MX)
          XK=DXK(MX)
          YI=DYI(MY)
          YK=DYK(MY)
          ZI=DZI(MZ)
          ZK=DZK(MZ)
C
C     ----- FOR SIMPLICITY LATER, THE DERIVATIVE INTEGRALS ON
C           CENTRE K WILL BE IN NJDINT                      -----
C
          XIDINT(N)=XIDINT(N) + XI * YZ
          XJDINT(N)=XJDINT(N) + XK * YZ
          YIDINT(N)=YIDINT(N) + YI * XZ
          YJDINT(N)=YJDINT(N) + YK * XZ
          ZIDINT(N)=ZIDINT(N) + ZI * XY
          ZJDINT(N)=ZJDINT(N) + ZK * XY
C
          DENSTY=ABDENS(N)
          IF (ABS(DENSTY).LT.1.0D-08) GO TO 3
          X=X*DENSTY
          Y=Y*DENSTY
          Z=Z*DENSTY
          XY=XY*DENSTY
          XZ=XZ*DENSTY
          YZ=YZ*DENSTY
          XITZ=XI*Z
          XKTZ=XK*Z
          XITY=XI*Y
          XKTY=XK*Y
          XTYI=X*YI
          XTYK=X*YK
C
          DXIDXI = DXIDXI + DXIXI(MX) * YZ
          DXIDXK = DXIDXK + DXIXK(MX) * YZ
          DXKDXK = DXKDXK + DXKXK(MX) * YZ
C
          DYIDYI = DYIDYI + DYIYI(MY) * XZ
          DYIDYK = DYIDYK + DYIYK(MY) * XZ
          DYKDYK = DYKDYK + DYKYK(MY) * XZ
C
          DZIDZI = DZIDZI + DZIZI(MZ) * XY
          DZIDZK = DZIDZK + DZIZK(MZ) * XY
          DZKDZK = DZKDZK + DZKZK(MZ) * XY
C
          DXIDYI = DXIDYI + XITZ * YI
          DXIDYK = DXIDYK + XITZ * YK
          DXKDYI = DXKDYI + XKTZ * YI
          DXKDYK = DXKDYK + XKTZ * YK
C
          DXIDZI = DXIDZI + XITY  * ZI
          DXIDZK = DXIDZK + XITY  * ZK
          DXKDZI = DXKDZI + XKTY  * ZI
          DXKDZK = DXKDZK + XKTY  * ZK
C
          DYIDZI = DYIDZI + XTYI * ZI
          DYIDZK = DYIDZK + XTYI * ZK
          DYKDZI = DYKDZI + XTYK * ZI
          DYKDZK = DYKDZK + XTYK * ZK
C
    3 CONTINUE
      RETURN
C
C-----------------------------------------------------------MK2I
C
      ENTRY MK2I(XIN,YIN,ZIN,DXI,DYI,DZI,DXJ,DYJ,DZJ,DXK,DYK,
     #DZK,DXIXI,DXIXJ,DXIXK,DXJXJ,DXJXK,DXKXK,
     #DYIYI,DYIYJ,DYIYK,DYJYJ,DYJYK,DYKYK,
     #DZIZI,DZIZJ,DZIZK,DZJZJ,DZJZK,DZKZK,LEN2D,
     #XIDINT,YIDINT,ZIDINT,XJDINT,YJDINT,ZJDINT,
     #XKDINT,YKDINT,ZKDINT,LENINT,ABDENS,LENBLK)
C
      N=0
      DO 4 I=1,IJ
        NX=IJX(I)
        NY=IJY(I)
        NZ=IJZ(I)
        DO 4 K=1,KL
          MX=NX+KLX(K)
          MY=NY+KLY(K)
          MZ=NZ+KLZ(K)
          N=N+1
          X=XIN(MX)
          Y=YIN(MY)
          Z=ZIN(MZ)
          XY=X*Y
          XZ=X*Z
          YZ=Y*Z
          XI=DXI(MX)
          YI=DYI(MY)
          ZI=DZI(MZ)
C
          XIDINT(N)=XIDINT(N) + XI * YZ
          YIDINT(N)=YIDINT(N) + YI * XZ
          ZIDINT(N)=ZIDINT(N) + ZI * XY
C
          DENSTY=ABDENS(N)
          IF (ABS(DENSTY).LT.1.0D-08) GO TO 4
          XITZ=XI*Z*DENSTY
          XITY=XI*Y*DENSTY
          XTYI=X*YI*DENSTY
C
          DXIDXI = DXIDXI + DXIXI(MX) * YZ * DENSTY
C
          DYIDYI = DYIDYI + DYIYI(MY) * XZ * DENSTY
C
          DZIDZI = DZIDZI + DZIZI(MZ) * XY * DENSTY
C
          DXIDYI = DXIDYI + XITZ * YI
C
          DXIDZI = DXIDZI + XITY  * ZI
C
          DYIDZI = DYIDZI + XTYI * ZI
C
    4 CONTINUE
      RETURN
      END
C    LIBRARY 4 OF DERTFK
C**********************************************************************
C*   NOTICE OF PROGRAM MODIFICATION                                   *
C**********************************************************************
C*  BY:  RICHARD REMINGTON                         SEARCH:  C3-24-88  *
C*  DATE:  MARCH  24,  1988                                           *
C*  REASON: MIGRATION TO RUN IN 7MB ON 9370                           *
C**********************************************************************
C*       BY: TJL                                                      *
C*     DATE: FEBRUARY 24, 1986                                        *
C*   REASON: IMPLEMENT CHANGES FOR TCSCF-CI GRADIENTS AND             *
C*   REASON: CI SECOND DERIVATIVES                                    *
C**********************************************************************
C
      SUBROUTINE IN2IJK(XIN,YIN,ZIN,DXI,DYI,DZI,DXJ,DYJ,DZJ,DXK,DYK,
     #DZK,DXIXI,DXIXJ,DXIXK,DXJXJ,DXJXK,DXKXK,
     #DYIYI,DYIYJ,DYIYK,DYJYJ,DYJYK,DYKYK,
     #DZIZI,DZIZJ,DZIZK,DZJZJ,DZJZK,DZKZK,LEN2D)
C
C
      IMPLICIT REAL*8 (A-H,O-Z)
C
C     EXTENDED DUMMY XIN,YIN,ZIN,DXI,DYI,DZI,DXJ,DYJ,DZJ,DXK,DYK,DZK
C    #,              DXIXI,DXIXJ,DXIXK,DXJXJ,DXJXK,DXKXK,DYIYI,DYIYJ
C    #,              DYIYK,DYJYJ,DYJYK,DZIZI,DZIZJ,DZIZK,DZJZJ,DZJZK
C    #,              DZKZK,DYKYK
C
      REAL*8 XIN(LEN2D),YIN(LEN2D),ZIN(LEN2D)
      REAL*8 DXI(LEN2D),DYI(LEN2D),DZI(LEN2D)
      REAL*8 DXJ(LEN2D),DYJ(LEN2D),DZJ(LEN2D)
      REAL*8 DXK(LEN2D),DYK(LEN2D),DZK(LEN2D)
      REAL*8 DXIXI(LEN2D),DXIXJ(LEN2D),DXIXK(LEN2D)
      REAL*8 DXJXJ(LEN2D),DXJXK(LEN2D),DXKXK(LEN2D)
      REAL*8 DYIYI(LEN2D),DYIYJ(LEN2D),DYIYK(LEN2D)
      REAL*8 DYJYJ(LEN2D),DYJYK(LEN2D),DYKYK(LEN2D)
      REAL*8 DZIZI(LEN2D),DZIZJ(LEN2D),DZIZK(LEN2D)
      REAL*8 DZJZJ(LEN2D),DZJZK(LEN2D),DZKZK(LEN2D)
C
C
      COMMON /SETD/   BP01,B00,B10,XCP00,XC00,YCP00,YC00,ZCP00,ZC00,F00
     1,               NIMAX,NJMAX,NKMAX,NLMAX,NMAX,MMAX,IOFFST
     2,               IN(6),KN(6)
      COMMON /GEOINF/ XIMXJ,YIMYJ,ZIMZJ,XKMXL,YKMYL,ZKMZL
     1,               XAMXB,YAMYB,ZAMZB
      COMMON /EXPNTS/ EIIA,EJIA,EKIB,EIJIA,EKLIB,RHO,RHOTSQ
     1,               EI,EJ,EK,A,B
C
C
      RETURN
C
C----------------------------------------------------------TWOIJK
C
      ENTRY TWOIJK(XIN,YIN,ZIN,DXI,DYI,DZI,DXJ,DYJ,DZJ,DXK,DYK,
     #DZK,DXIXI,DXIXJ,DXIXK,DXJXJ,DXJXK,DXKXK,
     #DYIYI,DYIYJ,DYIYK,DYJYJ,DYJYK,DYKYK,
     #DZIZI,DZIZJ,DZIZK,DZJZJ,DZJZK,DZKZK,LEN2D)
C
      RTIASQ = RHOTSQ / A**2
      RTIBSQ = RHOTSQ / B**2
      RTIAB  = RHOTSQ / (A*B)
      DIC00  = EI/A - RTIASQ*EI - 1
      DJC00  = EJ/A - RTIASQ*EJ
      DKC00  = EK * RTIAB
      DICP00 = EI * RTIAB
      DJCP00 = EJ * RTIAB
      DKCP00 = EK/B - RTIBSQ*EK - 1
      RHO2T  = RHOTSQ + RHOTSQ
      RHO2TI = RHO2T*EIIA
      RHO2TJ = RHO2T*EJIA
      RHO2TK = RHO2T*EKIB
      XICNST =  -XIMXJ*EIJIA*2.0 - XAMXB*RHO2TI
      YICNST =  -YIMYJ*EIJIA*2.0 - YAMYB*RHO2TI
      ZICNST = (-ZIMZJ*EIJIA*2.0 - ZAMZB*RHO2TI)
      XJCNST =   XIMXJ*EIJIA*2.0 - XAMXB*RHO2TJ
      YJCNST =   YIMYJ*EIJIA*2.0 - YAMYB*RHO2TJ
      ZJCNST = ( ZIMZJ*EIJIA*2.0 - ZAMZB*RHO2TJ)
      XKCNST =  -XKMXL*EKLIB*2.0 + XAMXB*RHO2TK
      YKCNST =  -YKMYL*EKLIB*2.0 + YAMYB*RHO2TK
      ZKCNST = (-ZKMZL*EKLIB*2.0 + ZAMZB*RHO2TK)
      DIDICN = -EIJIA*2.0 - EIIA * RHO2TI
      DIDJCN =  EIJIA*2.0 - EJIA * RHO2TI
      DIDKCN =              EKIB * RHO2TI
      DJDJCN = -EIJIA*2.0 - EJIA * RHO2TJ
      DJDKCN =              EKIB * RHO2TJ
      DKDKCN = -EKLIB*2.0 - EKIB * RHO2TK
C
C
C     ----- I(0,0) -----
C
      I = IOFFST + 1
      XIN(I) = 1.0
      YIN(I) = 1.0
      ZIN(I) = F00
      DXI(I) = 0.0
      DYI(I) = 0.0
      DZI(I) = 0.0
      DXJ(I) = 0.0
      DYJ(I) = 0.0
      DZJ(I) = 0.0
      DXK(I) = 0.0
      DYK(I) = 0.0
      DZK(I) = 0.0
      DXIXI(I) = 0.0
      DXIXJ(I) = 0.0
      DXIXK(I) = 0.0
      DXJXJ(I) = 0.0
      DXJXK(I) = 0.0
      DXKXK(I) = 0.0
      DYIYI(I) = 0.0
      DYIYJ(I) = 0.0
      DYIYK(I) = 0.0
      DYJYJ(I) = 0.0
      DYJYK(I) = 0.0
      DYKYK(I) = 0.0
      DZIZI(I) = 0.0
      DZIZJ(I) = 0.0
      DZIZK(I) = 0.0
      DZJZJ(I) = 0.0
      DZJZK(I) = 0.0
      DZKZK(I) = 0.0
C
C     ----- I(1,0)=C00 -----
C
      IF (NMAX.NE.0) THEN
        I2 = IOFFST + 2
        XIN(I2) = XC00
        YIN(I2) = YC00
        ZIN(I2) = ZC00 * F00
        DXI(I2) = DIC00
        DYI(I2) = DIC00
        DZI(I2) = DIC00 * F00
        DXJ(I2) = DJC00
        DYJ(I2) = DJC00
        DZJ(I2) = DJC00 * F00
        DXK(I2) = DKC00
        DYK(I2) = DKC00
        DZK(I2) = DKC00 * F00
        DXIXI(I2) = 0.0
        DXIXJ(I2) = 0.0
        DXIXK(I2) = 0.0
        DXJXJ(I2) = 0.0
        DXJXK(I2) = 0.0
        DXKXK(I2) = 0.0
        DYIYI(I2) = 0.0
        DYIYJ(I2) = 0.0
        DYIYK(I2) = 0.0
        DYJYJ(I2) = 0.0
        DYJYK(I2) = 0.0
        DYKYK(I2) = 0.0
        DZIZI(I2) = 0.0
        DZIZJ(I2) = 0.0
        DZIZK(I2) = 0.0
        DZJZJ(I2) = 0.0
        DZJZK(I2) = 0.0
        DZKZK(I2) = 0.0
      END IF
C
C     ----- I(0,1)=CP00 -----
C
      IF (MMAX.NE.0) THEN
        I = IOFFST + 33
        XIN(I) = XCP00
        YIN(I) = YCP00
        ZIN(I) = ZCP00 * F00
        DXI(I) = DICP00
        DYI(I) = DICP00
        DZI(I) = DICP00 * F00
        DXJ(I) = DJCP00
        DYJ(I) = DJCP00
        DZJ(I) = DJCP00 * F00
        DXK(I) = DKCP00
        DYK(I) = DKCP00
        DZK(I) = DKCP00 * F00
        DXIXI(I) = 0.0
        DXIXJ(I) = 0.0
        DXIXK(I) = 0.0
        DXJXJ(I) = 0.0
        DXJXK(I) = 0.0
        DXKXK(I) = 0.0
        DYIYI(I) = 0.0
        DYIYJ(I) = 0.0
        DYIYK(I) = 0.0
        DYJYJ(I) = 0.0
        DYJYK(I) = 0.0
        DYKYK(I) = 0.0
        DZIZI(I) = 0.0
        DZIZJ(I) = 0.0
        DZIZK(I) = 0.0
        DZJZJ(I) = 0.0
        DZJZK(I) = 0.0
        DZKZK(I) = 0.0
C
C     ----- I(1,1)=B00 * I(0,0) + CP00 * I(1,0) -----
C
        IF (NMAX.NE.0) THEN
          I = IOFFST + 34
          XIN(I) = XCP00 * XIN(I2) + B00
          YIN(I) = YCP00 * YIN(I2) + B00
          ZIN(I) = ZCP00 * ZIN(I2) + B00 * F00
          DXI(I) = DICP00 * XIN(I2) + XCP00 * DXI(I2)
          DYI(I) = DICP00 * YIN(I2) + YCP00 * DYI(I2)
          DZI(I) = DICP00 * ZIN(I2) + ZCP00 * DZI(I2)
          DXJ(I) = DJCP00 * XIN(I2) + XCP00 * DXJ(I2)
          DYJ(I) = DJCP00 * YIN(I2) + YCP00 * DYJ(I2)
          DZJ(I) = DJCP00 * ZIN(I2) + ZCP00 * DZJ(I2)
          DXK(I) = DKCP00 * XIN(I2) + XCP00 * DXK(I2)
          DYK(I) = DKCP00 * YIN(I2) + YCP00 * DYK(I2)
          DZK(I) = DKCP00 * ZIN(I2) + ZCP00 * DZK(I2)
          DXIXI(I) = DICP00 * DXI(I2) + DICP00 * DXI(I2)
          DXIXJ(I) = DICP00 * DXJ(I2) + DJCP00 * DXI(I2)
          DXIXK(I) = DICP00 * DXK(I2) + DKCP00 * DXI(I2)
          DXJXJ(I) = DJCP00 * DXJ(I2) + DJCP00 * DXJ(I2)
          DXJXK(I) = DJCP00 * DXK(I2) + DKCP00 * DXJ(I2)
          DXKXK(I) = DKCP00 * DXK(I2) + DKCP00 * DXK(I2)
          DYIYI(I) = DICP00 * DYI(I2) + DICP00 * DYI(I2)
          DYIYJ(I) = DICP00 * DYJ(I2) + DJCP00 * DYI(I2)
          DYIYK(I) = DICP00 * DYK(I2) + DKCP00 * DYI(I2)
          DYJYJ(I) = DJCP00 * DYJ(I2) + DJCP00 * DYJ(I2)
          DYJYK(I) = DJCP00 * DYK(I2) + DKCP00 * DYJ(I2)
          DYKYK(I) = DKCP00 * DYK(I2) + DKCP00 * DYK(I2)
          DZIZI(I) = DICP00 * DZI(I2) + DICP00 * DZI(I2)
          DZIZJ(I) = DICP00 * DZJ(I2) + DJCP00 * DZI(I2)
          DZIZK(I) = DICP00 * DZK(I2) + DKCP00 * DZI(I2)
          DZJZJ(I) = DJCP00 * DZJ(I2) + DJCP00 * DZJ(I2)
          DZJZK(I) = DJCP00 * DZK(I2) + DKCP00 * DZJ(I2)
          DZKZK(I) = DKCP00 * DZK(I2) + DKCP00 * DZK(I2)
        END IF
      END IF
C
C     ----- I(N,0)=(N-1)B10 * I(N-2,0) + C00 * I(N-1,0) -----
C
      IF (NMAX.GT.1) THEN
        DO 1 N=2,NMAX
          NL10=N + IOFFST
          N0=NL10+1
          NL20=NL10 - 1
          B10NL1=(N-1) * B10
          XIN(N0) = B10NL1 * XIN(NL20) + XC00 * XIN(NL10)
          YIN(N0) = B10NL1 * YIN(NL20) + YC00 * YIN(NL10)
          ZIN(N0) = B10NL1 * ZIN(NL20) + ZC00 * ZIN(NL10)
          DXI(N0) = B10NL1 * DXI(NL20) + DIC00 * XIN(NL10) + XC00* DXI
     *    (NL10)
          DYI(N0) = B10NL1 * DYI(NL20) + DIC00 * YIN(NL10) + YC00* DYI
     *    (NL10)
          DZI(N0) = B10NL1 * DZI(NL20) + DIC00 * ZIN(NL10) + ZC00* DZI
     *    (NL10)
          DXJ(N0) = B10NL1 * DXJ(NL20) + DJC00 * XIN(NL10) + XC00* DXJ
     *    (NL10)
          DYJ(N0) = B10NL1 * DYJ(NL20) + DJC00 * YIN(NL10) + YC00* DYJ
     *    (NL10)
          DZJ(N0) = B10NL1 * DZJ(NL20) + DJC00 * ZIN(NL10) + ZC00* DZJ
     *    (NL10)
          DXK(N0) = B10NL1 * DXK(NL20) + DKC00 * XIN(NL10) + XC00* DXK
     *    (NL10)
          DYK(N0) = B10NL1 * DYK(NL20) + DKC00 * YIN(NL10) + YC00* DYK
     *    (NL10)
          DZK(N0) = B10NL1 * DZK(NL20) + DKC00 * ZIN(NL10) + ZC00* DZK
     *    (NL10)
          DXIXI(N0) = B10NL1 * DXIXI(NL20) + DIC00 * DXI(NL10)
     #    +             XC00 * DXIXI(NL10) + DIC00 * DXI(NL10)
          DXIXJ(N0) = B10NL1 * DXIXJ(NL20) + DIC00 * DXJ(NL10)
     #    +             XC00 * DXIXJ(NL10) + DJC00 * DXI(NL10)
          DXIXK(N0) = B10NL1 * DXIXK(NL20) + DIC00 * DXK(NL10)
     #    +             XC00 * DXIXK(NL10) + DKC00 * DXI(NL10)
          DXJXJ(N0) = B10NL1 * DXJXJ(NL20) + DJC00 * DXJ(NL10)
     #    +             XC00 * DXJXJ(NL10) + DJC00 * DXJ(NL10)
          DXJXK(N0) = B10NL1 * DXJXK(NL20) + DJC00 * DXK(NL10)
     #    +             XC00 * DXJXK(NL10) + DKC00 * DXJ(NL10)
          DXKXK(N0) = B10NL1 * DXKXK(NL20) + DKC00 * DXK(NL10)
     #    +             XC00 * DXKXK(NL10) + DKC00 * DXK(NL10)
          DYIYI(N0) = B10NL1 * DYIYI(NL20) + DIC00 * DYI(NL10)
     #    +             YC00 * DYIYI(NL10) + DIC00 * DYI(NL10)
          DYIYJ(N0) = B10NL1 * DYIYJ(NL20) + DIC00 * DYJ(NL10)
     #    +             YC00 * DYIYJ(NL10) + DJC00 * DYI(NL10)
          DYIYK(N0) = B10NL1 * DYIYK(NL20) + DIC00 * DYK(NL10)
     #    +             YC00 * DYIYK(NL10) + DKC00 * DYI(NL10)
          DYJYJ(N0) = B10NL1 * DYJYJ(NL20) + DJC00 * DYJ(NL10)
     #    +             YC00 * DYJYJ(NL10) + DJC00 * DYJ(NL10)
          DYJYK(N0) = B10NL1 * DYJYK(NL20) + DJC00 * DYK(NL10)
     #    +             YC00 * DYJYK(NL10) + DKC00 * DYJ(NL10)
          DYKYK(N0) = B10NL1 * DYKYK(NL20) + DKC00 * DYK(NL10)
     #    +             YC00 * DYKYK(NL10) + DKC00 * DYK(NL10)
          DZIZI(N0) = B10NL1 * DZIZI(NL20) + DIC00 * DZI(NL10)
     #    +             ZC00 * DZIZI(NL10) + DIC00 * DZI(NL10)
          DZIZJ(N0) = B10NL1 * DZIZJ(NL20) + DIC00 * DZJ(NL10)
     #    +             ZC00 * DZIZJ(NL10) + DJC00 * DZI(NL10)
          DZIZK(N0) = B10NL1 * DZIZK(NL20) + DIC00 * DZK(NL10)
     #    +             ZC00 * DZIZK(NL10) + DKC00 * DZI(NL10)
          DZJZJ(N0) = B10NL1 * DZJZJ(NL20) + DJC00 * DZJ(NL10)
     #    +             ZC00 * DZJZJ(NL10) + DJC00 * DZJ(NL10)
          DZJZK(N0) = B10NL1 * DZJZK(NL20) + DJC00 * DZK(NL10)
     #    +             ZC00 * DZJZK(NL10) + DKC00 * DZJ(NL10)
          DZKZK(N0) = B10NL1 * DZKZK(NL20) + DKC00 * DZK(NL10)
     #    +             ZC00 * DZKZK(NL10) + DKC00 * DZK(NL10)
C
C     ----- I(N,1)=N * B00 * I(N-1,0) + CP00 * I(N,0) -----
C
          IF (MMAX.NE.0) THEN
            N1=N0+32
            B00N = B00 * N
            XIN(N1) = B00N * XIN(NL10) + XCP00 * XIN(N0)
            YIN(N1) = B00N * YIN(NL10) + YCP00 * YIN(N0)
            ZIN(N1) = B00N * ZIN(NL10) + ZCP00 * ZIN(N0)
            DXI(N1) = B00N * DXI(NL10) + DICP00 * XIN(N0) + XCP00 *
     *      DXI(N0)
            DYI(N1) = B00N * DYI(NL10) + DICP00 * YIN(N0) + YCP00 *
     *      DYI(N0)
            DZI(N1) = B00N * DZI(NL10) + DICP00 * ZIN(N0) + ZCP00 *
     *      DZI(N0)
            DXJ(N1) = B00N * DXJ(NL10) + DJCP00 * XIN(N0) + XCP00 *
     *      DXJ(N0)
            DYJ(N1) = B00N * DYJ(NL10) + DJCP00 * YIN(N0) + YCP00 *
     *      DYJ(N0)
            DZJ(N1) = B00N * DZJ(NL10) + DJCP00 * ZIN(N0) + ZCP00 *
     *      DZJ(N0)
            DXK(N1) = B00N * DXK(NL10) + DKCP00 * XIN(N0) + XCP00 *
     *      DXK(N0)
            DYK(N1) = B00N * DYK(NL10) + DKCP00 * YIN(N0) + YCP00 *
     *      DYK(N0)
            DZK(N1) = B00N * DZK(NL10) + DKCP00 * ZIN(N0) + ZCP00 *
     *      DZK(N0)
            DXIXI(N1) = B00N  * DXIXI(NL10) + DICP00 * DXI(N0)
     #      +           XCP00 * DXIXI(N0)   + DICP00 * DXI(N0)
            DXIXJ(N1) = B00N  * DXIXJ(NL10) + DICP00 * DXJ(N0)
     #      +           XCP00 * DXIXJ(N0)   + DJCP00 * DXI(N0)
            DXIXK(N1) = B00N  * DXIXK(NL10) + DICP00 * DXK(N0)
     #      +           XCP00 * DXIXK(N0)   + DKCP00 * DXI(N0)
            DXJXJ(N1) = B00N  * DXJXJ(NL10) + DJCP00 * DXJ(N0)
     #      +           XCP00 * DXJXJ(N0)   + DJCP00 * DXJ(N0)
            DXJXK(N1) = B00N  * DXJXK(NL10) + DJCP00 * DXK(N0)
     #      +           XCP00 * DXJXK(N0)   + DKCP00 * DXJ(N0)
            DXKXK(N1) = B00N  * DXKXK(NL10) + DKCP00 * DXK(N0)
     #      +           XCP00 * DXKXK(N0)   + DKCP00 * DXK(N0)
            DYIYI(N1) = B00N  * DYIYI(NL10) + DICP00 * DYI(N0)
     #      +           YCP00 * DYIYI(N0)   + DICP00 * DYI(N0)
            DYIYJ(N1) = B00N  * DYIYJ(NL10) + DICP00 * DYJ(N0)
     #      +           YCP00 * DYIYJ(N0)   + DJCP00 * DYI(N0)
            DYIYK(N1) = B00N  * DYIYK(NL10) + DICP00 * DYK(N0)
     #      +           YCP00 * DYIYK(N0)   + DKCP00 * DYI(N0)
            DYJYJ(N1) = B00N  * DYJYJ(NL10) + DJCP00 * DYJ(N0)
     #      +           YCP00 * DYJYJ(N0)   + DJCP00 * DYJ(N0)
            DYJYK(N1) = B00N  * DYJYK(NL10) + DJCP00 * DYK(N0)
     #      +           YCP00 * DYJYK(N0)   + DKCP00 * DYJ(N0)
            DYKYK(N1) = B00N  * DYKYK(NL10) + DKCP00 * DYK(N0)
     #      +           YCP00 * DYKYK(N0)   + DKCP00 * DYK(N0)
            DZIZI(N1) = B00N  * DZIZI(NL10) + DICP00 * DZI(N0)
     #      +           ZCP00 * DZIZI(N0)   + DICP00 * DZI(N0)
            DZIZJ(N1) = B00N  * DZIZJ(NL10) + DICP00 * DZJ(N0)
     #      +           ZCP00 * DZIZJ(N0)   + DJCP00 * DZI(N0)
            DZIZK(N1) = B00N  * DZIZK(NL10) + DICP00 * DZK(N0)
     #      +           ZCP00 * DZIZK(N0)   + DKCP00 * DZI(N0)
            DZJZJ(N1) = B00N  * DZJZJ(NL10) + DJCP00 * DZJ(N0)
     #      +           ZCP00 * DZJZJ(N0)   + DJCP00 * DZJ(N0)
            DZJZK(N1) = B00N  * DZJZK(NL10) + DJCP00 * DZK(N0)
     #      +           ZCP00 * DZJZK(N0)   + DKCP00 * DZJ(N0)
            DZKZK(N1) = B00N  * DZKZK(NL10) + DKCP00 * DZK(N0)
     #      +           ZCP00 * DZKZK(N0)   + DKCP00 * DZK(N0)
          END IF
    1   CONTINUE
      END IF
C
C     ----- I(0,M)=(M-1)BP01 * I(0,M-2) + CP00 * I(0,M-1) -----
C
      IF (MMAX.GT.1) THEN
        DO 2 M=2,MMAX
          I0M = M*32 +  1 + IOFFST
          I0ML1 = I0M - 32
          I0ML2 = I0ML1 - 32
          I1M   = I0M + 1
          BPML1 = (M-1) * BP01
          XIN(I0M) = BPML1 * XIN(I0ML2) + XCP00 * XIN(I0ML1)
          YIN(I0M) = BPML1 * YIN(I0ML2) + YCP00 * YIN(I0ML1)
          ZIN(I0M) = BPML1 * ZIN(I0ML2) + ZCP00 * ZIN(I0ML1)
          DXI(I0M) = BPML1 * DXI(I0ML2) + DICP00 * XIN(I0ML1)
     1    +                                XCP00 * DXI(I0ML1)
          DYI(I0M) = BPML1 * DYI(I0ML2) + DICP00 * YIN(I0ML1)
     1    +                                YCP00 * DYI(I0ML1)
          DZI(I0M) = BPML1 * DZI(I0ML2) + DICP00 * ZIN(I0ML1)
     1    +                                ZCP00 * DZI(I0ML1)
          DXJ(I0M) = BPML1 * DXJ(I0ML2) + DJCP00 * XIN(I0ML1)
     1    +                                XCP00 * DXJ(I0ML1)
          DYJ(I0M) = BPML1 * DYJ(I0ML2) + DJCP00 * YIN(I0ML1)
     1    +                                YCP00 * DYJ(I0ML1)
          DZJ(I0M) = BPML1 * DZJ(I0ML2) + DJCP00 * ZIN(I0ML1)
     1    +                                ZCP00 * DZJ(I0ML1)
          DXK(I0M) = BPML1 * DXK(I0ML2) + DKCP00 * XIN(I0ML1)
     1    +                                XCP00 * DXK(I0ML1)
          DYK(I0M) = BPML1 * DYK(I0ML2) + DKCP00 * YIN(I0ML1)
     1    +                                YCP00 * DYK(I0ML1)
          DZK(I0M) = BPML1 * DZK(I0ML2) + DKCP00 * ZIN(I0ML1)
     1    +                                ZCP00 * DZK(I0ML1)
          DXIXI(I0M) = BPML1 * DXIXI(I0ML2) + DICP00 * DXI(I0ML1)
     #    +            XCP00 * DXIXI(I0ML1) + DICP00 * DXI(I0ML1)
          DXIXJ(I0M) = BPML1 * DXIXJ(I0ML2) + DICP00 * DXJ(I0ML1)
     #    +            XCP00 * DXIXJ(I0ML1) + DJCP00 * DXI(I0ML1)
          DXIXK(I0M) = BPML1 * DXIXK(I0ML2) + DICP00 * DXK(I0ML1)
     #    +            XCP00 * DXIXK(I0ML1) + DKCP00 * DXI(I0ML1)
          DXJXJ(I0M) = BPML1 * DXJXJ(I0ML2) + DJCP00 * DXJ(I0ML1)
     #    +            XCP00 * DXJXJ(I0ML1) + DJCP00 * DXJ(I0ML1)
          DXJXK(I0M) = BPML1 * DXJXK(I0ML2) + DJCP00 * DXK(I0ML1)
     #    +            XCP00 * DXJXK(I0ML1) + DKCP00 * DXJ(I0ML1)
          DXKXK(I0M) = BPML1 * DXKXK(I0ML2) + DKCP00 * DXK(I0ML1)
     #    +            XCP00 * DXKXK(I0ML1) + DKCP00 * DXK(I0ML1)
          DYIYI(I0M) = BPML1 * DYIYI(I0ML2) + DICP00 * DYI(I0ML1)
     #    +            YCP00 * DYIYI(I0ML1) + DICP00 * DYI(I0ML1)
          DYIYJ(I0M) = BPML1 * DYIYJ(I0ML2) + DICP00 * DYJ(I0ML1)
     #    +            YCP00 * DYIYJ(I0ML1) + DJCP00 * DYI(I0ML1)
          DYIYK(I0M) = BPML1 * DYIYK(I0ML2) + DICP00 * DYK(I0ML1)
     #    +            YCP00 * DYIYK(I0ML1) + DKCP00 * DYI(I0ML1)
          DYJYJ(I0M) = BPML1 * DYJYJ(I0ML2) + DJCP00 * DYJ(I0ML1)
     #    +            YCP00 * DYJYJ(I0ML1) + DJCP00 * DYJ(I0ML1)
          DYJYK(I0M) = BPML1 * DYJYK(I0ML2) + DJCP00 * DYK(I0ML1)
     #    +            YCP00 * DYJYK(I0ML1) + DKCP00 * DYJ(I0ML1)
          DYKYK(I0M) = BPML1 * DYKYK(I0ML2) + DKCP00 * DYK(I0ML1)
     #    +            YCP00 * DYKYK(I0ML1) + DKCP00 * DYK(I0ML1)
          DZIZI(I0M) = BPML1 * DZIZI(I0ML2) + DICP00 * DZI(I0ML1)
     #    +            ZCP00 * DZIZI(I0ML1) + DICP00 * DZI(I0ML1)
          DZIZJ(I0M) = BPML1 * DZIZJ(I0ML2) + DICP00 * DZJ(I0ML1)
     #    +            ZCP00 * DZIZJ(I0ML1) + DJCP00 * DZI(I0ML1)
          DZIZK(I0M) = BPML1 * DZIZK(I0ML2) + DICP00 * DZK(I0ML1)
     #    +            ZCP00 * DZIZK(I0ML1) + DKCP00 * DZI(I0ML1)
          DZJZJ(I0M) = BPML1 * DZJZJ(I0ML2) + DJCP00 * DZJ(I0ML1)
     #    +            ZCP00 * DZJZJ(I0ML1) + DJCP00 * DZJ(I0ML1)
          DZJZK(I0M) = BPML1 * DZJZK(I0ML2) + DJCP00 * DZK(I0ML1)
     #    +            ZCP00 * DZJZK(I0ML1) + DKCP00 * DZJ(I0ML1)
          DZKZK(I0M) = BPML1 * DZKZK(I0ML2) + DKCP00 * DZK(I0ML1)
     #    +            ZCP00 * DZKZK(I0ML1) + DKCP00 * DZK(I0ML1)
C
C     ----- I(1,M)=M * B00 * I(0,M-1) + C00 * I(0,M) -----
C
          IF (NMAX.NE.0) THEN
            B00M = M * B00
            XIN(I1M) = B00M * XIN(I0ML1) + XC00 * XIN(I0M)
            YIN(I1M) = B00M * YIN(I0ML1) + YC00 * YIN(I0M)
            ZIN(I1M) = B00M * ZIN(I0ML1) + ZC00 * ZIN(I0M)
            DXI(I1M) = B00M * DXI(I0ML1) + DIC00 * XIN(I0M) + XC00 *
     *      DXI(I0M)
            DYI(I1M) = B00M * DYI(I0ML1) + DIC00 * YIN(I0M) + YC00 *
     *      DYI(I0M)
            DZI(I1M) = B00M * DZI(I0ML1) + DIC00 * ZIN(I0M) + ZC00 *
     *      DZI(I0M)
            DXJ(I1M) = B00M * DXJ(I0ML1) + DJC00 * XIN(I0M) + XC00 *
     *      DXJ(I0M)
            DYJ(I1M) = B00M * DYJ(I0ML1) + DJC00 * YIN(I0M) + YC00 *
     *      DYJ(I0M)
            DZJ(I1M) = B00M * DZJ(I0ML1) + DJC00 * ZIN(I0M) + ZC00 *
     *      DZJ(I0M)
            DXK(I1M) = B00M * DXK(I0ML1) + DKC00 * XIN(I0M) + XC00 *
     *      DXK(I0M)
            DYK(I1M) = B00M * DYK(I0ML1) + DKC00 * YIN(I0M) + YC00 *
     *      DYK(I0M)
            DZK(I1M) = B00M * DZK(I0ML1) + DKC00 * ZIN(I0M) + ZC00 *
     *      DZK(I0M)
            DXIXI(I1M) = B00M * DXIXI(I0ML1) + DIC00 * DXI(I0M)
     #      +            XC00 * DXIXI(I0M)   + DIC00 * DXI(I0M)
            DXIXJ(I1M) = B00M * DXIXJ(I0ML1) + DIC00 * DXJ(I0M)
     #      +            XC00 * DXIXJ(I0M)   + DJC00 * DXI(I0M)
            DXIXK(I1M) = B00M * DXIXK(I0ML1) + DIC00 * DXK(I0M)
     #      +            XC00 * DXIXK(I0M)   + DKC00 * DXI(I0M)
            DXJXJ(I1M) = B00M * DXJXJ(I0ML1) + DJC00 * DXJ(I0M)
     #      +            XC00 * DXJXJ(I0M)   + DJC00 * DXJ(I0M)
            DXJXK(I1M) = B00M * DXJXK(I0ML1) + DJC00 * DXK(I0M)
     #      +            XC00 * DXJXK(I0M)   + DKC00 * DXJ(I0M)
            DXKXK(I1M) = B00M * DXKXK(I0ML1) + DKC00 * DXK(I0M)
     #      +            XC00 * DXKXK(I0M)   + DKC00 * DXK(I0M)
            DYIYI(I1M) = B00M * DYIYI(I0ML1) + DIC00 * DYI(I0M)
     #      +            YC00 * DYIYI(I0M)   + DIC00 * DYI(I0M)
            DYIYJ(I1M) = B00M * DYIYJ(I0ML1) + DIC00 * DYJ(I0M)
     #      +            YC00 * DYIYJ(I0M)   + DJC00 * DYI(I0M)
            DYIYK(I1M) = B00M * DYIYK(I0ML1) + DIC00 * DYK(I0M)
     #      +            YC00 * DYIYK(I0M)   + DKC00 * DYI(I0M)
            DYJYJ(I1M) = B00M * DYJYJ(I0ML1) + DJC00 * DYJ(I0M)
     #      +            YC00 * DYJYJ(I0M)   + DJC00 * DYJ(I0M)
            DYJYK(I1M) = B00M * DYJYK(I0ML1) + DJC00 * DYK(I0M)
     #      +            YC00 * DYJYK(I0M)   + DKC00 * DYJ(I0M)
            DYKYK(I1M) = B00M * DYKYK(I0ML1) + DKC00 * DYK(I0M)
     #      +            YC00 * DYKYK(I0M)   + DKC00 * DYK(I0M)
            DZIZI(I1M) = B00M * DZIZI(I0ML1) + DIC00 * DZI(I0M)
     #      +            ZC00 * DZIZI(I0M)   + DIC00 * DZI(I0M)
            DZIZJ(I1M) = B00M * DZIZJ(I0ML1) + DIC00 * DZJ(I0M)
     #      +            ZC00 * DZIZJ(I0M)   + DJC00 * DZI(I0M)
            DZIZK(I1M) = B00M * DZIZK(I0ML1) + DIC00 * DZK(I0M)
     #      +            ZC00 * DZIZK(I0M)   + DKC00 * DZI(I0M)
            DZJZJ(I1M) = B00M * DZJZJ(I0ML1) + DJC00 * DZJ(I0M)
     #      +            ZC00 * DZJZJ(I0M)   + DJC00 * DZJ(I0M)
            DZJZK(I1M) = B00M * DZJZK(I0ML1) + DJC00 * DZK(I0M)
     #      +            ZC00 * DZJZK(I0M)   + DKC00 * DZJ(I0M)
            DZKZK(I1M) = B00M * DZKZK(I0ML1) + DKC00 * DZK(I0M)
     #      +            ZC00 * DZKZK(I0M)   + DKC00 * DZK(I0M)
          END IF
    2   CONTINUE
      END IF
C
C     ----- I(N,M)=(N-1)B10 * I(N-2,M) + M * B00 * I(N-1,M-1) +
C                                            C00 * I(N-1,M)   -----
C
      IF (NMAX.GT.1.AND.MMAX.GT.1) THEN
        DO 4 M=2,MMAX
          M8=M*32 + IOFFST
          DO 3 N=2,NMAX
            NM=N + 1 + M8
            NL1M=NM - 1
            NL1ML1= NL1M - 32
            NL2M = NL1M - 1
            B10NL1 = (N-1) * B10
            B00M = M * B00
            XIN(NM) = B10NL1 * XIN(NL2M) + B00M * XIN(NL1ML1) +XC00 *
     *      XIN(NL1M)
            YIN(NM) = B10NL1 * YIN(NL2M) + B00M * YIN(NL1ML1) +YC00 *
     *      YIN(NL1M)
            ZIN(NM) = B10NL1 * ZIN(NL2M) + B00M * ZIN(NL1ML1) +ZC00 *
     *      ZIN(NL1M)
            DXI(NM) = B10NL1 * DXI(NL2M) + B00M * DXI(NL1ML1)
     1      +          DIC00 * XIN(NL1M) + XC00  * DXI(NL1M)
            DYI(NM) = B10NL1 * DYI(NL2M) + B00M * DYI(NL1ML1)
     1      +          DIC00 * YIN(NL1M) + YC00  * DYI(NL1M)
            DZI(NM) = B10NL1 * DZI(NL2M) + B00M * DZI(NL1ML1)
     1      +          DIC00 * ZIN(NL1M) + ZC00  * DZI(NL1M)
            DXJ(NM) = B10NL1 * DXJ(NL2M) + B00M * DXJ(NL1ML1)
     1      +          DJC00 * XIN(NL1M) + XC00  * DXJ(NL1M)
            DYJ(NM) = B10NL1 * DYJ(NL2M) + B00M * DYJ(NL1ML1)
     1      +          DJC00 * YIN(NL1M) + YC00  * DYJ(NL1M)
            DZJ(NM) = B10NL1 * DZJ(NL2M) + B00M * DZJ(NL1ML1)
     1      +          DJC00 * ZIN(NL1M) + ZC00  * DZJ(NL1M)
            DXK(NM) = B10NL1 * DXK(NL2M) + B00M * DXK(NL1ML1)
     1      +          DKC00 * XIN(NL1M) + XC00  * DXK(NL1M)
            DYK(NM) = B10NL1 * DYK(NL2M) + B00M * DYK(NL1ML1)
     1      +          DKC00 * YIN(NL1M) + YC00  * DYK(NL1M)
            DZK(NM) = B10NL1 * DZK(NL2M) + B00M * DZK(NL1ML1)
     1      +          DKC00 * ZIN(NL1M) + ZC00  * DZK(NL1M)
            DXIXI(NM) = B10NL1 * DXIXI(NL2M) + DIC00 * DXI(NL1M)
     #      +             XC00 * DXIXI(NL1M) + DIC00 * DXI(NL1M)
     #      +             B00M * DXIXI(NL1ML1)
            DXIXJ(NM) = B10NL1 * DXIXJ(NL2M) + DIC00 * DXJ(NL1M)
     #      +             XC00 * DXIXJ(NL1M) + DJC00 * DXI(NL1M)
     #      +             B00M * DXIXJ(NL1ML1)
            DXIXK(NM) = B10NL1 * DXIXK(NL2M) + DIC00 * DXK(NL1M)
     #      +             XC00 * DXIXK(NL1M) + DKC00 * DXI(NL1M)
     #      +             B00M * DXIXK(NL1ML1)
            DXJXJ(NM) = B10NL1 * DXJXJ(NL2M) + DJC00 * DXJ(NL1M)
     #      +             XC00 * DXJXJ(NL1M) + DJC00 * DXJ(NL1M)
     #      +             B00M * DXJXJ(NL1ML1)
            DXJXK(NM) = B10NL1 * DXJXK(NL2M) + DJC00 * DXK(NL1M)
     #      +             XC00 * DXJXK(NL1M) + DKC00 * DXJ(NL1M)
     #      +             B00M * DXJXK(NL1ML1)
            DXKXK(NM) = B10NL1 * DXKXK(NL2M) + DKC00 * DXK(NL1M)
     #      +             XC00 * DXKXK(NL1M) + DKC00 * DXK(NL1M)
     #      +             B00M * DXKXK(NL1ML1)
            DYIYI(NM) = B10NL1 * DYIYI(NL2M) + DIC00 * DYI(NL1M)
     #      +             YC00 * DYIYI(NL1M) + DIC00 * DYI(NL1M)
     #      +             B00M * DYIYI(NL1ML1)
            DYIYJ(NM) = B10NL1 * DYIYJ(NL2M) + DIC00 * DYJ(NL1M)
     #      +             YC00 * DYIYJ(NL1M) + DJC00 * DYI(NL1M)
     #      +             B00M * DYIYJ(NL1ML1)
            DYIYK(NM) = B10NL1 * DYIYK(NL2M) + DIC00 * DYK(NL1M)
     #      +             YC00 * DYIYK(NL1M) + DKC00 * DYI(NL1M)
     #      +             B00M * DYIYK(NL1ML1)
            DYJYJ(NM) = B10NL1 * DYJYJ(NL2M) + DJC00 * DYJ(NL1M)
     #      +             YC00 * DYJYJ(NL1M) + DJC00 * DYJ(NL1M)
     #      +             B00M * DYJYJ(NL1ML1)
            DYJYK(NM) = B10NL1 * DYJYK(NL2M) + DJC00 * DYK(NL1M)
     #      +             YC00 * DYJYK(NL1M) + DKC00 * DYJ(NL1M)
     #      +             B00M * DYJYK(NL1ML1)
            DYKYK(NM) = B10NL1 * DYKYK(NL2M) + DKC00 * DYK(NL1M)
     #      +             YC00 * DYKYK(NL1M) + DKC00 * DYK(NL1M)
     #      +             B00M * DYKYK(NL1ML1)
            DZIZI(NM) = B10NL1 * DZIZI(NL2M) + DIC00 * DZI(NL1M)
     #      +             ZC00 * DZIZI(NL1M) + DIC00 * DZI(NL1M)
     #      +             B00M * DZIZI(NL1ML1)
            DZIZJ(NM) = B10NL1 * DZIZJ(NL2M) + DIC00 * DZJ(NL1M)
     #      +             ZC00 * DZIZJ(NL1M) + DJC00 * DZI(NL1M)
     #      +             B00M * DZIZJ(NL1ML1)
            DZIZK(NM) = B10NL1 * DZIZK(NL2M) + DIC00 * DZK(NL1M)
     #      +             ZC00 * DZIZK(NL1M) + DKC00 * DZI(NL1M)
     #      +             B00M * DZIZK(NL1ML1)
            DZJZJ(NM) = B10NL1 * DZJZJ(NL2M) + DJC00 * DZJ(NL1M)
     #      +             ZC00 * DZJZJ(NL1M) + DJC00 * DZJ(NL1M)
     #      +             B00M * DZJZJ(NL1ML1)
            DZJZK(NM) = B10NL1 * DZJZK(NL2M) + DJC00 * DZK(NL1M)
     #      +             ZC00 * DZJZK(NL1M) + DKC00 * DZJ(NL1M)
     #      +             B00M * DZJZK(NL1ML1)
            DZKZK(NM) = B10NL1 * DZKZK(NL2M) + DKC00 * DZK(NL1M)
     #      +             ZC00 * DZKZK(NL1M) + DKC00 * DZK(NL1M)
     #      +             B00M * DZKZK(NL1ML1)
    3     CONTINUE
    4   CONTINUE
      END IF
C
C     ----- I(I,J,M)=I(I+1,J-1,M) + (QI-QJ) * I(I,J-1,M) -----
C
      DO 7 M=0,MMAX
        MPT = M * 32 + IOFFST
        DO 6 J=1,NJMAX
          JM = J * 8 + MPT
          DO 5 I=1,NIMAX + NJMAX - J + 1
            IJM = I + JM
            IJL1M = IJM - 8
            I1JL1M = IJL1M + 1
            XIN(IJM) = XIN(I1JL1M) + XIMXJ * XIN(IJL1M)
            YIN(IJM) = YIN(I1JL1M) + YIMYJ * YIN(IJL1M)
            ZIN(IJM) = ZIN(I1JL1M) + ZIMZJ * ZIN(IJL1M)
            DXI(IJM) = DXI(I1JL1M) + XIMXJ * DXI(IJL1M) + XIN(IJL1M)
            DYI(IJM) = DYI(I1JL1M) + YIMYJ * DYI(IJL1M) + YIN(IJL1M)
            DZI(IJM) = DZI(I1JL1M) + ZIMZJ * DZI(IJL1M) + ZIN(IJL1M)
            DXJ(IJM) = DXJ(I1JL1M) + XIMXJ * DXJ(IJL1M) - XIN(IJL1M)
            DYJ(IJM) = DYJ(I1JL1M) + YIMYJ * DYJ(IJL1M) - YIN(IJL1M)
            DZJ(IJM) = DZJ(I1JL1M) + ZIMZJ * DZJ(IJL1M) - ZIN(IJL1M)
            DXK(IJM) = DXK(I1JL1M) + XIMXJ * DXK(IJL1M)
            DYK(IJM) = DYK(I1JL1M) + YIMYJ * DYK(IJL1M)
            DZK(IJM) = DZK(I1JL1M) + ZIMZJ * DZK(IJL1M)
            DXIXI(IJM) =        DXIXI(I1JL1M) + DXI(IJL1M)
     #      +            XIMXJ * DXIXI(IJL1M) + DXI(IJL1M)
            DXIXJ(IJM) =        DXIXJ(I1JL1M) + DXJ(IJL1M)
     #      +            XIMXJ * DXIXJ(IJL1M) - DXI(IJL1M)
            DXIXK(IJM) =        DXIXK(I1JL1M) + DXK(IJL1M)
     #      +            XIMXJ * DXIXK(IJL1M)
            DXJXJ(IJM) =        DXJXJ(I1JL1M) - DXJ(IJL1M)
     #      +            XIMXJ * DXJXJ(IJL1M) - DXJ(IJL1M)
            DXJXK(IJM) =        DXJXK(I1JL1M) - DXK(IJL1M)
     #      +            XIMXJ * DXJXK(IJL1M)
            DXKXK(IJM) =        DXKXK(I1JL1M)
     #      +            XIMXJ * DXKXK(IJL1M)
            DYIYI(IJM) =        DYIYI(I1JL1M) + DYI(IJL1M)
     #      +            YIMYJ * DYIYI(IJL1M) + DYI(IJL1M)
            DYIYJ(IJM) =        DYIYJ(I1JL1M) + DYJ(IJL1M)
     #      +            YIMYJ * DYIYJ(IJL1M) - DYI(IJL1M)
            DYIYK(IJM) =        DYIYK(I1JL1M) + DYK(IJL1M)
     #      +            YIMYJ * DYIYK(IJL1M)
            DYJYJ(IJM) =        DYJYJ(I1JL1M) - DYJ(IJL1M)
     #      +            YIMYJ * DYJYJ(IJL1M) - DYJ(IJL1M)
            DYJYK(IJM) =        DYJYK(I1JL1M) - DYK(IJL1M)
     #      +            YIMYJ * DYJYK(IJL1M)
            DYKYK(IJM) =        DYKYK(I1JL1M)
     #      +            YIMYJ * DYKYK(IJL1M)
            DZIZI(IJM) =        DZIZI(I1JL1M) + DZI(IJL1M)
     #      +            ZIMZJ * DZIZI(IJL1M) + DZI(IJL1M)
            DZIZJ(IJM) =        DZIZJ(I1JL1M) + DZJ(IJL1M)
     #      +            ZIMZJ * DZIZJ(IJL1M) - DZI(IJL1M)
            DZIZK(IJM) =        DZIZK(I1JL1M) + DZK(IJL1M)
     #      +            ZIMZJ * DZIZK(IJL1M)
            DZJZJ(IJM) =        DZJZJ(I1JL1M) - DZJ(IJL1M)
     #      +            ZIMZJ * DZJZJ(IJL1M) - DZJ(IJL1M)
            DZJZK(IJM) =        DZJZK(I1JL1M) - DZK(IJL1M)
     #      +            ZIMZJ * DZJZK(IJL1M)
            DZKZK(IJM) =        DZKZK(I1JL1M)
     #      +            ZIMZJ * DZKZK(IJL1M)
    5     CONTINUE
    6   CONTINUE
    7 CONTINUE
C
C     ----- I(I,J,M,0) = I(I,J,M) -----
C
      DO 10 M=MMAX,0,-1
        MNEW = M * 64 + IOFFST
        MOLD = M * 32 + IOFFST
        DO 9 J=NJMAX,0,-1
          JMNEW = MNEW + J * 16
          JMOLD = MOLD + J * 8
          DO 8 I=NIMAX+1,1,-1
            IJMNEW = JMNEW + I
            IJMOLD = JMOLD + I
            XIN(IJMNEW) = XIN(IJMOLD)
            YIN(IJMNEW) = YIN(IJMOLD)
            ZIN(IJMNEW) = ZIN(IJMOLD)
            DXI(IJMNEW) = DXI(IJMOLD)
            DYI(IJMNEW) = DYI(IJMOLD)
            DZI(IJMNEW) = DZI(IJMOLD)
            DXJ(IJMNEW) = DXJ(IJMOLD)
            DYJ(IJMNEW) = DYJ(IJMOLD)
            DZJ(IJMNEW) = DZJ(IJMOLD)
            DXK(IJMNEW) = DXK(IJMOLD)
            DYK(IJMNEW) = DYK(IJMOLD)
            DZK(IJMNEW) = DZK(IJMOLD)
            DXIXI(IJMNEW) = DXIXI(IJMOLD)
            DXIXJ(IJMNEW) = DXIXJ(IJMOLD)
            DXIXK(IJMNEW) = DXIXK(IJMOLD)
            DXJXJ(IJMNEW) = DXJXJ(IJMOLD)
            DXJXK(IJMNEW) = DXJXK(IJMOLD)
            DXKXK(IJMNEW) = DXKXK(IJMOLD)
            DYIYI(IJMNEW) = DYIYI(IJMOLD)
            DYIYJ(IJMNEW) = DYIYJ(IJMOLD)
            DYIYK(IJMNEW) = DYIYK(IJMOLD)
            DYJYJ(IJMNEW) = DYJYJ(IJMOLD)
            DYJYK(IJMNEW) = DYJYK(IJMOLD)
            DYKYK(IJMNEW) = DYKYK(IJMOLD)
            DZIZI(IJMNEW) = DZIZI(IJMOLD)
            DZIZJ(IJMNEW) = DZIZJ(IJMOLD)
            DZIZK(IJMNEW) = DZIZK(IJMOLD)
            DZJZJ(IJMNEW) = DZJZJ(IJMOLD)
            DZJZK(IJMNEW) = DZJZK(IJMOLD)
            DZKZK(IJMNEW) = DZKZK(IJMOLD)
    8     CONTINUE
    9   CONTINUE
   10 CONTINUE
C
C     ----- I(I,J,K,L)=I(I,J,K+1,L-1) + (QK-QL) * I(I,J,K,L-1) -----
C
      DO 14 L=1,NLMAX
        LPT = 4 * L + IOFFST
        DO 13 K=0,NKMAX + NLMAX - L
          KL = K * 64 + LPT
          DO 12 J=0,NJMAX
            JKL = J * 16 + KL
            DO 11 I=1,NIMAX+1
              IJKL = I + JKL
              IJKLM1 = IJKL - 4
              KP1LM1 = IJKLM1 + 64
              XIN(IJKL) = XIN(KP1LM1) + XKMXL * XIN(IJKLM1)
              YIN(IJKL) = YIN(KP1LM1) + YKMYL * YIN(IJKLM1)
              ZIN(IJKL) = ZIN(KP1LM1) + ZKMZL * ZIN(IJKLM1)
              DXI(IJKL) = DXI(KP1LM1) + XKMXL * DXI(IJKLM1)
              DYI(IJKL) = DYI(KP1LM1) + YKMYL * DYI(IJKLM1)
              DZI(IJKL) = DZI(KP1LM1) + ZKMZL * DZI(IJKLM1)
              DXJ(IJKL) = DXJ(KP1LM1) + XKMXL * DXJ(IJKLM1)
              DYJ(IJKL) = DYJ(KP1LM1) + YKMYL * DYJ(IJKLM1)
              DZJ(IJKL) = DZJ(KP1LM1) + ZKMZL * DZJ(IJKLM1)
              DXK(IJKL) = DXK(KP1LM1) + XKMXL * DXK(IJKLM1) + XIN(
     *        IJKLM1)
              DYK(IJKL) = DYK(KP1LM1) + YKMYL * DYK(IJKLM1) + YIN(
     *        IJKLM1)
              DZK(IJKL) = DZK(KP1LM1) + ZKMZL * DZK(IJKLM1) + ZIN(
     *        IJKLM1)
              DXIXI(IJKL) =          DXIXI(KP1LM1)
     #        +              XKMXL * DXIXI(IJKLM1)
              DXIXJ(IJKL) =          DXIXJ(KP1LM1)
     #        +              XKMXL * DXIXJ(IJKLM1)
              DXIXK(IJKL) =          DXIXK(KP1LM1)
     #        +              XKMXL * DXIXK(IJKLM1) + DXI(IJKLM1)
              DXJXJ(IJKL) =          DXJXJ(KP1LM1)
     #        +              XKMXL * DXJXJ(IJKLM1)
              DXJXK(IJKL) =          DXJXK(KP1LM1)
     #        +              XKMXL * DXJXK(IJKLM1) + DXJ(IJKLM1)
              DXKXK(IJKL) =          DXKXK(KP1LM1) + DXK(IJKLM1)
     #        +              XKMXL * DXKXK(IJKLM1) + DXK(IJKLM1)
              DYIYI(IJKL) =          DYIYI(KP1LM1)
     #        +              YKMYL * DYIYI(IJKLM1)
              DYIYJ(IJKL) =          DYIYJ(KP1LM1)
     #        +              YKMYL * DYIYJ(IJKLM1)
              DYIYK(IJKL) =          DYIYK(KP1LM1)
     #        +              YKMYL * DYIYK(IJKLM1) + DYI(IJKLM1)
              DYJYJ(IJKL) =          DYJYJ(KP1LM1)
     #        +              YKMYL * DYJYJ(IJKLM1)
              DYJYK(IJKL) =          DYJYK(KP1LM1)
     #        +              YKMYL * DYJYK(IJKLM1) + DYJ(IJKLM1)
              DYKYK(IJKL) =          DYKYK(KP1LM1) + DYK(IJKLM1)
     #        +              YKMYL * DYKYK(IJKLM1) + DYK(IJKLM1)
              DZIZI(IJKL) =          DZIZI(KP1LM1)
     #        +              ZKMZL * DZIZI(IJKLM1)
              DZIZJ(IJKL) =          DZIZJ(KP1LM1)
     #        +              ZKMZL * DZIZJ(IJKLM1)
              DZIZK(IJKL) =          DZIZK(KP1LM1)
     #        +              ZKMZL * DZIZK(IJKLM1) + DZI(IJKLM1)
              DZJZJ(IJKL) =          DZJZJ(KP1LM1)
     #        +              ZKMZL * DZJZJ(IJKLM1)
              DZJZK(IJKL) =          DZJZK(KP1LM1)
     #        +              ZKMZL * DZJZK(IJKLM1) + DZJ(IJKLM1)
              DZKZK(IJKL) =          DZKZK(KP1LM1) + DZK(IJKLM1)
     #        +              ZKMZL * DZKZK(IJKLM1) + DZK(IJKLM1)
   11       CONTINUE
   12     CONTINUE
   13   CONTINUE
   14 CONTINUE
C
C     ----- ADD DERIVATIVE OF EXP(-D) AND EXP(-G) -----
C
      DO 18 L=0,NLMAX
        LPT = L*4 + IOFFST
        DO 17 K=0,NKMAX
          KL = K*64 + LPT
          DO 16 J=0,NJMAX
            JKL = J*16 + KL
            DO 15 I=1,NIMAX+1
              IJKL = I + JKL
              DXIXI(IJKL) = DXIXI(IJKL) + (XICNST*XICNST + DIDICN) *
     *        XIN(IJKL)+             XICNST * DXI(IJKL) + XICNST *
     *        DXI(IJKL)
              DXIXJ(IJKL) = DXIXJ(IJKL) + (XICNST*XJCNST + DIDJCN) *
     *        XIN(IJKL)+             XICNST * DXJ(IJKL) + XJCNST *
     *        DXI(IJKL)
              DXIXK(IJKL) = DXIXK(IJKL) + (XICNST*XKCNST + DIDKCN) *
     *        XIN(IJKL)+             XICNST * DXK(IJKL) + XKCNST *
     *        DXI(IJKL)
              DXJXJ(IJKL) = DXJXJ(IJKL) + (XJCNST*XJCNST + DJDJCN) *
     *        XIN(IJKL)+             XJCNST * DXJ(IJKL) + XJCNST *
     *        DXJ(IJKL)
              DXJXK(IJKL) = DXJXK(IJKL) + (XJCNST*XKCNST + DJDKCN) *
     *        XIN(IJKL)+             XJCNST * DXK(IJKL) + XKCNST *
     *        DXJ(IJKL)
              DXKXK(IJKL) = DXKXK(IJKL) + (XKCNST*XKCNST + DKDKCN) *
     *        XIN(IJKL)+             XKCNST * DXK(IJKL) + XKCNST *
     *        DXK(IJKL)
              DYIYI(IJKL) = DYIYI(IJKL) + (YICNST*YICNST + DIDICN) *
     *        YIN(IJKL)+             YICNST * DYI(IJKL) + YICNST *
     *        DYI(IJKL)
              DYIYJ(IJKL) = DYIYJ(IJKL) + (YICNST*YJCNST + DIDJCN) *
     *        YIN(IJKL)+             YICNST * DYJ(IJKL) + YJCNST *
     *        DYI(IJKL)
              DYIYK(IJKL) = DYIYK(IJKL) + (YICNST*YKCNST + DIDKCN) *
     *        YIN(IJKL)+             YICNST * DYK(IJKL) + YKCNST *
     *        DYI(IJKL)
              DYJYJ(IJKL) = DYJYJ(IJKL) + (YJCNST*YJCNST + DJDJCN) *
     *        YIN(IJKL)+             YJCNST * DYJ(IJKL) + YJCNST *
     *        DYJ(IJKL)
              DYJYK(IJKL) = DYJYK(IJKL) + (YJCNST*YKCNST + DJDKCN) *
     *        YIN(IJKL)+             YJCNST * DYK(IJKL) + YKCNST *
     *        DYJ(IJKL)
              DYKYK(IJKL) = DYKYK(IJKL) + (YKCNST*YKCNST + DKDKCN) *
     *        YIN(IJKL)+             YKCNST * DYK(IJKL) + YKCNST *
     *        DYK(IJKL)
              DZIZI(IJKL) = DZIZI(IJKL) + (ZICNST*ZICNST + DIDICN) *
     *        ZIN(IJKL)+             ZICNST * DZI(IJKL) + ZICNST *
     *        DZI(IJKL)
              DZIZJ(IJKL) = DZIZJ(IJKL) + (ZICNST*ZJCNST + DIDJCN) *
     *        ZIN(IJKL)+             ZICNST * DZJ(IJKL) + ZJCNST *
     *        DZI(IJKL)
              DZIZK(IJKL) = DZIZK(IJKL) + (ZICNST*ZKCNST + DIDKCN) *
     *        ZIN(IJKL)+             ZICNST * DZK(IJKL) + ZKCNST *
     *        DZI(IJKL)
              DZJZJ(IJKL) = DZJZJ(IJKL) + (ZJCNST*ZJCNST + DJDJCN) *
     *        ZIN(IJKL)+             ZJCNST * DZJ(IJKL) + ZJCNST *
     *        DZJ(IJKL)
              DZJZK(IJKL) = DZJZK(IJKL) + (ZJCNST*ZKCNST + DJDKCN) *
     *        ZIN(IJKL)+             ZJCNST * DZK(IJKL) + ZKCNST *
     *        DZJ(IJKL)
              DZKZK(IJKL) = DZKZK(IJKL) + (ZKCNST*ZKCNST + DKDKCN) *
     *        ZIN(IJKL)+             ZKCNST * DZK(IJKL) + ZKCNST *
     *        DZK(IJKL)
              DXI(IJKL) = DXI(IJKL) + XICNST * XIN(IJKL)
              DYI(IJKL) = DYI(IJKL) + YICNST * YIN(IJKL)
              DZI(IJKL) = DZI(IJKL) + ZICNST * ZIN(IJKL)
              DXJ(IJKL) = DXJ(IJKL) + XJCNST * XIN(IJKL)
              DYJ(IJKL) = DYJ(IJKL) + YJCNST * YIN(IJKL)
              DZJ(IJKL) = DZJ(IJKL) + ZJCNST * ZIN(IJKL)
              DXK(IJKL) = DXK(IJKL) + XKCNST * XIN(IJKL)
              DYK(IJKL) = DYK(IJKL) + YKCNST * YIN(IJKL)
              DZK(IJKL) = DZK(IJKL) + ZKCNST * ZIN(IJKL)
   15       CONTINUE
   16     CONTINUE
   17   CONTINUE
   18 CONTINUE
      RETURN
C
C---------------------------------------------------------TWOIJ
C
      ENTRY TWOIJ(XIN,YIN,ZIN,DXI,DYI,DZI,DXJ,DYJ,DZJ,DXK,DYK,
     #DZK,DXIXI,DXIXJ,DXIXK,DXJXJ,DXJXK,DXKXK,
     #DYIYI,DYIYJ,DYIYK,DYJYJ,DYJYK,DYKYK,
     #DZIZI,DZIZJ,DZIZK,DZJZJ,DZJZK,DZKZK,LEN2D)
C
      RTIASQ = RHOTSQ / A**2
      RTIBSQ = RHOTSQ / B**2
      RTIAB  = RHOTSQ / (A*B)
      DIC00  = EI/A - RTIASQ*EI - 1
      DJC00  = EJ/A - RTIASQ*EJ
      DICP00 = EI * RTIAB
      DJCP00 = EJ * RTIAB
      RHO2T  = RHOTSQ + RHOTSQ
      RHO2TI = RHO2T*EIIA
      RHO2TJ = RHO2T*EJIA
      XICNST =  -XIMXJ*EIJIA*2.0 - XAMXB*RHO2TI
      YICNST =  -YIMYJ*EIJIA*2.0 - YAMYB*RHO2TI
      ZICNST = (-ZIMZJ*EIJIA*2.0 - ZAMZB*RHO2TI)
      XJCNST =   XIMXJ*EIJIA*2.0 - XAMXB*RHO2TJ
      YJCNST =   YIMYJ*EIJIA*2.0 - YAMYB*RHO2TJ
      ZJCNST = ( ZIMZJ*EIJIA*2.0 - ZAMZB*RHO2TJ)
      DIDICN = -EIJIA*2.0 - EIIA * RHO2TI
      DIDJCN =  EIJIA*2.0 - EJIA * RHO2TI
      DJDJCN = -EIJIA*2.0 - EJIA * RHO2TJ
C
C
C     ----- I(0,0) -----
C
      I = IOFFST + 1
      XIN(I) = 1.0
      YIN(I) = 1.0
      ZIN(I) = F00
      DXI(I) = 0.0
      DYI(I) = 0.0
      DZI(I) = 0.0
      DXJ(I) = 0.0
      DYJ(I) = 0.0
      DZJ(I) = 0.0
      DXIXI(I) = 0.0
      DXIXJ(I) = 0.0
      DXJXJ(I) = 0.0
      DYIYI(I) = 0.0
      DYIYJ(I) = 0.0
      DYJYJ(I) = 0.0
      DZIZI(I) = 0.0
      DZIZJ(I) = 0.0
      DZJZJ(I) = 0.0
C
C     ----- I(1,0)=C00 -----
C
      IF (NMAX.NE.0) THEN
        I2 = IOFFST + 2
        XIN(I2) = XC00
        YIN(I2) = YC00
        ZIN(I2) = ZC00 * F00
        DXI(I2) = DIC00
        DYI(I2) = DIC00
        DZI(I2) = DIC00 * F00
        DXJ(I2) = DJC00
        DYJ(I2) = DJC00
        DZJ(I2) = DJC00 * F00
        DXIXI(I2) = 0.0
        DXIXJ(I2) = 0.0
        DXJXJ(I2) = 0.0
        DYIYI(I2) = 0.0
        DYIYJ(I2) = 0.0
        DYJYJ(I2) = 0.0
        DZIZI(I2) = 0.0
        DZIZJ(I2) = 0.0
        DZJZJ(I2) = 0.0
      END IF
C
C     ----- I(0,1)=CP00 -----
C
      IF (MMAX.NE.0) THEN
        I = IOFFST + 33
        XIN(I) = XCP00
        YIN(I) = YCP00
        ZIN(I) = ZCP00 * F00
        DXI(I) = DICP00
        DYI(I) = DICP00
        DZI(I) = DICP00 * F00
        DXJ(I) = DJCP00
        DYJ(I) = DJCP00
        DZJ(I) = DJCP00 * F00
        DXIXI(I) = 0.0
        DXIXJ(I) = 0.0
        DXJXJ(I) = 0.0
        DYIYI(I) = 0.0
        DYIYJ(I) = 0.0
        DYJYJ(I) = 0.0
        DZIZI(I) = 0.0
        DZIZJ(I) = 0.0
        DZJZJ(I) = 0.0
C
C     ----- I(1,1)=B00 * I(0,0) + CP00 * I(1,0) -----
C
        IF (NMAX.NE.0) THEN
          I = IOFFST + 34
          XIN(I) = XCP00 * XIN(I2) + B00
          YIN(I) = YCP00 * YIN(I2) + B00
          ZIN(I) = ZCP00 * ZIN(I2) + B00 * F00
          DXI(I) = DICP00 * XIN(I2) + XCP00 * DXI(I2)
          DYI(I) = DICP00 * YIN(I2) + YCP00 * DYI(I2)
          DZI(I) = DICP00 * ZIN(I2) + ZCP00 * DZI(I2)
          DXJ(I) = DJCP00 * XIN(I2) + XCP00 * DXJ(I2)
          DYJ(I) = DJCP00 * YIN(I2) + YCP00 * DYJ(I2)
          DZJ(I) = DJCP00 * ZIN(I2) + ZCP00 * DZJ(I2)
          DXIXI(I) = DICP00 * DXI(I2) + DICP00 * DXI(I2)
          DXIXJ(I) = DICP00 * DXJ(I2) + DJCP00 * DXI(I2)
          DXJXJ(I) = DJCP00 * DXJ(I2) + DJCP00 * DXJ(I2)
          DYIYI(I) = DICP00 * DYI(I2) + DICP00 * DYI(I2)
          DYIYJ(I) = DICP00 * DYJ(I2) + DJCP00 * DYI(I2)
          DYJYJ(I) = DJCP00 * DYJ(I2) + DJCP00 * DYJ(I2)
          DZIZI(I) = DICP00 * DZI(I2) + DICP00 * DZI(I2)
          DZIZJ(I) = DICP00 * DZJ(I2) + DJCP00 * DZI(I2)
          DZJZJ(I) = DJCP00 * DZJ(I2) + DJCP00 * DZJ(I2)
        END IF
      END IF
C
C     ----- I(N,0)=(N-1)B10 * I(N-2,0) + C00 * I(N-1,0) -----
C
      IF (NMAX.GT.1) THEN
        DO 101 N=2,NMAX
          NL10=N + IOFFST
          N0=NL10+1
          NL20=NL10 - 1
          B10NL1=(N-1) * B10
          XIN(N0) = B10NL1 * XIN(NL20) + XC00 * XIN(NL10)
          YIN(N0) = B10NL1 * YIN(NL20) + YC00 * YIN(NL10)
          ZIN(N0) = B10NL1 * ZIN(NL20) + ZC00 * ZIN(NL10)
          DXI(N0) = B10NL1 * DXI(NL20) + DIC00 * XIN(NL10) + XC00* DXI
     *    (NL10)
          DYI(N0) = B10NL1 * DYI(NL20) + DIC00 * YIN(NL10) + YC00* DYI
     *    (NL10)
          DZI(N0) = B10NL1 * DZI(NL20) + DIC00 * ZIN(NL10) + ZC00* DZI
     *    (NL10)
          DXJ(N0) = B10NL1 * DXJ(NL20) + DJC00 * XIN(NL10) + XC00* DXJ
     *    (NL10)
          DYJ(N0) = B10NL1 * DYJ(NL20) + DJC00 * YIN(NL10) + YC00* DYJ
     *    (NL10)
          DZJ(N0) = B10NL1 * DZJ(NL20) + DJC00 * ZIN(NL10) + ZC00* DZJ
     *    (NL10)
          DXIXI(N0) = B10NL1 * DXIXI(NL20) + DIC00 * DXI(NL10)
     #    +             XC00 * DXIXI(NL10) + DIC00 * DXI(NL10)
          DXIXJ(N0) = B10NL1 * DXIXJ(NL20) + DIC00 * DXJ(NL10)
     #    +             XC00 * DXIXJ(NL10) + DJC00 * DXI(NL10)
          DXJXJ(N0) = B10NL1 * DXJXJ(NL20) + DJC00 * DXJ(NL10)
     #    +             XC00 * DXJXJ(NL10) + DJC00 * DXJ(NL10)
          DYIYI(N0) = B10NL1 * DYIYI(NL20) + DIC00 * DYI(NL10)
     #    +             YC00 * DYIYI(NL10) + DIC00 * DYI(NL10)
          DYIYJ(N0) = B10NL1 * DYIYJ(NL20) + DIC00 * DYJ(NL10)
     #    +             YC00 * DYIYJ(NL10) + DJC00 * DYI(NL10)
          DYJYJ(N0) = B10NL1 * DYJYJ(NL20) + DJC00 * DYJ(NL10)
     #    +             YC00 * DYJYJ(NL10) + DJC00 * DYJ(NL10)
          DZIZI(N0) = B10NL1 * DZIZI(NL20) + DIC00 * DZI(NL10)
     #    +             ZC00 * DZIZI(NL10) + DIC00 * DZI(NL10)
          DZIZJ(N0) = B10NL1 * DZIZJ(NL20) + DIC00 * DZJ(NL10)
     #    +             ZC00 * DZIZJ(NL10) + DJC00 * DZI(NL10)
          DZJZJ(N0) = B10NL1 * DZJZJ(NL20) + DJC00 * DZJ(NL10)
     #    +             ZC00 * DZJZJ(NL10) + DJC00 * DZJ(NL10)
C
C     ----- I(N,1)=N * B00 * I(N-1,0) + CP00 * I(N,0) -----
C
          IF (MMAX.NE.0) THEN
            N1=N0+32
            B00N = B00 * N
            XIN(N1) = B00N * XIN(NL10) + XCP00 * XIN(N0)
            YIN(N1) = B00N * YIN(NL10) + YCP00 * YIN(N0)
            ZIN(N1) = B00N * ZIN(NL10) + ZCP00 * ZIN(N0)
            DXI(N1) = B00N * DXI(NL10) + DICP00 * XIN(N0) + XCP00 *
     *      DXI(N0)
            DYI(N1) = B00N * DYI(NL10) + DICP00 * YIN(N0) + YCP00 *
     *      DYI(N0)
            DZI(N1) = B00N * DZI(NL10) + DICP00 * ZIN(N0) + ZCP00 *
     *      DZI(N0)
            DXJ(N1) = B00N * DXJ(NL10) + DJCP00 * XIN(N0) + XCP00 *
     *      DXJ(N0)
            DYJ(N1) = B00N * DYJ(NL10) + DJCP00 * YIN(N0) + YCP00 *
     *      DYJ(N0)
            DZJ(N1) = B00N * DZJ(NL10) + DJCP00 * ZIN(N0) + ZCP00 *
     *      DZJ(N0)
            DXIXI(N1) = B00N  * DXIXI(NL10) + DICP00 * DXI(N0)
     #      +           XCP00 * DXIXI(N0)   + DICP00 * DXI(N0)
            DXIXJ(N1) = B00N  * DXIXJ(NL10) + DICP00 * DXJ(N0)
     #      +           XCP00 * DXIXJ(N0)   + DJCP00 * DXI(N0)
            DXJXJ(N1) = B00N  * DXJXJ(NL10) + DJCP00 * DXJ(N0)
     #      +           XCP00 * DXJXJ(N0)   + DJCP00 * DXJ(N0)
            DYIYI(N1) = B00N  * DYIYI(NL10) + DICP00 * DYI(N0)
     #      +           YCP00 * DYIYI(N0)   + DICP00 * DYI(N0)
            DYIYJ(N1) = B00N  * DYIYJ(NL10) + DICP00 * DYJ(N0)
     #      +           YCP00 * DYIYJ(N0)   + DJCP00 * DYI(N0)
            DYJYJ(N1) = B00N  * DYJYJ(NL10) + DJCP00 * DYJ(N0)
     #      +           YCP00 * DYJYJ(N0)   + DJCP00 * DYJ(N0)
            DZIZI(N1) = B00N  * DZIZI(NL10) + DICP00 * DZI(N0)
     #      +           ZCP00 * DZIZI(N0)   + DICP00 * DZI(N0)
            DZIZJ(N1) = B00N  * DZIZJ(NL10) + DICP00 * DZJ(N0)
     #      +           ZCP00 * DZIZJ(N0)   + DJCP00 * DZI(N0)
            DZJZJ(N1) = B00N  * DZJZJ(NL10) + DJCP00 * DZJ(N0)
     #      +           ZCP00 * DZJZJ(N0)   + DJCP00 * DZJ(N0)
          END IF
  101   CONTINUE
      END IF
C
C     ----- I(0,M)=(M-1)BP01 * I(0,M-2) + CP00 * I(0,M-1) -----
C
      IF (MMAX.GT.1) THEN
        DO 102 M=2,MMAX
          I0M = M*32 +  1 + IOFFST
          I0ML1 = I0M - 32
          I0ML2 = I0ML1 - 32
          I1M   = I0M + 1
          BPML1 = (M-1) * BP01
          XIN(I0M) = BPML1 * XIN(I0ML2) + XCP00 * XIN(I0ML1)
          YIN(I0M) = BPML1 * YIN(I0ML2) + YCP00 * YIN(I0ML1)
          ZIN(I0M) = BPML1 * ZIN(I0ML2) + ZCP00 * ZIN(I0ML1)
          DXI(I0M) = BPML1 * DXI(I0ML2) + DICP00 * XIN(I0ML1)
     1    +                                XCP00 * DXI(I0ML1)
          DYI(I0M) = BPML1 * DYI(I0ML2) + DICP00 * YIN(I0ML1)
     1    +                                YCP00 * DYI(I0ML1)
          DZI(I0M) = BPML1 * DZI(I0ML2) + DICP00 * ZIN(I0ML1)
     1    +                                ZCP00 * DZI(I0ML1)
          DXJ(I0M) = BPML1 * DXJ(I0ML2) + DJCP00 * XIN(I0ML1)
     1    +                                XCP00 * DXJ(I0ML1)
          DYJ(I0M) = BPML1 * DYJ(I0ML2) + DJCP00 * YIN(I0ML1)
     1    +                                YCP00 * DYJ(I0ML1)
          DZJ(I0M) = BPML1 * DZJ(I0ML2) + DJCP00 * ZIN(I0ML1)
     1    +                                ZCP00 * DZJ(I0ML1)
          DXIXI(I0M) = BPML1 * DXIXI(I0ML2) + DICP00 * DXI(I0ML1)
     #    +            XCP00 * DXIXI(I0ML1) + DICP00 * DXI(I0ML1)
          DXIXJ(I0M) = BPML1 * DXIXJ(I0ML2) + DICP00 * DXJ(I0ML1)
     #    +            XCP00 * DXIXJ(I0ML1) + DJCP00 * DXI(I0ML1)
          DXJXJ(I0M) = BPML1 * DXJXJ(I0ML2) + DJCP00 * DXJ(I0ML1)
     #    +            XCP00 * DXJXJ(I0ML1) + DJCP00 * DXJ(I0ML1)
          DYIYI(I0M) = BPML1 * DYIYI(I0ML2) + DICP00 * DYI(I0ML1)
     #    +            YCP00 * DYIYI(I0ML1) + DICP00 * DYI(I0ML1)
          DYIYJ(I0M) = BPML1 * DYIYJ(I0ML2) + DICP00 * DYJ(I0ML1)
     #    +            YCP00 * DYIYJ(I0ML1) + DJCP00 * DYI(I0ML1)
          DYJYJ(I0M) = BPML1 * DYJYJ(I0ML2) + DJCP00 * DYJ(I0ML1)
     #    +            YCP00 * DYJYJ(I0ML1) + DJCP00 * DYJ(I0ML1)
          DZIZI(I0M) = BPML1 * DZIZI(I0ML2) + DICP00 * DZI(I0ML1)
     #    +            ZCP00 * DZIZI(I0ML1) + DICP00 * DZI(I0ML1)
          DZIZJ(I0M) = BPML1 * DZIZJ(I0ML2) + DICP00 * DZJ(I0ML1)
     #    +            ZCP00 * DZIZJ(I0ML1) + DJCP00 * DZI(I0ML1)
          DZJZJ(I0M) = BPML1 * DZJZJ(I0ML2) + DJCP00 * DZJ(I0ML1)
     #    +            ZCP00 * DZJZJ(I0ML1) + DJCP00 * DZJ(I0ML1)
C
C     ----- I(1,M)=M * B00 * I(0,M-1) + C00 * I(0,M) -----
C
          IF (NMAX.NE.0) THEN
            B00M = M * B00
            XIN(I1M) = B00M * XIN(I0ML1) + XC00 * XIN(I0M)
            YIN(I1M) = B00M * YIN(I0ML1) + YC00 * YIN(I0M)
            ZIN(I1M) = B00M * ZIN(I0ML1) + ZC00 * ZIN(I0M)
            DXI(I1M) = B00M * DXI(I0ML1) + DIC00 * XIN(I0M) + XC00 *
     *      DXI(I0M)
            DYI(I1M) = B00M * DYI(I0ML1) + DIC00 * YIN(I0M) + YC00 *
     *      DYI(I0M)
            DZI(I1M) = B00M * DZI(I0ML1) + DIC00 * ZIN(I0M) + ZC00 *
     *      DZI(I0M)
            DXJ(I1M) = B00M * DXJ(I0ML1) + DJC00 * XIN(I0M) + XC00 *
     *      DXJ(I0M)
            DYJ(I1M) = B00M * DYJ(I0ML1) + DJC00 * YIN(I0M) + YC00 *
     *      DYJ(I0M)
            DZJ(I1M) = B00M * DZJ(I0ML1) + DJC00 * ZIN(I0M) + ZC00 *
     *      DZJ(I0M)
            DXIXI(I1M) = B00M * DXIXI(I0ML1) + DIC00 * DXI(I0M)
     #      +            XC00 * DXIXI(I0M)   + DIC00 * DXI(I0M)
            DXIXJ(I1M) = B00M * DXIXJ(I0ML1) + DIC00 * DXJ(I0M)
     #      +            XC00 * DXIXJ(I0M)   + DJC00 * DXI(I0M)
            DXJXJ(I1M) = B00M * DXJXJ(I0ML1) + DJC00 * DXJ(I0M)
     #      +            XC00 * DXJXJ(I0M)   + DJC00 * DXJ(I0M)
            DYIYI(I1M) = B00M * DYIYI(I0ML1) + DIC00 * DYI(I0M)
     #      +            YC00 * DYIYI(I0M)   + DIC00 * DYI(I0M)
            DYIYJ(I1M) = B00M * DYIYJ(I0ML1) + DIC00 * DYJ(I0M)
     #      +            YC00 * DYIYJ(I0M)   + DJC00 * DYI(I0M)
            DYJYJ(I1M) = B00M * DYJYJ(I0ML1) + DJC00 * DYJ(I0M)
     #      +            YC00 * DYJYJ(I0M)   + DJC00 * DYJ(I0M)
            DZIZI(I1M) = B00M * DZIZI(I0ML1) + DIC00 * DZI(I0M)
     #      +            ZC00 * DZIZI(I0M)   + DIC00 * DZI(I0M)
            DZIZJ(I1M) = B00M * DZIZJ(I0ML1) + DIC00 * DZJ(I0M)
     #      +            ZC00 * DZIZJ(I0M)   + DJC00 * DZI(I0M)
            DZJZJ(I1M) = B00M * DZJZJ(I0ML1) + DJC00 * DZJ(I0M)
     #      +            ZC00 * DZJZJ(I0M)   + DJC00 * DZJ(I0M)
          END IF
  102   CONTINUE
      END IF
C
C     ----- I(N,M)=(N-1)B10 * I(N-2,M) + M * B00 * I(N-1,M-1) +
C                                            C00 * I(N-1,M)   -----
C
      IF (NMAX.GT.1.AND.MMAX.GT.1) THEN
        DO 104 M=2,MMAX
          M8=M*32 + IOFFST
          DO 103 N=2,NMAX
            NM=N + 1 + M8
            NL1M=NM - 1
            NL1ML1= NL1M - 32
            NL2M = NL1M - 1
            B10NL1 = (N-1) * B10
            B00M = M * B00
            XIN(NM) = B10NL1 * XIN(NL2M) + B00M * XIN(NL1ML1) +XC00 *
     *      XIN(NL1M)
            YIN(NM) = B10NL1 * YIN(NL2M) + B00M * YIN(NL1ML1) +YC00 *
     *      YIN(NL1M)
            ZIN(NM) = B10NL1 * ZIN(NL2M) + B00M * ZIN(NL1ML1) +ZC00 *
     *      ZIN(NL1M)
            DXI(NM) = B10NL1 * DXI(NL2M) + B00M * DXI(NL1ML1)
     1      +          DIC00 * XIN(NL1M) + XC00  * DXI(NL1M)
            DYI(NM) = B10NL1 * DYI(NL2M) + B00M * DYI(NL1ML1)
     1      +          DIC00 * YIN(NL1M) + YC00  * DYI(NL1M)
            DZI(NM) = B10NL1 * DZI(NL2M) + B00M * DZI(NL1ML1)
     1      +          DIC00 * ZIN(NL1M) + ZC00  * DZI(NL1M)
            DXJ(NM) = B10NL1 * DXJ(NL2M) + B00M * DXJ(NL1ML1)
     1      +          DJC00 * XIN(NL1M) + XC00  * DXJ(NL1M)
            DYJ(NM) = B10NL1 * DYJ(NL2M) + B00M * DYJ(NL1ML1)
     1      +          DJC00 * YIN(NL1M) + YC00  * DYJ(NL1M)
            DZJ(NM) = B10NL1 * DZJ(NL2M) + B00M * DZJ(NL1ML1)
     1      +          DJC00 * ZIN(NL1M) + ZC00  * DZJ(NL1M)
            DXIXI(NM) = B10NL1 * DXIXI(NL2M) + DIC00 * DXI(NL1M)
     #      +             XC00 * DXIXI(NL1M) + DIC00 * DXI(NL1M)
     #      +             B00M * DXIXI(NL1ML1)
            DXIXJ(NM) = B10NL1 * DXIXJ(NL2M) + DIC00 * DXJ(NL1M)
     #      +             XC00 * DXIXJ(NL1M) + DJC00 * DXI(NL1M)
     #      +             B00M * DXIXJ(NL1ML1)
            DXJXJ(NM) = B10NL1 * DXJXJ(NL2M) + DJC00 * DXJ(NL1M)
     #      +             XC00 * DXJXJ(NL1M) + DJC00 * DXJ(NL1M)
     #      +             B00M * DXJXJ(NL1ML1)
            DYIYI(NM) = B10NL1 * DYIYI(NL2M) + DIC00 * DYI(NL1M)
     #      +             YC00 * DYIYI(NL1M) + DIC00 * DYI(NL1M)
     #      +             B00M * DYIYI(NL1ML1)
            DYIYJ(NM) = B10NL1 * DYIYJ(NL2M) + DIC00 * DYJ(NL1M)
     #      +             YC00 * DYIYJ(NL1M) + DJC00 * DYI(NL1M)
     #      +             B00M * DYIYJ(NL1ML1)
            DYJYJ(NM) = B10NL1 * DYJYJ(NL2M) + DJC00 * DYJ(NL1M)
     #      +             YC00 * DYJYJ(NL1M) + DJC00 * DYJ(NL1M)
     #      +             B00M * DYJYJ(NL1ML1)
            DZIZI(NM) = B10NL1 * DZIZI(NL2M) + DIC00 * DZI(NL1M)
     #      +             ZC00 * DZIZI(NL1M) + DIC00 * DZI(NL1M)
     #      +             B00M * DZIZI(NL1ML1)
            DZIZJ(NM) = B10NL1 * DZIZJ(NL2M) + DIC00 * DZJ(NL1M)
     #      +             ZC00 * DZIZJ(NL1M) + DJC00 * DZI(NL1M)
     #      +             B00M * DZIZJ(NL1ML1)
            DZJZJ(NM) = B10NL1 * DZJZJ(NL2M) + DJC00 * DZJ(NL1M)
     #      +             ZC00 * DZJZJ(NL1M) + DJC00 * DZJ(NL1M)
     #      +             B00M * DZJZJ(NL1ML1)
  103     CONTINUE
  104   CONTINUE
      END IF
C
C     ----- I(I,J,M)=I(I+1,J-1,M) + (QI-QJ) * I(I,J-1,M) -----
C
      DO 107 M=0,MMAX
        MPT = M * 32 + IOFFST
        DO 106 J=1,NJMAX
          JM = J * 8 + MPT
          DO 105 I=1,NIMAX + NJMAX - J + 1
            IJM = I + JM
            IJL1M = IJM - 8
            I1JL1M = IJL1M + 1
            XIN(IJM) = XIN(I1JL1M) + XIMXJ * XIN(IJL1M)
            YIN(IJM) = YIN(I1JL1M) + YIMYJ * YIN(IJL1M)
            ZIN(IJM) = ZIN(I1JL1M) + ZIMZJ * ZIN(IJL1M)
            DXI(IJM) = DXI(I1JL1M) + XIMXJ * DXI(IJL1M) + XIN(IJL1M)
            DYI(IJM) = DYI(I1JL1M) + YIMYJ * DYI(IJL1M) + YIN(IJL1M)
            DZI(IJM) = DZI(I1JL1M) + ZIMZJ * DZI(IJL1M) + ZIN(IJL1M)
            DXJ(IJM) = DXJ(I1JL1M) + XIMXJ * DXJ(IJL1M) - XIN(IJL1M)
            DYJ(IJM) = DYJ(I1JL1M) + YIMYJ * DYJ(IJL1M) - YIN(IJL1M)
            DZJ(IJM) = DZJ(I1JL1M) + ZIMZJ * DZJ(IJL1M) - ZIN(IJL1M)
            DXIXI(IJM) =        DXIXI(I1JL1M) + DXI(IJL1M)
     #      +            XIMXJ * DXIXI(IJL1M) + DXI(IJL1M)
            DXIXJ(IJM) =        DXIXJ(I1JL1M) + DXJ(IJL1M)
     #      +            XIMXJ * DXIXJ(IJL1M) - DXI(IJL1M)
            DXJXJ(IJM) =        DXJXJ(I1JL1M) - DXJ(IJL1M)
     #      +            XIMXJ * DXJXJ(IJL1M) - DXJ(IJL1M)
            DYIYI(IJM) =        DYIYI(I1JL1M) + DYI(IJL1M)
     #      +            YIMYJ * DYIYI(IJL1M) + DYI(IJL1M)
            DYIYJ(IJM) =        DYIYJ(I1JL1M) + DYJ(IJL1M)
     #      +            YIMYJ * DYIYJ(IJL1M) - DYI(IJL1M)
            DYJYJ(IJM) =        DYJYJ(I1JL1M) - DYJ(IJL1M)
     #      +            YIMYJ * DYJYJ(IJL1M) - DYJ(IJL1M)
            DZIZI(IJM) =        DZIZI(I1JL1M) + DZI(IJL1M)
     #      +            ZIMZJ * DZIZI(IJL1M) + DZI(IJL1M)
            DZIZJ(IJM) =        DZIZJ(I1JL1M) + DZJ(IJL1M)
     #      +            ZIMZJ * DZIZJ(IJL1M) - DZI(IJL1M)
            DZJZJ(IJM) =        DZJZJ(I1JL1M) - DZJ(IJL1M)
     #      +            ZIMZJ * DZJZJ(IJL1M) - DZJ(IJL1M)
  105     CONTINUE
  106   CONTINUE
  107 CONTINUE
C
C     ----- I(I,J,M,0) = I(I,J,M) -----
C
      DO 110 M=MMAX,0,-1
        MNEW = M * 64 + IOFFST
        MOLD = M * 32 + IOFFST
        DO 109 J=NJMAX,0,-1
          JMNEW = MNEW + J * 16
          JMOLD = MOLD + J * 8
          DO 108 I=NIMAX+1,1,-1
            IJMNEW = JMNEW + I
            IJMOLD = JMOLD + I
            XIN(IJMNEW) = XIN(IJMOLD)
            YIN(IJMNEW) = YIN(IJMOLD)
            ZIN(IJMNEW) = ZIN(IJMOLD)
            DXI(IJMNEW) = DXI(IJMOLD)
            DYI(IJMNEW) = DYI(IJMOLD)
            DZI(IJMNEW) = DZI(IJMOLD)
            DXJ(IJMNEW) = DXJ(IJMOLD)
            DYJ(IJMNEW) = DYJ(IJMOLD)
            DZJ(IJMNEW) = DZJ(IJMOLD)
            DXIXI(IJMNEW) = DXIXI(IJMOLD)
            DXIXJ(IJMNEW) = DXIXJ(IJMOLD)
            DXJXJ(IJMNEW) = DXJXJ(IJMOLD)
            DYIYI(IJMNEW) = DYIYI(IJMOLD)
            DYIYJ(IJMNEW) = DYIYJ(IJMOLD)
            DYJYJ(IJMNEW) = DYJYJ(IJMOLD)
            DZIZI(IJMNEW) = DZIZI(IJMOLD)
            DZIZJ(IJMNEW) = DZIZJ(IJMOLD)
            DZJZJ(IJMNEW) = DZJZJ(IJMOLD)
  108     CONTINUE
  109   CONTINUE
  110 CONTINUE
C
C     ----- I(I,J,K,L)=I(I,J,K+1,L-1) + (QK-QL) * I(I,J,K,L-1) -----
C
      DO 114 L=1,NLMAX
        LPT = 4 * L + IOFFST
        DO 113 K=0,NKMAX + NLMAX - L
          KL = K * 64 + LPT
          DO 112 J=0,NJMAX
            JKL = J * 16 + KL
            DO 111 I=1,NIMAX+1
              IJKL = I + JKL
              IJKLM1 = IJKL - 4
              KP1LM1 = IJKLM1 + 64
              XIN(IJKL) = XIN(KP1LM1) + XKMXL * XIN(IJKLM1)
              YIN(IJKL) = YIN(KP1LM1) + YKMYL * YIN(IJKLM1)
              ZIN(IJKL) = ZIN(KP1LM1) + ZKMZL * ZIN(IJKLM1)
              DXI(IJKL) = DXI(KP1LM1) + XKMXL * DXI(IJKLM1)
              DYI(IJKL) = DYI(KP1LM1) + YKMYL * DYI(IJKLM1)
              DZI(IJKL) = DZI(KP1LM1) + ZKMZL * DZI(IJKLM1)
              DXJ(IJKL) = DXJ(KP1LM1) + XKMXL * DXJ(IJKLM1)
              DYJ(IJKL) = DYJ(KP1LM1) + YKMYL * DYJ(IJKLM1)
              DZJ(IJKL) = DZJ(KP1LM1) + ZKMZL * DZJ(IJKLM1)
              DXIXI(IJKL) =          DXIXI(KP1LM1)
     #        +              XKMXL * DXIXI(IJKLM1)
              DXIXJ(IJKL) =          DXIXJ(KP1LM1)
     #        +              XKMXL * DXIXJ(IJKLM1)
              DXJXJ(IJKL) =          DXJXJ(KP1LM1)
     #        +              XKMXL * DXJXJ(IJKLM1)
              DYIYI(IJKL) =          DYIYI(KP1LM1)
     #        +              YKMYL * DYIYI(IJKLM1)
              DYIYJ(IJKL) =          DYIYJ(KP1LM1)
     #        +              YKMYL * DYIYJ(IJKLM1)
              DYJYJ(IJKL) =          DYJYJ(KP1LM1)
     #        +              YKMYL * DYJYJ(IJKLM1)
              DZIZI(IJKL) =          DZIZI(KP1LM1)
     #        +              ZKMZL * DZIZI(IJKLM1)
              DZIZJ(IJKL) =          DZIZJ(KP1LM1)
     #        +              ZKMZL * DZIZJ(IJKLM1)
              DZJZJ(IJKL) =          DZJZJ(KP1LM1)
     #        +              ZKMZL * DZJZJ(IJKLM1)
  111       CONTINUE
  112     CONTINUE
  113   CONTINUE
  114 CONTINUE
C
C     ----- ADD DERIVATIVE OF EXP(-D) AND EXP(-G) -----
C
      DO 118 L=0,NLMAX
        LPT = L*4 + IOFFST
        DO 117 K=0,NKMAX
          KL = K*64 + LPT
          DO 116 J=0,NJMAX
            JKL = J*16 + KL
            DO 115 I=1,NIMAX+1
              IJKL = I + JKL
              DXIXI(IJKL) = DXIXI(IJKL) + (XICNST*XICNST + DIDICN) *
     *        XIN(IJKL)+             XICNST * DXI(IJKL) + XICNST *
     *        DXI(IJKL)
              DXIXJ(IJKL) = DXIXJ(IJKL) + (XICNST*XJCNST + DIDJCN) *
     *        XIN(IJKL)+             XICNST * DXJ(IJKL) + XJCNST *
     *        DXI(IJKL)
              DXJXJ(IJKL) = DXJXJ(IJKL) + (XJCNST*XJCNST + DJDJCN) *
     *        XIN(IJKL)+             XJCNST * DXJ(IJKL) + XJCNST *
     *        DXJ(IJKL)
              DYIYI(IJKL) = DYIYI(IJKL) + (YICNST*YICNST + DIDICN) *
     *        YIN(IJKL)+             YICNST * DYI(IJKL) + YICNST *
     *        DYI(IJKL)
              DYIYJ(IJKL) = DYIYJ(IJKL) + (YICNST*YJCNST + DIDJCN) *
     *        YIN(IJKL)+             YICNST * DYJ(IJKL) + YJCNST *
     *        DYI(IJKL)
              DYJYJ(IJKL) = DYJYJ(IJKL) + (YJCNST*YJCNST + DJDJCN) *
     *        YIN(IJKL)+             YJCNST * DYJ(IJKL) + YJCNST *
     *        DYJ(IJKL)
              DZIZI(IJKL) = DZIZI(IJKL) + (ZICNST*ZICNST + DIDICN) *
     *        ZIN(IJKL)+             ZICNST * DZI(IJKL) + ZICNST *
     *        DZI(IJKL)
              DZIZJ(IJKL) = DZIZJ(IJKL) + (ZICNST*ZJCNST + DIDJCN) *
     *        ZIN(IJKL)+             ZICNST * DZJ(IJKL) + ZJCNST *
     *        DZI(IJKL)
              DZJZJ(IJKL) = DZJZJ(IJKL) + (ZJCNST*ZJCNST + DJDJCN) *
     *        ZIN(IJKL)+             ZJCNST * DZJ(IJKL) + ZJCNST *
     *        DZJ(IJKL)
              DXI(IJKL) = DXI(IJKL) + XICNST * XIN(IJKL)
              DYI(IJKL) = DYI(IJKL) + YICNST * YIN(IJKL)
              DZI(IJKL) = DZI(IJKL) + ZICNST * ZIN(IJKL)
              DXJ(IJKL) = DXJ(IJKL) + XJCNST * XIN(IJKL)
              DYJ(IJKL) = DYJ(IJKL) + YJCNST * YIN(IJKL)
              DZJ(IJKL) = DZJ(IJKL) + ZJCNST * ZIN(IJKL)
  115       CONTINUE
  116     CONTINUE
  117   CONTINUE
  118 CONTINUE
      RETURN
C
C
C---------------------------------------------------------TWOIK
C
      ENTRY TWOIK(XIN,YIN,ZIN,DXI,DYI,DZI,DXJ,DYJ,DZJ,DXK,DYK,
     #DZK,DXIXI,DXIXJ,DXIXK,DXJXJ,DXJXK,DXKXK,
     #DYIYI,DYIYJ,DYIYK,DYJYJ,DYJYK,DYKYK,
     #DZIZI,DZIZJ,DZIZK,DZJZJ,DZJZK,DZKZK,LEN2D)
C
      RTIASQ = RHOTSQ / A**2
      RTIBSQ = RHOTSQ / B**2
      RTIAB  = RHOTSQ / (A*B)
      DIC00  = EI/A - RTIASQ*EI - 1
      DKC00  = EK * RTIAB
      DICP00 = EI * RTIAB
      DKCP00 = EK/B - RTIBSQ*EK - 1
      RHO2T  = RHOTSQ + RHOTSQ
      RHO2TI = RHO2T*EIIA
      RHO2TK = RHO2T*EKIB
      XICNST =  -XIMXJ*EIJIA*2.0 - XAMXB*RHO2TI
      YICNST =  -YIMYJ*EIJIA*2.0 - YAMYB*RHO2TI
      ZICNST = (-ZIMZJ*EIJIA*2.0 - ZAMZB*RHO2TI)
      XKCNST =  -XKMXL*EKLIB*2.0 + XAMXB*RHO2TK
      YKCNST =  -YKMYL*EKLIB*2.0 + YAMYB*RHO2TK
      ZKCNST = (-ZKMZL*EKLIB*2.0 + ZAMZB*RHO2TK)
      DIDICN = -EIJIA*2.0 - EIIA * RHO2TI
      DIDKCN =              EKIB * RHO2TI
      DKDKCN = -EKLIB*2.0 - EKIB * RHO2TK
C
C
C     ----- I(0,0) -----
C
      I = IOFFST + 1
      XIN(I) = 1.0
      YIN(I) = 1.0
      ZIN(I) = F00
      DXI(I) = 0.0
      DYI(I) = 0.0
      DZI(I) = 0.0
      DXK(I) = 0.0
      DYK(I) = 0.0
      DZK(I) = 0.0
      DXIXI(I) = 0.0
      DXIXK(I) = 0.0
      DXKXK(I) = 0.0
      DYIYI(I) = 0.0
      DYIYK(I) = 0.0
      DYKYK(I) = 0.0
      DZIZI(I) = 0.0
      DZIZK(I) = 0.0
      DZKZK(I) = 0.0
C
C     ----- I(1,0)=C00 -----
C
      IF (NMAX.NE.0) THEN
        I2 = IOFFST + 2
        XIN(I2) = XC00
        YIN(I2) = YC00
        ZIN(I2) = ZC00 * F00
        DXI(I2) = DIC00
        DYI(I2) = DIC00
        DZI(I2) = DIC00 * F00
        DXK(I2) = DKC00
        DYK(I2) = DKC00
        DZK(I2) = DKC00 * F00
        DXIXI(I2) = 0.0
        DXIXK(I2) = 0.0
        DXKXK(I2) = 0.0
        DYIYI(I2) = 0.0
        DYIYK(I2) = 0.0
        DYKYK(I2) = 0.0
        DZIZI(I2) = 0.0
        DZIZK(I2) = 0.0
        DZKZK(I2) = 0.0
      END IF
C
C     ----- I(0,1)=CP00 -----
C
      IF (MMAX.NE.0) THEN
        I = IOFFST + 33
        XIN(I) = XCP00
        YIN(I) = YCP00
        ZIN(I) = ZCP00 * F00
        DXI(I) = DICP00
        DYI(I) = DICP00
        DZI(I) = DICP00 * F00
        DXK(I) = DKCP00
        DYK(I) = DKCP00
        DZK(I) = DKCP00 * F00
        DXIXI(I) = 0.0
        DXIXK(I) = 0.0
        DXKXK(I) = 0.0
        DYIYI(I) = 0.0
        DYIYK(I) = 0.0
        DYKYK(I) = 0.0
        DZIZI(I) = 0.0
        DZIZK(I) = 0.0
        DZKZK(I) = 0.0
C
C     ----- I(1,1)=B00 * I(0,0) + CP00 * I(1,0) -----
C
        IF (NMAX.NE.0) THEN
          I = IOFFST + 34
          XIN(I) = XCP00 * XIN(I2) + B00
          YIN(I) = YCP00 * YIN(I2) + B00
          ZIN(I) = ZCP00 * ZIN(I2) + B00 * F00
          DXI(I) = DICP00 * XIN(I2) + XCP00 * DXI(I2)
          DYI(I) = DICP00 * YIN(I2) + YCP00 * DYI(I2)
          DZI(I) = DICP00 * ZIN(I2) + ZCP00 * DZI(I2)
          DXK(I) = DKCP00 * XIN(I2) + XCP00 * DXK(I2)
          DYK(I) = DKCP00 * YIN(I2) + YCP00 * DYK(I2)
          DZK(I) = DKCP00 * ZIN(I2) + ZCP00 * DZK(I2)
          DXIXI(I) = DICP00 * DXI(I2) + DICP00 * DXI(I2)
          DXIXK(I) = DICP00 * DXK(I2) + DKCP00 * DXI(I2)
          DXKXK(I) = DKCP00 * DXK(I2) + DKCP00 * DXK(I2)
          DYIYI(I) = DICP00 * DYI(I2) + DICP00 * DYI(I2)
          DYIYK(I) = DICP00 * DYK(I2) + DKCP00 * DYI(I2)
          DYKYK(I) = DKCP00 * DYK(I2) + DKCP00 * DYK(I2)
          DZIZI(I) = DICP00 * DZI(I2) + DICP00 * DZI(I2)
          DZIZK(I) = DICP00 * DZK(I2) + DKCP00 * DZI(I2)
          DZKZK(I) = DKCP00 * DZK(I2) + DKCP00 * DZK(I2)
        END IF
      END IF
C
C     ----- I(N,0)=(N-1)B10 * I(N-2,0) + C00 * I(N-1,0) -----
C
      IF (NMAX.GT.1) THEN
        DO 201 N=2,NMAX
          NL10=N + IOFFST
          N0=NL10+1
          NL20=NL10 - 1
          B10NL1=(N-1) * B10
          XIN(N0) = B10NL1 * XIN(NL20) + XC00 * XIN(NL10)
          YIN(N0) = B10NL1 * YIN(NL20) + YC00 * YIN(NL10)
          ZIN(N0) = B10NL1 * ZIN(NL20) + ZC00 * ZIN(NL10)
          DXI(N0) = B10NL1 * DXI(NL20) + DIC00 * XIN(NL10) + XC00* DXI
     *    (NL10)
          DYI(N0) = B10NL1 * DYI(NL20) + DIC00 * YIN(NL10) + YC00* DYI
     *    (NL10)
          DZI(N0) = B10NL1 * DZI(NL20) + DIC00 * ZIN(NL10) + ZC00* DZI
     *    (NL10)
          DXK(N0) = B10NL1 * DXK(NL20) + DKC00 * XIN(NL10) + XC00* DXK
     *    (NL10)
          DYK(N0) = B10NL1 * DYK(NL20) + DKC00 * YIN(NL10) + YC00* DYK
     *    (NL10)
          DZK(N0) = B10NL1 * DZK(NL20) + DKC00 * ZIN(NL10) + ZC00* DZK
     *    (NL10)
          DXIXI(N0) = B10NL1 * DXIXI(NL20) + DIC00 * DXI(NL10)
     #    +             XC00 * DXIXI(NL10) + DIC00 * DXI(NL10)
          DXIXK(N0) = B10NL1 * DXIXK(NL20) + DIC00 * DXK(NL10)
     #    +             XC00 * DXIXK(NL10) + DKC00 * DXI(NL10)
          DXKXK(N0) = B10NL1 * DXKXK(NL20) + DKC00 * DXK(NL10)
     #    +             XC00 * DXKXK(NL10) + DKC00 * DXK(NL10)
          DYIYI(N0) = B10NL1 * DYIYI(NL20) + DIC00 * DYI(NL10)
     #    +             YC00 * DYIYI(NL10) + DIC00 * DYI(NL10)
          DYIYK(N0) = B10NL1 * DYIYK(NL20) + DIC00 * DYK(NL10)
     #    +             YC00 * DYIYK(NL10) + DKC00 * DYI(NL10)
          DYKYK(N0) = B10NL1 * DYKYK(NL20) + DKC00 * DYK(NL10)
     #    +             YC00 * DYKYK(NL10) + DKC00 * DYK(NL10)
          DZIZI(N0) = B10NL1 * DZIZI(NL20) + DIC00 * DZI(NL10)
     #    +             ZC00 * DZIZI(NL10) + DIC00 * DZI(NL10)
          DZIZK(N0) = B10NL1 * DZIZK(NL20) + DIC00 * DZK(NL10)
     #    +             ZC00 * DZIZK(NL10) + DKC00 * DZI(NL10)
          DZKZK(N0) = B10NL1 * DZKZK(NL20) + DKC00 * DZK(NL10)
     #    +             ZC00 * DZKZK(NL10) + DKC00 * DZK(NL10)
C
C     ----- I(N,1)=N * B00 * I(N-1,0) + CP00 * I(N,0) -----
C
          IF (MMAX.NE.0) THEN
            N1=N0+32
            B00N = B00 * N
            XIN(N1) = B00N * XIN(NL10) + XCP00 * XIN(N0)
            YIN(N1) = B00N * YIN(NL10) + YCP00 * YIN(N0)
            ZIN(N1) = B00N * ZIN(NL10) + ZCP00 * ZIN(N0)
            DXI(N1) = B00N * DXI(NL10) + DICP00 * XIN(N0) + XCP00 *
     *      DXI(N0)
            DYI(N1) = B00N * DYI(NL10) + DICP00 * YIN(N0) + YCP00 *
     *      DYI(N0)
            DZI(N1) = B00N * DZI(NL10) + DICP00 * ZIN(N0) + ZCP00 *
     *      DZI(N0)
            DXK(N1) = B00N * DXK(NL10) + DKCP00 * XIN(N0) + XCP00 *
     *      DXK(N0)
            DYK(N1) = B00N * DYK(NL10) + DKCP00 * YIN(N0) + YCP00 *
     *      DYK(N0)
            DZK(N1) = B00N * DZK(NL10) + DKCP00 * ZIN(N0) + ZCP00 *
     *      DZK(N0)
            DXIXI(N1) = B00N  * DXIXI(NL10) + DICP00 * DXI(N0)
     #      +           XCP00 * DXIXI(N0)   + DICP00 * DXI(N0)
            DXIXK(N1) = B00N  * DXIXK(NL10) + DICP00 * DXK(N0)
     #      +           XCP00 * DXIXK(N0)   + DKCP00 * DXI(N0)
            DXKXK(N1) = B00N  * DXKXK(NL10) + DKCP00 * DXK(N0)
     #      +           XCP00 * DXKXK(N0)   + DKCP00 * DXK(N0)
            DYIYI(N1) = B00N  * DYIYI(NL10) + DICP00 * DYI(N0)
     #      +           YCP00 * DYIYI(N0)   + DICP00 * DYI(N0)
            DYIYK(N1) = B00N  * DYIYK(NL10) + DICP00 * DYK(N0)
     #      +           YCP00 * DYIYK(N0)   + DKCP00 * DYI(N0)
            DYKYK(N1) = B00N  * DYKYK(NL10) + DKCP00 * DYK(N0)
     #      +           YCP00 * DYKYK(N0)   + DKCP00 * DYK(N0)
            DZIZI(N1) = B00N  * DZIZI(NL10) + DICP00 * DZI(N0)
     #      +           ZCP00 * DZIZI(N0)   + DICP00 * DZI(N0)
            DZIZK(N1) = B00N  * DZIZK(NL10) + DICP00 * DZK(N0)
     #      +           ZCP00 * DZIZK(N0)   + DKCP00 * DZI(N0)
            DZKZK(N1) = B00N  * DZKZK(NL10) + DKCP00 * DZK(N0)
     #      +           ZCP00 * DZKZK(N0)   + DKCP00 * DZK(N0)
          END IF
  201   CONTINUE
      END IF
C
C     ----- I(0,M)=(M-1)BP01 * I(0,M-2) + CP00 * I(0,M-1) -----
C
      IF (MMAX.GT.1) THEN
        DO 202 M=2,MMAX
          I0M = M*32 +  1 + IOFFST
          I0ML1 = I0M - 32
          I0ML2 = I0ML1 - 32
          I1M   = I0M + 1
          BPML1 = (M-1) * BP01
          XIN(I0M) = BPML1 * XIN(I0ML2) + XCP00 * XIN(I0ML1)
          YIN(I0M) = BPML1 * YIN(I0ML2) + YCP00 * YIN(I0ML1)
          ZIN(I0M) = BPML1 * ZIN(I0ML2) + ZCP00 * ZIN(I0ML1)
          DXI(I0M) = BPML1 * DXI(I0ML2) + DICP00 * XIN(I0ML1)
     1    +                                XCP00 * DXI(I0ML1)
          DYI(I0M) = BPML1 * DYI(I0ML2) + DICP00 * YIN(I0ML1)
     1    +                                YCP00 * DYI(I0ML1)
          DZI(I0M) = BPML1 * DZI(I0ML2) + DICP00 * ZIN(I0ML1)
     1    +                                ZCP00 * DZI(I0ML1)
          DXK(I0M) = BPML1 * DXK(I0ML2) + DKCP00 * XIN(I0ML1)
     1    +                                XCP00 * DXK(I0ML1)
          DYK(I0M) = BPML1 * DYK(I0ML2) + DKCP00 * YIN(I0ML1)
     1    +                                YCP00 * DYK(I0ML1)
          DZK(I0M) = BPML1 * DZK(I0ML2) + DKCP00 * ZIN(I0ML1)
     1    +                                ZCP00 * DZK(I0ML1)
          DXIXI(I0M) = BPML1 * DXIXI(I0ML2) + DICP00 * DXI(I0ML1)
     #    +            XCP00 * DXIXI(I0ML1) + DICP00 * DXI(I0ML1)
          DXIXK(I0M) = BPML1 * DXIXK(I0ML2) + DICP00 * DXK(I0ML1)
     #    +            XCP00 * DXIXK(I0ML1) + DKCP00 * DXI(I0ML1)
          DXKXK(I0M) = BPML1 * DXKXK(I0ML2) + DKCP00 * DXK(I0ML1)
     #    +            XCP00 * DXKXK(I0ML1) + DKCP00 * DXK(I0ML1)
          DYIYI(I0M) = BPML1 * DYIYI(I0ML2) + DICP00 * DYI(I0ML1)
     #    +            YCP00 * DYIYI(I0ML1) + DICP00 * DYI(I0ML1)
          DYIYK(I0M) = BPML1 * DYIYK(I0ML2) + DICP00 * DYK(I0ML1)
     #    +            YCP00 * DYIYK(I0ML1) + DKCP00 * DYI(I0ML1)
          DYKYK(I0M) = BPML1 * DYKYK(I0ML2) + DKCP00 * DYK(I0ML1)
     #    +            YCP00 * DYKYK(I0ML1) + DKCP00 * DYK(I0ML1)
          DZIZI(I0M) = BPML1 * DZIZI(I0ML2) + DICP00 * DZI(I0ML1)
     #    +            ZCP00 * DZIZI(I0ML1) + DICP00 * DZI(I0ML1)
          DZIZK(I0M) = BPML1 * DZIZK(I0ML2) + DICP00 * DZK(I0ML1)
     #    +            ZCP00 * DZIZK(I0ML1) + DKCP00 * DZI(I0ML1)
          DZKZK(I0M) = BPML1 * DZKZK(I0ML2) + DKCP00 * DZK(I0ML1)
     #    +            ZCP00 * DZKZK(I0ML1) + DKCP00 * DZK(I0ML1)
C
C     ----- I(1,M)=M * B00 * I(0,M-1) + C00 * I(0,M) -----
C
          IF (NMAX.NE.0) THEN
            B00M = M * B00
            XIN(I1M) = B00M * XIN(I0ML1) + XC00 * XIN(I0M)
            YIN(I1M) = B00M * YIN(I0ML1) + YC00 * YIN(I0M)
            ZIN(I1M) = B00M * ZIN(I0ML1) + ZC00 * ZIN(I0M)
            DXI(I1M) = B00M * DXI(I0ML1) + DIC00 * XIN(I0M) + XC00 *
     *      DXI(I0M)
            DYI(I1M) = B00M * DYI(I0ML1) + DIC00 * YIN(I0M) + YC00 *
     *      DYI(I0M)
            DZI(I1M) = B00M * DZI(I0ML1) + DIC00 * ZIN(I0M) + ZC00 *
     *      DZI(I0M)
            DXK(I1M) = B00M * DXK(I0ML1) + DKC00 * XIN(I0M) + XC00 *
     *      DXK(I0M)
            DYK(I1M) = B00M * DYK(I0ML1) + DKC00 * YIN(I0M) + YC00 *
     *      DYK(I0M)
            DZK(I1M) = B00M * DZK(I0ML1) + DKC00 * ZIN(I0M) + ZC00 *
     *      DZK(I0M)
            DXIXI(I1M) = B00M * DXIXI(I0ML1) + DIC00 * DXI(I0M)
     #      +            XC00 * DXIXI(I0M)   + DIC00 * DXI(I0M)
            DXIXK(I1M) = B00M * DXIXK(I0ML1) + DIC00 * DXK(I0M)
     #      +            XC00 * DXIXK(I0M)   + DKC00 * DXI(I0M)
            DXKXK(I1M) = B00M * DXKXK(I0ML1) + DKC00 * DXK(I0M)
     #      +            XC00 * DXKXK(I0M)   + DKC00 * DXK(I0M)
            DYIYI(I1M) = B00M * DYIYI(I0ML1) + DIC00 * DYI(I0M)
     #      +            YC00 * DYIYI(I0M)   + DIC00 * DYI(I0M)
            DYIYK(I1M) = B00M * DYIYK(I0ML1) + DIC00 * DYK(I0M)
     #      +            YC00 * DYIYK(I0M)   + DKC00 * DYI(I0M)
            DYKYK(I1M) = B00M * DYKYK(I0ML1) + DKC00 * DYK(I0M)
     #      +            YC00 * DYKYK(I0M)   + DKC00 * DYK(I0M)
            DZIZI(I1M) = B00M * DZIZI(I0ML1) + DIC00 * DZI(I0M)
     #      +            ZC00 * DZIZI(I0M)   + DIC00 * DZI(I0M)
            DZIZK(I1M) = B00M * DZIZK(I0ML1) + DIC00 * DZK(I0M)
     #      +            ZC00 * DZIZK(I0M)   + DKC00 * DZI(I0M)
            DZKZK(I1M) = B00M * DZKZK(I0ML1) + DKC00 * DZK(I0M)
     #      +            ZC00 * DZKZK(I0M)   + DKC00 * DZK(I0M)
          END IF
  202   CONTINUE
      END IF
C
C     ----- I(N,M)=(N-1)B10 * I(N-2,M) + M * B00 * I(N-1,M-1) +
C                                            C00 * I(N-1,M)   -----
C
      IF (NMAX.GT.1.AND.MMAX.GT.1) THEN
        DO 204 M=2,MMAX
          M8=M*32 + IOFFST
          DO 203 N=2,NMAX
            NM=N + 1 + M8
            NL1M=NM - 1
            NL1ML1= NL1M - 32
            NL2M = NL1M - 1
            B10NL1 = (N-1) * B10
            B00M = M * B00
            XIN(NM) = B10NL1 * XIN(NL2M) + B00M * XIN(NL1ML1) +XC00 *
     *      XIN(NL1M)
            YIN(NM) = B10NL1 * YIN(NL2M) + B00M * YIN(NL1ML1) +YC00 *
     *      YIN(NL1M)
            ZIN(NM) = B10NL1 * ZIN(NL2M) + B00M * ZIN(NL1ML1) +ZC00 *
     *      ZIN(NL1M)
            DXI(NM) = B10NL1 * DXI(NL2M) + B00M * DXI(NL1ML1)
     1      +          DIC00 * XIN(NL1M) + XC00  * DXI(NL1M)
            DYI(NM) = B10NL1 * DYI(NL2M) + B00M * DYI(NL1ML1)
     1      +          DIC00 * YIN(NL1M) + YC00  * DYI(NL1M)
            DZI(NM) = B10NL1 * DZI(NL2M) + B00M * DZI(NL1ML1)
     1      +          DIC00 * ZIN(NL1M) + ZC00  * DZI(NL1M)
            DXK(NM) = B10NL1 * DXK(NL2M) + B00M * DXK(NL1ML1)
     1      +          DKC00 * XIN(NL1M) + XC00  * DXK(NL1M)
            DYK(NM) = B10NL1 * DYK(NL2M) + B00M * DYK(NL1ML1)
     1      +          DKC00 * YIN(NL1M) + YC00  * DYK(NL1M)
            DZK(NM) = B10NL1 * DZK(NL2M) + B00M * DZK(NL1ML1)
     1      +          DKC00 * ZIN(NL1M) + ZC00  * DZK(NL1M)
            DXIXI(NM) = B10NL1 * DXIXI(NL2M) + DIC00 * DXI(NL1M)
     #      +             XC00 * DXIXI(NL1M) + DIC00 * DXI(NL1M)
     #      +             B00M * DXIXI(NL1ML1)
            DXIXK(NM) = B10NL1 * DXIXK(NL2M) + DIC00 * DXK(NL1M)
     #      +             XC00 * DXIXK(NL1M) + DKC00 * DXI(NL1M)
     #      +             B00M * DXIXK(NL1ML1)
            DXKXK(NM) = B10NL1 * DXKXK(NL2M) + DKC00 * DXK(NL1M)
     #      +             XC00 * DXKXK(NL1M) + DKC00 * DXK(NL1M)
     #      +             B00M * DXKXK(NL1ML1)
            DYIYI(NM) = B10NL1 * DYIYI(NL2M) + DIC00 * DYI(NL1M)
     #      +             YC00 * DYIYI(NL1M) + DIC00 * DYI(NL1M)
     #      +             B00M * DYIYI(NL1ML1)
            DYIYK(NM) = B10NL1 * DYIYK(NL2M) + DIC00 * DYK(NL1M)
     #      +             YC00 * DYIYK(NL1M) + DKC00 * DYI(NL1M)
     #      +             B00M * DYIYK(NL1ML1)
            DYKYK(NM) = B10NL1 * DYKYK(NL2M) + DKC00 * DYK(NL1M)
     #      +             YC00 * DYKYK(NL1M) + DKC00 * DYK(NL1M)
     #      +             B00M * DYKYK(NL1ML1)
            DZIZI(NM) = B10NL1 * DZIZI(NL2M) + DIC00 * DZI(NL1M)
     #      +             ZC00 * DZIZI(NL1M) + DIC00 * DZI(NL1M)
     #      +             B00M * DZIZI(NL1ML1)
            DZIZK(NM) = B10NL1 * DZIZK(NL2M) + DIC00 * DZK(NL1M)
     #      +             ZC00 * DZIZK(NL1M) + DKC00 * DZI(NL1M)
     #      +             B00M * DZIZK(NL1ML1)
            DZKZK(NM) = B10NL1 * DZKZK(NL2M) + DKC00 * DZK(NL1M)
     #      +             ZC00 * DZKZK(NL1M) + DKC00 * DZK(NL1M)
     #      +             B00M * DZKZK(NL1ML1)
  203     CONTINUE
  204   CONTINUE
      END IF
C
C     ----- I(I,J,M)=I(I+1,J-1,M) + (QI-QJ) * I(I,J-1,M) -----
C
      DO 207 M=0,MMAX
        MPT = M * 32 + IOFFST
        DO 206 J=1,NJMAX
          JM = J * 8 + MPT
          DO 205 I=1,NIMAX + NJMAX - J + 1
            IJM = I + JM
            IJL1M = IJM - 8
            I1JL1M = IJL1M + 1
            XIN(IJM) = XIN(I1JL1M) + XIMXJ * XIN(IJL1M)
            YIN(IJM) = YIN(I1JL1M) + YIMYJ * YIN(IJL1M)
            ZIN(IJM) = ZIN(I1JL1M) + ZIMZJ * ZIN(IJL1M)
            DXI(IJM) = DXI(I1JL1M) + XIMXJ * DXI(IJL1M) + XIN(IJL1M)
            DYI(IJM) = DYI(I1JL1M) + YIMYJ * DYI(IJL1M) + YIN(IJL1M)
            DZI(IJM) = DZI(I1JL1M) + ZIMZJ * DZI(IJL1M) + ZIN(IJL1M)
            DXK(IJM) = DXK(I1JL1M) + XIMXJ * DXK(IJL1M)
            DYK(IJM) = DYK(I1JL1M) + YIMYJ * DYK(IJL1M)
            DZK(IJM) = DZK(I1JL1M) + ZIMZJ * DZK(IJL1M)
            DXIXI(IJM) =        DXIXI(I1JL1M) + DXI(IJL1M)
     #      +            XIMXJ * DXIXI(IJL1M) + DXI(IJL1M)
            DXIXK(IJM) =        DXIXK(I1JL1M) + DXK(IJL1M)
     #      +            XIMXJ * DXIXK(IJL1M)
            DXKXK(IJM) =        DXKXK(I1JL1M)
     #      +            XIMXJ * DXKXK(IJL1M)
            DYIYI(IJM) =        DYIYI(I1JL1M) + DYI(IJL1M)
     #      +            YIMYJ * DYIYI(IJL1M) + DYI(IJL1M)
            DYIYK(IJM) =        DYIYK(I1JL1M) + DYK(IJL1M)
     #      +            YIMYJ * DYIYK(IJL1M)
            DYKYK(IJM) =        DYKYK(I1JL1M)
     #      +            YIMYJ * DYKYK(IJL1M)
            DZIZI(IJM) =        DZIZI(I1JL1M) + DZI(IJL1M)
     #      +            ZIMZJ * DZIZI(IJL1M) + DZI(IJL1M)
            DZIZK(IJM) =        DZIZK(I1JL1M) + DZK(IJL1M)
     #      +            ZIMZJ * DZIZK(IJL1M)
            DZKZK(IJM) =        DZKZK(I1JL1M)
     #      +            ZIMZJ * DZKZK(IJL1M)
  205     CONTINUE
  206   CONTINUE
  207 CONTINUE
C
C     ----- I(I,J,M,0) = I(I,J,M) -----
C
      DO 210 M=MMAX,0,-1
        MNEW = M * 64 + IOFFST
        MOLD = M * 32 + IOFFST
        DO 209 J=NJMAX,0,-1
          JMNEW = MNEW + J * 16
          JMOLD = MOLD + J * 8
          DO 208 I=NIMAX+1,1,-1
            IJMNEW = JMNEW + I
            IJMOLD = JMOLD + I
            XIN(IJMNEW) = XIN(IJMOLD)
            YIN(IJMNEW) = YIN(IJMOLD)
            ZIN(IJMNEW) = ZIN(IJMOLD)
            DXI(IJMNEW) = DXI(IJMOLD)
            DYI(IJMNEW) = DYI(IJMOLD)
            DZI(IJMNEW) = DZI(IJMOLD)
            DXK(IJMNEW) = DXK(IJMOLD)
            DYK(IJMNEW) = DYK(IJMOLD)
            DZK(IJMNEW) = DZK(IJMOLD)
            DXIXI(IJMNEW) = DXIXI(IJMOLD)
            DXIXK(IJMNEW) = DXIXK(IJMOLD)
            DXKXK(IJMNEW) = DXKXK(IJMOLD)
            DYIYI(IJMNEW) = DYIYI(IJMOLD)
            DYIYK(IJMNEW) = DYIYK(IJMOLD)
            DYKYK(IJMNEW) = DYKYK(IJMOLD)
            DZIZI(IJMNEW) = DZIZI(IJMOLD)
            DZIZK(IJMNEW) = DZIZK(IJMOLD)
            DZKZK(IJMNEW) = DZKZK(IJMOLD)
  208     CONTINUE
  209   CONTINUE
  210 CONTINUE
C
C     ----- I(I,J,K,L)=I(I,J,K+1,L-1) + (QK-QL) * I(I,J,K,L-1) -----
C
      DO 214 L=1,NLMAX
        LPT = 4 * L + IOFFST
        DO 213 K=0,NKMAX + NLMAX - L
          KL = K * 64 + LPT
          DO 212 J=0,NJMAX
            JKL = J * 16 + KL
            DO 211 I=1,NIMAX+1
              IJKL = I + JKL
              IJKLM1 = IJKL - 4
              KP1LM1 = IJKLM1 + 64
              XIN(IJKL) = XIN(KP1LM1) + XKMXL * XIN(IJKLM1)
              YIN(IJKL) = YIN(KP1LM1) + YKMYL * YIN(IJKLM1)
              ZIN(IJKL) = ZIN(KP1LM1) + ZKMZL * ZIN(IJKLM1)
              DXI(IJKL) = DXI(KP1LM1) + XKMXL * DXI(IJKLM1)
              DYI(IJKL) = DYI(KP1LM1) + YKMYL * DYI(IJKLM1)
              DZI(IJKL) = DZI(KP1LM1) + ZKMZL * DZI(IJKLM1)
              DXK(IJKL) = DXK(KP1LM1) + XKMXL * DXK(IJKLM1) + XIN(
     *        IJKLM1)
              DYK(IJKL) = DYK(KP1LM1) + YKMYL * DYK(IJKLM1) + YIN(
     *        IJKLM1)
              DZK(IJKL) = DZK(KP1LM1) + ZKMZL * DZK(IJKLM1) + ZIN(
     *        IJKLM1)
              DXIXI(IJKL) =          DXIXI(KP1LM1)
     #        +              XKMXL * DXIXI(IJKLM1)
              DXIXK(IJKL) =          DXIXK(KP1LM1)
     #        +              XKMXL * DXIXK(IJKLM1) + DXI(IJKLM1)
              DXKXK(IJKL) =          DXKXK(KP1LM1) + DXK(IJKLM1)
     #        +              XKMXL * DXKXK(IJKLM1) + DXK(IJKLM1)
              DYIYI(IJKL) =          DYIYI(KP1LM1)
     #        +              YKMYL * DYIYI(IJKLM1)
              DYIYK(IJKL) =          DYIYK(KP1LM1)
     #        +              YKMYL * DYIYK(IJKLM1) + DYI(IJKLM1)
              DYKYK(IJKL) =          DYKYK(KP1LM1) + DYK(IJKLM1)
     #        +              YKMYL * DYKYK(IJKLM1) + DYK(IJKLM1)
              DZIZI(IJKL) =          DZIZI(KP1LM1)
     #        +              ZKMZL * DZIZI(IJKLM1)
              DZIZK(IJKL) =          DZIZK(KP1LM1)
     #        +              ZKMZL * DZIZK(IJKLM1) + DZI(IJKLM1)
              DZKZK(IJKL) =          DZKZK(KP1LM1) + DZK(IJKLM1)
     #        +              ZKMZL * DZKZK(IJKLM1) + DZK(IJKLM1)
  211       CONTINUE
  212     CONTINUE
  213   CONTINUE
  214 CONTINUE
C
C     ----- ADD DERIVATIVE OF EXP(-D) AND EXP(-G) -----
C
      DO 218 L=0,NLMAX
        LPT = L*4 + IOFFST
        DO 217 K=0,NKMAX
          KL = K*64 + LPT
          DO 216 J=0,NJMAX
            JKL = J*16 + KL
            DO 215 I=1,NIMAX+1
              IJKL = I + JKL
              DXIXI(IJKL) = DXIXI(IJKL) + (XICNST*XICNST + DIDICN) *
     *        XIN(IJKL)+             XICNST * DXI(IJKL) + XICNST *
     *        DXI(IJKL)
              DXIXK(IJKL) = DXIXK(IJKL) + (XICNST*XKCNST + DIDKCN) *
     *        XIN(IJKL)+             XICNST * DXK(IJKL) + XKCNST *
     *        DXI(IJKL)
              DXKXK(IJKL) = DXKXK(IJKL) + (XKCNST*XKCNST + DKDKCN) *
     *        XIN(IJKL)+             XKCNST * DXK(IJKL) + XKCNST *
     *        DXK(IJKL)
              DYIYI(IJKL) = DYIYI(IJKL) + (YICNST*YICNST + DIDICN) *
     *        YIN(IJKL)+             YICNST * DYI(IJKL) + YICNST *
     *        DYI(IJKL)
              DYIYK(IJKL) = DYIYK(IJKL) + (YICNST*YKCNST + DIDKCN) *
     *        YIN(IJKL)+             YICNST * DYK(IJKL) + YKCNST *
     *        DYI(IJKL)
              DYKYK(IJKL) = DYKYK(IJKL) + (YKCNST*YKCNST + DKDKCN) *
     *        YIN(IJKL)+             YKCNST * DYK(IJKL) + YKCNST *
     *        DYK(IJKL)
              DZIZI(IJKL) = DZIZI(IJKL) + (ZICNST*ZICNST + DIDICN) *
     *        ZIN(IJKL)+             ZICNST * DZI(IJKL) + ZICNST *
     *        DZI(IJKL)
              DZIZK(IJKL) = DZIZK(IJKL) + (ZICNST*ZKCNST + DIDKCN) *
     *        ZIN(IJKL)+             ZICNST * DZK(IJKL) + ZKCNST *
     *        DZI(IJKL)
              DZKZK(IJKL) = DZKZK(IJKL) + (ZKCNST*ZKCNST + DKDKCN) *
     *        ZIN(IJKL)+             ZKCNST * DZK(IJKL) + ZKCNST *
     *        DZK(IJKL)
              DXI(IJKL) = DXI(IJKL) + XICNST * XIN(IJKL)
              DYI(IJKL) = DYI(IJKL) + YICNST * YIN(IJKL)
              DZI(IJKL) = DZI(IJKL) + ZICNST * ZIN(IJKL)
              DXK(IJKL) = DXK(IJKL) + XKCNST * XIN(IJKL)
              DYK(IJKL) = DYK(IJKL) + YKCNST * YIN(IJKL)
              DZK(IJKL) = DZK(IJKL) + ZKCNST * ZIN(IJKL)
  215       CONTINUE
  216     CONTINUE
  217   CONTINUE
  218 CONTINUE
      RETURN
C
C----------------------------------------------------------TWOI
C
      ENTRY TWOI(XIN,YIN,ZIN,DXI,DYI,DZI,DXJ,DYJ,DZJ,DXK,DYK,
     #DZK,DXIXI,DXIXJ,DXIXK,DXJXJ,DXJXK,DXKXK,
     #DYIYI,DYIYJ,DYIYK,DYJYJ,DYJYK,DYKYK,
     #DZIZI,DZIZJ,DZIZK,DZJZJ,DZJZK,DZKZK,LEN2D)
C
      RTIASQ = RHOTSQ / A**2
      RTIBSQ = RHOTSQ / B**2
      RTIAB  = RHOTSQ / (A*B)
      DIC00  = EI/A - RTIASQ*EI - 1
      DICP00 = EI * RTIAB
      RHO2T  = RHOTSQ + RHOTSQ
      RHO2TI = RHO2T*EIIA
      XICNST =  -XIMXJ*EIJIA*2.0 - XAMXB*RHO2TI
      YICNST =  -YIMYJ*EIJIA*2.0 - YAMYB*RHO2TI
      ZICNST = (-ZIMZJ*EIJIA*2.0 - ZAMZB*RHO2TI)
      DIDICN = -EIJIA*2.0 - EIIA * RHO2TI
C
C
C     ----- I(0,0) -----
C
      I = IOFFST + 1
      XIN(I) = 1.0
      YIN(I) = 1.0
      ZIN(I) = F00
      DXI(I) = 0.0
      DYI(I) = 0.0
      DZI(I) = 0.0
      DXIXI(I) = 0.0
      DYIYI(I) = 0.0
      DZIZI(I) = 0.0
C
C     ----- I(1,0)=C00 -----
C
      IF (NMAX.NE.0) THEN
        I2 = IOFFST + 2
        XIN(I2) = XC00
        YIN(I2) = YC00
        ZIN(I2) = ZC00 * F00
        DXI(I2) = DIC00
        DYI(I2) = DIC00
        DZI(I2) = DIC00 * F00
        DXIXI(I2) = 0.0
        DYIYI(I2) = 0.0
        DZIZI(I2) = 0.0
      END IF
C
C     ----- I(0,1)=CP00 -----
C
      IF (MMAX.NE.0) THEN
        I = IOFFST + 33
        XIN(I) = XCP00
        YIN(I) = YCP00
        ZIN(I) = ZCP00 * F00
        DXI(I) = DICP00
        DYI(I) = DICP00
        DZI(I) = DICP00 * F00
        DXIXI(I) = 0.0
        DYIYI(I) = 0.0
        DZIZI(I) = 0.0
C
C     ----- I(1,1)=B00 * I(0,0) + CP00 * I(1,0) -----
C
        IF (NMAX.NE.0) THEN
          I = IOFFST + 34
          XIN(I) = XCP00 * XIN(I2) + B00
          YIN(I) = YCP00 * YIN(I2) + B00
          ZIN(I) = ZCP00 * ZIN(I2) + B00 * F00
          DXI(I) = DICP00 * XIN(I2) + XCP00 * DXI(I2)
          DYI(I) = DICP00 * YIN(I2) + YCP00 * DYI(I2)
          DZI(I) = DICP00 * ZIN(I2) + ZCP00 * DZI(I2)
          DXIXI(I) = DICP00 * DXI(I2) + DICP00 * DXI(I2)
          DYIYI(I) = DICP00 * DYI(I2) + DICP00 * DYI(I2)
          DZIZI(I) = DICP00 * DZI(I2) + DICP00 * DZI(I2)
        END IF
      END IF
C
C     ----- I(N,0)=(N-1)B10 * I(N-2,0) + C00 * I(N-1,0) -----
C
      IF (NMAX.GT.1) THEN
        DO 301 N=2,NMAX
          NL10=N + IOFFST
          N0=NL10+1
          NL20=NL10 - 1
          B10NL1=(N-1) * B10
          XIN(N0) = B10NL1 * XIN(NL20) + XC00 * XIN(NL10)
          YIN(N0) = B10NL1 * YIN(NL20) + YC00 * YIN(NL10)
          ZIN(N0) = B10NL1 * ZIN(NL20) + ZC00 * ZIN(NL10)
          DXI(N0) = B10NL1 * DXI(NL20) + DIC00 * XIN(NL10) + XC00* DXI
     *    (NL10)
          DYI(N0) = B10NL1 * DYI(NL20) + DIC00 * YIN(NL10) + YC00* DYI
     *    (NL10)
          DZI(N0) = B10NL1 * DZI(NL20) + DIC00 * ZIN(NL10) + ZC00* DZI
     *    (NL10)
          DXIXI(N0) = B10NL1 * DXIXI(NL20) + DIC00 * DXI(NL10)
     #    +             XC00 * DXIXI(NL10) + DIC00 * DXI(NL10)
          DYIYI(N0) = B10NL1 * DYIYI(NL20) + DIC00 * DYI(NL10)
     #    +             YC00 * DYIYI(NL10) + DIC00 * DYI(NL10)
          DZIZI(N0) = B10NL1 * DZIZI(NL20) + DIC00 * DZI(NL10)
     #    +             ZC00 * DZIZI(NL10) + DIC00 * DZI(NL10)
C
C     ----- I(N,1)=N * B00 * I(N-1,0) + CP00 * I(N,0) -----
C
          IF (MMAX.NE.0) THEN
            N1=N0+32
            B00N = B00 * N
            XIN(N1) = B00N * XIN(NL10) + XCP00 * XIN(N0)
            YIN(N1) = B00N * YIN(NL10) + YCP00 * YIN(N0)
            ZIN(N1) = B00N * ZIN(NL10) + ZCP00 * ZIN(N0)
            DXI(N1) = B00N * DXI(NL10) + DICP00 * XIN(N0) + XCP00 *
     *      DXI(N0)
            DYI(N1) = B00N * DYI(NL10) + DICP00 * YIN(N0) + YCP00 *
     *      DYI(N0)
            DZI(N1) = B00N * DZI(NL10) + DICP00 * ZIN(N0) + ZCP00 *
     *      DZI(N0)
            DXIXI(N1) = B00N  * DXIXI(NL10) + DICP00 * DXI(N0)
     #      +           XCP00 * DXIXI(N0)   + DICP00 * DXI(N0)
            DYIYI(N1) = B00N  * DYIYI(NL10) + DICP00 * DYI(N0)
     #      +           YCP00 * DYIYI(N0)   + DICP00 * DYI(N0)
            DZIZI(N1) = B00N  * DZIZI(NL10) + DICP00 * DZI(N0)
     #      +           ZCP00 * DZIZI(N0)   + DICP00 * DZI(N0)
          END IF
  301   CONTINUE
      END IF
C
C     ----- I(0,M)=(M-1)BP01 * I(0,M-2) + CP00 * I(0,M-1) -----
C
      IF (MMAX.GT.1) THEN
        DO 302 M=2,MMAX
          I0M = M*32 +  1 + IOFFST
          I0ML1 = I0M - 32
          I0ML2 = I0ML1 - 32
          I1M   = I0M + 1
          BPML1 = (M-1) * BP01
          XIN(I0M) = BPML1 * XIN(I0ML2) + XCP00 * XIN(I0ML1)
          YIN(I0M) = BPML1 * YIN(I0ML2) + YCP00 * YIN(I0ML1)
          ZIN(I0M) = BPML1 * ZIN(I0ML2) + ZCP00 * ZIN(I0ML1)
          DXI(I0M) = BPML1 * DXI(I0ML2) + DICP00 * XIN(I0ML1)
     1    +                                XCP00 * DXI(I0ML1)
          DYI(I0M) = BPML1 * DYI(I0ML2) + DICP00 * YIN(I0ML1)
     1    +                                YCP00 * DYI(I0ML1)
          DZI(I0M) = BPML1 * DZI(I0ML2) + DICP00 * ZIN(I0ML1)
     1    +                                ZCP00 * DZI(I0ML1)
          DXIXI(I0M) = BPML1 * DXIXI(I0ML2) + DICP00 * DXI(I0ML1)
     #    +            XCP00 * DXIXI(I0ML1) + DICP00 * DXI(I0ML1)
          DYIYI(I0M) = BPML1 * DYIYI(I0ML2) + DICP00 * DYI(I0ML1)
     #    +            YCP00 * DYIYI(I0ML1) + DICP00 * DYI(I0ML1)
          DZIZI(I0M) = BPML1 * DZIZI(I0ML2) + DICP00 * DZI(I0ML1)
     #    +            ZCP00 * DZIZI(I0ML1) + DICP00 * DZI(I0ML1)
C
C     ----- I(1,M)=M * B00 * I(0,M-1) + C00 * I(0,M) -----
C
          IF (NMAX.NE.0) THEN
            B00M = M * B00
            XIN(I1M) = B00M * XIN(I0ML1) + XC00 * XIN(I0M)
            YIN(I1M) = B00M * YIN(I0ML1) + YC00 * YIN(I0M)
            ZIN(I1M) = B00M * ZIN(I0ML1) + ZC00 * ZIN(I0M)
            DXI(I1M) = B00M * DXI(I0ML1) + DIC00 * XIN(I0M) + XC00 *
     *      DXI(I0M)
            DYI(I1M) = B00M * DYI(I0ML1) + DIC00 * YIN(I0M) + YC00 *
     *      DYI(I0M)
            DZI(I1M) = B00M * DZI(I0ML1) + DIC00 * ZIN(I0M) + ZC00 *
     *      DZI(I0M)
            DXIXI(I1M) = B00M * DXIXI(I0ML1) + DIC00 * DXI(I0M)
     #      +            XC00 * DXIXI(I0M)   + DIC00 * DXI(I0M)
            DYIYI(I1M) = B00M * DYIYI(I0ML1) + DIC00 * DYI(I0M)
     #      +            YC00 * DYIYI(I0M)   + DIC00 * DYI(I0M)
            DZIZI(I1M) = B00M * DZIZI(I0ML1) + DIC00 * DZI(I0M)
     #      +            ZC00 * DZIZI(I0M)   + DIC00 * DZI(I0M)
          END IF
  302   CONTINUE
      END IF
C
C     ----- I(N,M)=(N-1)B10 * I(N-2,M) + M * B00 * I(N-1,M-1) +
C                                            C00 * I(N-1,M)   -----
C
      IF (NMAX.GT.1.AND.MMAX.GT.1) THEN
        DO 304 M=2,MMAX
          M8=M*32 + IOFFST
          DO 303 N=2,NMAX
            NM=N + 1 + M8
            NL1M=NM - 1
            NL1ML1= NL1M - 32
            NL2M = NL1M - 1
            B10NL1 = (N-1) * B10
            B00M = M * B00
            XIN(NM) = B10NL1 * XIN(NL2M) + B00M * XIN(NL1ML1) +XC00 *
     *      XIN(NL1M)
            YIN(NM) = B10NL1 * YIN(NL2M) + B00M * YIN(NL1ML1) +YC00 *
     *      YIN(NL1M)
            ZIN(NM) = B10NL1 * ZIN(NL2M) + B00M * ZIN(NL1ML1) +ZC00 *
     *      ZIN(NL1M)
            DXI(NM) = B10NL1 * DXI(NL2M) + B00M * DXI(NL1ML1)
     1      +          DIC00 * XIN(NL1M) + XC00  * DXI(NL1M)
            DYI(NM) = B10NL1 * DYI(NL2M) + B00M * DYI(NL1ML1)
     1      +          DIC00 * YIN(NL1M) + YC00  * DYI(NL1M)
            DZI(NM) = B10NL1 * DZI(NL2M) + B00M * DZI(NL1ML1)
     1      +          DIC00 * ZIN(NL1M) + ZC00  * DZI(NL1M)
            DXIXI(NM) = B10NL1 * DXIXI(NL2M) + DIC00 * DXI(NL1M)
     #      +             XC00 * DXIXI(NL1M) + DIC00 * DXI(NL1M)
     #      +             B00M * DXIXI(NL1ML1)
            DYIYI(NM) = B10NL1 * DYIYI(NL2M) + DIC00 * DYI(NL1M)
     #      +             YC00 * DYIYI(NL1M) + DIC00 * DYI(NL1M)
     #      +             B00M * DYIYI(NL1ML1)
            DZIZI(NM) = B10NL1 * DZIZI(NL2M) + DIC00 * DZI(NL1M)
     #      +             ZC00 * DZIZI(NL1M) + DIC00 * DZI(NL1M)
     #      +             B00M * DZIZI(NL1ML1)
  303     CONTINUE
  304   CONTINUE
      END IF
C
C     ----- I(I,J,M)=I(I+1,J-1,M) + (QI-QJ) * I(I,J-1,M) -----
C
      DO 307 M=0,MMAX
        MPT = M * 32 + IOFFST
        DO 306 J=1,NJMAX
          JM = J * 8 + MPT
          DO 305 I=1,NIMAX + NJMAX - J + 1
            IJM = I + JM
            IJL1M = IJM - 8
            I1JL1M = IJL1M + 1
            XIN(IJM) = XIN(I1JL1M) + XIMXJ * XIN(IJL1M)
            YIN(IJM) = YIN(I1JL1M) + YIMYJ * YIN(IJL1M)
            ZIN(IJM) = ZIN(I1JL1M) + ZIMZJ * ZIN(IJL1M)
            DXI(IJM) = DXI(I1JL1M) + XIMXJ * DXI(IJL1M) + XIN(IJL1M)
            DYI(IJM) = DYI(I1JL1M) + YIMYJ * DYI(IJL1M) + YIN(IJL1M)
            DZI(IJM) = DZI(I1JL1M) + ZIMZJ * DZI(IJL1M) + ZIN(IJL1M)
            DXIXI(IJM) =        DXIXI(I1JL1M) + DXI(IJL1M)
     #      +            XIMXJ * DXIXI(IJL1M) + DXI(IJL1M)
            DYIYI(IJM) =        DYIYI(I1JL1M) + DYI(IJL1M)
     #      +            YIMYJ * DYIYI(IJL1M) + DYI(IJL1M)
            DZIZI(IJM) =        DZIZI(I1JL1M) + DZI(IJL1M)
     #      +            ZIMZJ * DZIZI(IJL1M) + DZI(IJL1M)
  305     CONTINUE
  306   CONTINUE
  307 CONTINUE
C
C     ----- I(I,J,M,0) = I(I,J,M) -----
C
      DO 310 M=MMAX,0,-1
        MNEW = M * 64 + IOFFST
        MOLD = M * 32 + IOFFST
        DO 309 J=NJMAX,0,-1
          JMNEW = MNEW + J * 16
          JMOLD = MOLD + J * 8
          DO 308 I=NIMAX+1,1,-1
            IJMNEW = JMNEW + I
            IJMOLD = JMOLD + I
            XIN(IJMNEW) = XIN(IJMOLD)
            YIN(IJMNEW) = YIN(IJMOLD)
            ZIN(IJMNEW) = ZIN(IJMOLD)
            DXI(IJMNEW) = DXI(IJMOLD)
            DYI(IJMNEW) = DYI(IJMOLD)
            DZI(IJMNEW) = DZI(IJMOLD)
            DXIXI(IJMNEW) = DXIXI(IJMOLD)
            DYIYI(IJMNEW) = DYIYI(IJMOLD)
            DZIZI(IJMNEW) = DZIZI(IJMOLD)
  308     CONTINUE
  309   CONTINUE
  310 CONTINUE
C
C     ----- I(I,J,K,L)=I(I,J,K+1,L-1) + (QK-QL) * I(I,J,K,L-1) -----
C
      DO 314 L=1,NLMAX
        LPT = 4 * L + IOFFST
        DO 313 K=0,NKMAX + NLMAX - L
          KL = K * 64 + LPT
          DO 312 J=0,NJMAX
            JKL = J * 16 + KL
            DO 311 I=1,NIMAX+1
              IJKL = I + JKL
              IJKLM1 = IJKL - 4
              KP1LM1 = IJKLM1 + 64
              XIN(IJKL) = XIN(KP1LM1) + XKMXL * XIN(IJKLM1)
              YIN(IJKL) = YIN(KP1LM1) + YKMYL * YIN(IJKLM1)
              ZIN(IJKL) = ZIN(KP1LM1) + ZKMZL * ZIN(IJKLM1)
              DXI(IJKL) = DXI(KP1LM1) + XKMXL * DXI(IJKLM1)
              DYI(IJKL) = DYI(KP1LM1) + YKMYL * DYI(IJKLM1)
              DZI(IJKL) = DZI(KP1LM1) + ZKMZL * DZI(IJKLM1)
              DXIXI(IJKL) =          DXIXI(KP1LM1)
     #        +              XKMXL * DXIXI(IJKLM1)
              DYIYI(IJKL) =          DYIYI(KP1LM1)
     #        +              YKMYL * DYIYI(IJKLM1)
              DZIZI(IJKL) =          DZIZI(KP1LM1)
     #        +              ZKMZL * DZIZI(IJKLM1)
  311       CONTINUE
  312     CONTINUE
  313   CONTINUE
  314 CONTINUE
C
C     ----- ADD DERIVATIVE OF EXP(-D) AND EXP(-G) -----
C
      DO 318 L=0,NLMAX
        LPT = L*4 + IOFFST
        DO 317 K=0,NKMAX
          KL = K*64 + LPT
          DO 316 J=0,NJMAX
            JKL = J*16 + KL
            DO 315 I=1,NIMAX+1
              IJKL = I + JKL
              DXIXI(IJKL) = DXIXI(IJKL) + (XICNST*XICNST + DIDICN) *
     *        XIN(IJKL)+             XICNST * DXI(IJKL) + XICNST *
     *        DXI(IJKL)
              DYIYI(IJKL) = DYIYI(IJKL) + (YICNST*YICNST + DIDICN) *
     *        YIN(IJKL)+             YICNST * DYI(IJKL) + YICNST *
     *        DYI(IJKL)
              DZIZI(IJKL) = DZIZI(IJKL) + (ZICNST*ZICNST + DIDICN) *
     *        ZIN(IJKL)+             ZICNST * DZI(IJKL) + ZICNST *
     *        DZI(IJKL)
              DXI(IJKL) = DXI(IJKL) + XICNST * XIN(IJKL)
              DYI(IJKL) = DYI(IJKL) + YICNST * YIN(IJKL)
              DZI(IJKL) = DZI(IJKL) + ZICNST * ZIN(IJKL)
  315       CONTINUE
  316     CONTINUE
  317   CONTINUE
  318 CONTINUE
      RETURN
      END
      SUBROUTINE INB(B,DERINT,LENINT,NBSET)
C
C
C
      IMPLICIT REAL*8 (A-H,O-Z)
C
C     EXTENDED DUMMY B,DERINT
C
      REAL*8 B(NNP,3,NAT,NBSET),DERINT(LENINT,3,4),D(6),D2(6),DC(6)
      INTEGER ATOM,M(6),M2(6),MC(6)
C
      COMMON /CENTRE/ NCENTR
      COMMON /INFOA/  NAT,NUM,NNP,NSHELL,NIRRED,NT,NPRIM,MXT,NISO
CIBM  COMMON /SHELLD/ NATOM(4),NPASS
      COMMON /SHELLD/ XIDER,YIDER,ZIDER,XJDER,YJDER,ZJDER
     2,               XKDER,YKDER,ZKDER,NATOM(4),NPASS
CYO
C     COMMON /D2LAG/  NOABCD,NTABCD,ISDPOS(78),SDINT(78)
CYO
C
C
      RETURN
C
C--------------------------------------------------------------MBMAT
C
      ENTRY MBMAT(D,M,NN,ISET,b,derint,lenint,nbset)
C
CTJL  WRITE(*,*) '  IN MBMAT ; NCENTR ',NCENTR
      DO 4 IXYZ=1,3
        TEMP=0.0D+00
        DO 2 I=1,NCENTR-1
          T=DERINT(NN,IXYZ,I)
          TEMP=TEMP+T
          ATOM=NATOM(I)
CTJL  WRITE(*,*) ' IN INB ; ATOM ',ATOM
          DO 1 J=1,6
            B(M(J),IXYZ,ATOM,ISET)=B(M(J),IXYZ,ATOM,ISET)+T*D(J)
      IF(ISET.EQ.1) THEN
CTJL  WRITE(*,*) ' IN MB;B,T,D ',B(M(J),IXYZ,ATOM,ISET),T,D(J)
      END IF
    1     CONTINUE
    2   CONTINUE
C
C       ----- USE TRANSLATIONAL INVARIANCE FOR LAST ATOM -----
C
        ATOM=NATOM(NCENTR)
        DO 3 J=1,6
          B(M(J),IXYZ,ATOM,ISET)=B(M(J),IXYZ,ATOM,ISET)-TEMP*D(J)
      IF(ISET.EQ.1) THEN
CTJL  WRITE(*,*) ' IN MB2;B,T,D ',B(M(J),IXYZ,ATOM,ISET),TEMP,D(J)
      END IF
    3   CONTINUE
    4 CONTINUE
C
C
      RETURN
C
C------------------------------------------------------------MBMAT2
C
      ENTRY MBMAT2(D2,M2,NN2,ISET2,b,derint,lenint,nbset)
C
      DO 14 IXYZ=1,3
        TEMP=0.0D+00
        DO 12 I=1,NCENTR-1
          T=DERINT(NN2,IXYZ,I)
          TEMP=TEMP+T
          ATOM=NATOM(I)
          DO 11 J=3,6
            B(M2(J),IXYZ,ATOM,ISET2)=B(M2(J),IXYZ,ATOM,ISET2)+T*D2(J)
   11     CONTINUE
   12   CONTINUE
C
C       ----- USE TRANSLATIONAL INVARIANCE FOR LAST ATOM -----
C
        ATOM=NATOM(NCENTR)
        DO 13 J=3,6
          B(M2(J),IXYZ,ATOM,ISET2)=B(M2(J),IXYZ,ATOM,ISET2)-TEMP*D2(J)
   13   CONTINUE
   14 CONTINUE
C
C
      RETURN
C
C------------------------------------------------------------MBMATC
C
      ENTRY MBMATC(DC,MC,NNC,ISETC,b,derint,lenint,nbset)
C
CTJL  WRITE(*,*) '  IN MBMATC ; NCENTR ',NCENTR
      IBSET=ISETC*2-1
      JBSET=ISETC*2
      DO 24 IXYZ=1,3
        TEMP=0.0D+00
        DO 22 I=1,NCENTR-1
          T=DERINT(NNC,IXYZ,I)
          TEMP=TEMP+T
          ATOM=NATOM(I)
CTJL  WRITE(*,*) ' IN INBC ; ATOM ',ATOM
          DO 21 J=1,2
            B(MC(J),IXYZ,ATOM,IBSET)=B(MC(J),IXYZ,ATOM,IBSET)+T*DC(J)
      IF(IBSET.EQ.1) THEN
CTJL  WRITE(*,*) ' IN MC;B,T,D ',B(MC(J),IXYZ,ATOM,IBSET),T,DC(J)
      END IF
   21     CONTINUE
          DO 121 J=3,6
            B(MC(J),IXYZ,ATOM,JBSET)=B(MC(J),IXYZ,ATOM,JBSET)+T*DC(J)
  121   CONTINUE
   22   CONTINUE
C
C       ----- USE TRANSLATIONAL INVARIANCE FOR LAST ATOM -----
C
        ATOM=NATOM(NCENTR)
        DO 23 J=1,2
          B(MC(J),IXYZ,ATOM,IBSET)=B(MC(J),IXYZ,ATOM,IBSET)-TEMP*DC(J)
      IF(IBSET.EQ.1) THEN
CTJL  WRITE(*,*) ' IN MC2;B,T,D ',B(MC(J),IXYZ,ATOM,IBSET),TEMP,DC(J)
      END IF
   23   CONTINUE
        DO 123 J=3,6
          B(MC(J),IXYZ,ATOM,JBSET)=B(MC(J),IXYZ,ATOM,JBSET)-TEMP*DC(J)
  123   CONTINUE
   24 CONTINUE
C
C
      RETURN
      END
      SUBROUTINE INFI  (XIN,YIN,ZIN,DXI,DYI,DZI,LEN2D,ABDENS,LENBLK)
C
C     ----- FORM INTEGRALS OVER FUNCTIONS -----
C
      IMPLICIT REAL*8 (A-H,O-Z)
C
C     EXTENDED DUMMY XIN,YIN,ZIN,DXI,DYI,DZI,ABDENS
C
C     COMMON /DROOT/  XX,U(5),W(5),NROOTS
      COMMON /ROOTS/  NONZER
      COMMON /TAPES/  IOUT,ICHECK,INPUT,ITAP42,ITAP49
      COMMON /DINDEX/ IJGT(36),IJX(36),IJY(36),IJZ(36)
     1,               KLGT(78),KLX(78),KLY(78),KLZ(78)
     2,               IJDGT(36),KLDGT(36),KDG(10),LDG(10)
      COMMON /DSHLNO/ LIT,LJT,LKT,LLT,LOCI,LOCJ,LOCK,LOCL
     1,               MINI,MINJ,MINK,MINL,MAXI,MAXJ,MAXK,MAXL
     2,               NIJ,IJD,KLD,IJ,KL
CIBM  COMMON /SHELLD/ NATOM(4),NPASS
      COMMON /SHELLD/ XIDER,YIDER,ZIDER,XJDER,YJDER,ZJDER
     2,               XKDER,YKDER,ZKDER,NATOM(4),NPASS
C
      DIMENSION XIN(LEN2D),YIN(LEN2D),ZIN(LEN2D)
      DIMENSION DXI(LEN2D),DYI(LEN2D),DZI(LEN2D)
      DIMENSION ABDENS(LENBLK)
C
      RETURN
C
C-----------------------------------------------------FRMI
C
      ENTRY FRMI(XIN,YIN,ZIN,DXI,DYI,DZI,LEN2D,ABDENS,LENBLK)
C
      N=0
      GO TO (500,1500,2500,3500,4500),NONZER
C
  500 DO 1000 I=1,IJ
        NX=IJX(I)
        NY=IJY(I)
        NZ=IJZ(I)
        DO 1000 K=1,KL
          MX=NX+KLX(K)
          MY=NY+KLY(K)
          MZ=NZ+KLZ(K)
          N=N+1
          DENSTY=ABDENS(N)
          IF (ABS(DENSTY).LT.1.0D-08) GO TO 1000
          XY=XIN(MX) * YIN(MY) * DENSTY
          XZ=XIN(MX) * ZIN(MZ) * DENSTY
          YZ=YIN(MY) * ZIN(MZ) * DENSTY
C
          XIDER=XIDER + DXI(MX) * YZ
          YIDER=YIDER + DYI(MY) * XZ
          ZIDER=ZIDER + DZI(MZ) * XY
C
 1000 CONTINUE
      RETURN
C
 1500 DO 2000 I=1,IJ
        NX=IJX(I)
        NY=IJY(I)
        NZ=IJZ(I)
        DO 2000 K=1,KL
          MX=NX+KLX(K)
          MY=NY+KLY(K)
          MZ=NZ+KLZ(K)
          N=N+1
          DENSTY=ABDENS(N)
          IF (ABS(DENSTY).LT.1.0D-08) GO TO 2000
          XY1 = XIN(MX) * YIN(MY) * DENSTY
          XZ1 = XIN(MX) * ZIN(MZ) * DENSTY
          YZ1 = YIN(MY) * ZIN(MZ) * DENSTY
C
          XY2 = XIN(MX+256) * YIN(MY+256) * DENSTY
          XZ2 = XIN(MX+256) * ZIN(MZ+256) * DENSTY
          YZ2 = YIN(MY+256) * ZIN(MZ+256) * DENSTY
C
          XIDER = XIDER + DXI(MX) * YZ1 + DXI(MX+256) * YZ2
          YIDER = YIDER + DYI(MY) * XZ1 + DYI(MY+256) * XZ2
          ZIDER = ZIDER + DZI(MZ) * XY1 + DZI(MZ+256) * XY2
C
 2000 CONTINUE
      RETURN
C
 2500 DO 3000 I=1,IJ
        NX=IJX(I)
        NY=IJY(I)
        NZ=IJZ(I)
        DO 3000 K=1,KL
          MX=NX+KLX(K)
          MY=NY+KLY(K)
          MZ=NZ+KLZ(K)
          N=N+1
          DENSTY=ABDENS(N)
          IF (ABS(DENSTY).LT.1.0D-08) GO TO 3000
          XY1 = XIN(MX     ) * YIN(MY     ) * DENSTY
          XZ1 = XIN(MX     ) * ZIN(MZ     ) * DENSTY
          YZ1 = YIN(MY     ) * ZIN(MZ     ) * DENSTY
C
          XY2 = XIN(MX+ 256) * YIN(MY+ 256) * DENSTY
          XZ2 = XIN(MX+ 256) * ZIN(MZ+ 256) * DENSTY
          YZ2 = YIN(MY+ 256) * ZIN(MZ+ 256) * DENSTY
C
          XY3 = XIN(MX+ 512) * YIN(MY+ 512) * DENSTY
          XZ3 = XIN(MX+ 512) * ZIN(MZ+ 512) * DENSTY
          YZ3 = YIN(MY+ 512) * ZIN(MZ+ 512) * DENSTY
C
          XIDER = XIDER + DXI(MX     ) * YZ1 + DXI(MX+ 256) * YZ2
     1    +                       DXI(MX+ 512) * YZ3
          YIDER = YIDER + DYI(MY     ) * XZ1 + DYI(MY+ 256) * XZ2
     1    +                       DYI(MY+ 512) * XZ3
          ZIDER = ZIDER + DZI(MZ     ) * XY1 + DZI(MZ+ 256) * XY2
     1    +                       DZI(MZ+ 512) * XY3
C
 3000 CONTINUE
      RETURN
C
 3500 DO 4000 I=1,IJ
        NX=IJX(I)
        NY=IJY(I)
        NZ=IJZ(I)
        DO 4000 K=1,KL
          MX=NX+KLX(K)
          MY=NY+KLY(K)
          MZ=NZ+KLZ(K)
          N=N+1
          DENSTY=ABDENS(N)
          IF (ABS(DENSTY).LT.1.0D-08) GO TO 4000
          XY1 = XIN(MX     ) * YIN(MY     ) * DENSTY
          XZ1 = XIN(MX     ) * ZIN(MZ     ) * DENSTY
          YZ1 = YIN(MY     ) * ZIN(MZ     ) * DENSTY
C
          XY2 = XIN(MX+ 256) * YIN(MY+ 256) * DENSTY
          XZ2 = XIN(MX+ 256) * ZIN(MZ+ 256) * DENSTY
          YZ2 = YIN(MY+ 256) * ZIN(MZ+ 256) * DENSTY
C
          XY3 = XIN(MX+ 512) * YIN(MY+ 512) * DENSTY
          XZ3 = XIN(MX+ 512) * ZIN(MZ+ 512) * DENSTY
          YZ3 = YIN(MY+ 512) * ZIN(MZ+ 512) * DENSTY
C
          XY4 = XIN(MX+ 768) * YIN(MY+ 768) * DENSTY
          XZ4 = XIN(MX+ 768) * ZIN(MZ+ 768) * DENSTY
          YZ4 = YIN(MY+ 768) * ZIN(MZ+ 768) * DENSTY
C
          XIDER = XIDER + DXI(MX     ) * YZ1 + DXI(MX+ 256) * YZ2
     1    +                       DXI(MX+ 512) * YZ3 + DXI(MX+ 768) *
     *    YZ4
          YIDER = YIDER + DYI(MY     ) * XZ1 + DYI(MY+ 256) * XZ2
     1    +                       DYI(MY+ 512) * XZ3 + DYI(MY+ 768) *
     *    XZ4
          ZIDER = ZIDER + DZI(MZ     ) * XY1 + DZI(MZ+ 256) * XY2
     1    +                       DZI(MZ+ 512) * XY3 + DZI(MZ+ 768) *
     *    XY4
C
 4000 CONTINUE
      RETURN
C
 4500 DO 5000 I=1,IJ
        NX=IJX(I)
        NY=IJY(I)
        NZ=IJZ(I)
        DO 5000 K=1,KL
          MX=NX+KLX(K)
          MY=NY+KLY(K)
          MZ=NZ+KLZ(K)
          N=N+1
          DENSTY=ABDENS(N)
          IF (ABS(DENSTY).LT.1.0D-08) GO TO 5000
          XY1 = XIN(MX     ) * YIN(MY     ) * DENSTY
          XZ1 = XIN(MX     ) * ZIN(MZ     ) * DENSTY
          YZ1 = YIN(MY     ) * ZIN(MZ     ) * DENSTY
C
          XY2 = XIN(MX+ 256) * YIN(MY+ 256) * DENSTY
          XZ2 = XIN(MX+ 256) * ZIN(MZ+ 256) * DENSTY
          YZ2 = YIN(MY+ 256) * ZIN(MZ+ 256) * DENSTY
C
          XY3 = XIN(MX+ 512) * YIN(MY+ 512) * DENSTY
          XZ3 = XIN(MX+ 512) * ZIN(MZ+ 512) * DENSTY
          YZ3 = YIN(MY+ 512) * ZIN(MZ+ 512) * DENSTY
C
          XY4 = XIN(MX+ 768) * YIN(MY+ 768) * DENSTY
          XZ4 = XIN(MX+ 768) * ZIN(MZ+ 768) * DENSTY
          YZ4 = YIN(MY+ 768) * ZIN(MZ+ 768) * DENSTY
C
          XY5 = XIN(MX+1024) * YIN(MY+1024) * DENSTY
          XZ5 = XIN(MX+1024) * ZIN(MZ+1024) * DENSTY
          YZ5 = YIN(MY+1024) * ZIN(MZ+1024) * DENSTY
C
          XIDER = XIDER + DXI(MX     ) * YZ1 + DXI(MX+ 256) * YZ2
     1    +                       DXI(MX+ 512) * YZ3 + DXI(MX+ 768) *
     *    YZ4+                       DXI(MX+1024) * YZ5
          YIDER = YIDER + DYI(MY     ) * XZ1 + DYI(MY+ 256) * XZ2
     1    +                       DYI(MY+ 512) * XZ3 + DYI(MY+ 768) *
     *    XZ4+                       DYI(MY+1024) * XZ5
          ZIDER = ZIDER + DZI(MZ     ) * XY1 + DZI(MZ+ 256) * XY2
     1    +                       DZI(MZ+ 512) * XY3 + DZI(MZ+ 768) *
     *    XY4+                       DZI(MZ+1024) * XY5
C
 5000 CONTINUE
      RETURN
C
      END
      SUBROUTINE INFIJ (XIN,YIN,ZIN,DXI,DYI,DZI,DXJ,DYJ,DZJ,LEN2D,
     #ABDENS,LENBLK)
C
C     ----- FORM INTEGRALS OVER FUNCTIONS -----
C
      IMPLICIT REAL*8 (A-H,O-Z)
C
C     EXTENDED DUMMY XIN,YIN,ZIN,DXI,DYI,DZI,DXJ,DYJ,DZJ,ABDENS
C
C     COMMON /DROOT/  XX,U(5),W(5),NROOTS
      COMMON /ROOTS/  NONZER
      COMMON /TAPES/  IOUT,ICHECK,INPUT,ITAP42,ITAP49
      COMMON /DINDEX/ IJGT(36),IJX(36),IJY(36),IJZ(36)
     1,               KLGT(78),KLX(78),KLY(78),KLZ(78)
     2,               IJDGT(36),KLDGT(36),KDG(10),LDG(10)
      COMMON /DSHLNO/ LIT,LJT,LKT,LLT,LOCI,LOCJ,LOCK,LOCL
     1,               MINI,MINJ,MINK,MINL,MAXI,MAXJ,MAXK,MAXL
     2,               NIJ,IJD,KLD,IJ,KL
CIBM  COMMON /SHELLD/ NATOM(4),NPASS
      COMMON /SHELLD/ XIDER,YIDER,ZIDER,XJDER,YJDER,ZJDER
     2,               XKDER,YKDER,ZKDER,NATOM(4),NPASS
C
      DIMENSION XIN(LEN2D),YIN(LEN2D),ZIN(LEN2D)
      DIMENSION DXI(LEN2D),DYI(LEN2D),DZI(LEN2D)
      DIMENSION DXJ(LEN2D),DYJ(LEN2D),DZJ(LEN2D)
      DIMENSION ABDENS(LENBLK)
C
      RETURN
C
C-----------------------------------------------------FRMIJ
C
      ENTRY FRMIJ(XIN,YIN,ZIN,DXI,DYI,DZI,DXJ,DYJ,DZJ,LEN2D,
     #ABDENS,LENBLK)
C
      N=0
      GO TO (500,1500,2500,3500,4500),NONZER
C
  500 DO 1000 I=1,IJ
        NX=IJX(I)
        NY=IJY(I)
        NZ=IJZ(I)
        DO 1000 K=1,KL
          MX=NX+KLX(K)
          MY=NY+KLY(K)
          MZ=NZ+KLZ(K)
          N=N+1
          DENSTY=ABDENS(N)
          IF (ABS(DENSTY).LT.1.0D-08) GO TO 1000
          XY=XIN(MX) * YIN(MY) * DENSTY
          XZ=XIN(MX) * ZIN(MZ) * DENSTY
          YZ=YIN(MY) * ZIN(MZ) * DENSTY
C
          XIDER=XIDER + DXI(MX) * YZ
          YIDER=YIDER + DYI(MY) * XZ
          ZIDER=ZIDER + DZI(MZ) * XY
C
          XJDER=XJDER + DXJ(MX) * YZ
          YJDER=YJDER + DYJ(MY) * XZ
          ZJDER=ZJDER + DZJ(MZ) * XY
C
 1000 CONTINUE
      RETURN
C
 1500 DO 2000 I=1,IJ
        NX=IJX(I)
        NY=IJY(I)
        NZ=IJZ(I)
        DO 2000 K=1,KL
          MX=NX+KLX(K)
          MY=NY+KLY(K)
          MZ=NZ+KLZ(K)
          N=N+1
          DENSTY=ABDENS(N)
          IF (ABS(DENSTY).LT.1.0D-08) GO TO 2000
          XY1 = XIN(MX) * YIN(MY) * DENSTY
          XZ1 = XIN(MX) * ZIN(MZ) * DENSTY
          YZ1 = YIN(MY) * ZIN(MZ) * DENSTY
C
          XY2 = XIN(MX+256) * YIN(MY+256) * DENSTY
          XZ2 = XIN(MX+256) * ZIN(MZ+256) * DENSTY
          YZ2 = YIN(MY+256) * ZIN(MZ+256) * DENSTY
C
          XIDER = XIDER + DXI(MX) * YZ1 + DXI(MX+256) * YZ2
          YIDER = YIDER + DYI(MY) * XZ1 + DYI(MY+256) * XZ2
          ZIDER = ZIDER + DZI(MZ) * XY1 + DZI(MZ+256) * XY2
C
          XJDER = XJDER + DXJ(MX) * YZ1 + DXJ(MX+256) * YZ2
          YJDER = YJDER + DYJ(MY) * XZ1 + DYJ(MY+256) * XZ2
          ZJDER = ZJDER + DZJ(MZ) * XY1 + DZJ(MZ+256) * XY2
C
 2000 CONTINUE
      RETURN
C
 2500 DO 3000 I=1,IJ
        NX=IJX(I)
        NY=IJY(I)
        NZ=IJZ(I)
        DO 3000 K=1,KL
          MX=NX+KLX(K)
          MY=NY+KLY(K)
          MZ=NZ+KLZ(K)
          N=N+1
          DENSTY=ABDENS(N)
          IF (ABS(DENSTY).LT.1.0D-08) GO TO 3000
          XY1 = XIN(MX     ) * YIN(MY     ) * DENSTY
          XZ1 = XIN(MX     ) * ZIN(MZ     ) * DENSTY
          YZ1 = YIN(MY     ) * ZIN(MZ     ) * DENSTY
C
          XY2 = XIN(MX+ 256) * YIN(MY+ 256) * DENSTY
          XZ2 = XIN(MX+ 256) * ZIN(MZ+ 256) * DENSTY
          YZ2 = YIN(MY+ 256) * ZIN(MZ+ 256) * DENSTY
C
          XY3 = XIN(MX+ 512) * YIN(MY+ 512) * DENSTY
          XZ3 = XIN(MX+ 512) * ZIN(MZ+ 512) * DENSTY
          YZ3 = YIN(MY+ 512) * ZIN(MZ+ 512) * DENSTY
C
          XIDER = XIDER + DXI(MX     ) * YZ1 + DXI(MX+ 256) * YZ2
     1    +                       DXI(MX+ 512) * YZ3
          YIDER = YIDER + DYI(MY     ) * XZ1 + DYI(MY+ 256) * XZ2
     1    +                       DYI(MY+ 512) * XZ3
          ZIDER = ZIDER + DZI(MZ     ) * XY1 + DZI(MZ+ 256) * XY2
     1    +                       DZI(MZ+ 512) * XY3
C
          XJDER = XJDER + DXJ(MX     ) * YZ1 + DXJ(MX+ 256) * YZ2
     1    +                       DXJ(MX+ 512) * YZ3
          YJDER = YJDER + DYJ(MY     ) * XZ1 + DYJ(MY+ 256) * XZ2
     1    +                       DYJ(MY+ 512) * XZ3
          ZJDER = ZJDER + DZJ(MZ     ) * XY1 + DZJ(MZ+ 256) * XY2
     1    +                       DZJ(MZ+ 512) * XY3
C
 3000 CONTINUE
      RETURN
C
 3500 DO 4000 I=1,IJ
        NX=IJX(I)
        NY=IJY(I)
        NZ=IJZ(I)
        DO 4000 K=1,KL
          MX=NX+KLX(K)
          MY=NY+KLY(K)
          MZ=NZ+KLZ(K)
          N=N+1
          DENSTY=ABDENS(N)
          IF (ABS(DENSTY).LT.1.0D-08) GO TO 4000
          XY1 = XIN(MX     ) * YIN(MY     ) * DENSTY
          XZ1 = XIN(MX     ) * ZIN(MZ     ) * DENSTY
          YZ1 = YIN(MY     ) * ZIN(MZ     ) * DENSTY
C
          XY2 = XIN(MX+ 256) * YIN(MY+ 256) * DENSTY
          XZ2 = XIN(MX+ 256) * ZIN(MZ+ 256) * DENSTY
          YZ2 = YIN(MY+ 256) * ZIN(MZ+ 256) * DENSTY
C
          XY3 = XIN(MX+ 512) * YIN(MY+ 512) * DENSTY
          XZ3 = XIN(MX+ 512) * ZIN(MZ+ 512) * DENSTY
          YZ3 = YIN(MY+ 512) * ZIN(MZ+ 512) * DENSTY
C
          XY4 = XIN(MX+ 768) * YIN(MY+ 768) * DENSTY
          XZ4 = XIN(MX+ 768) * ZIN(MZ+ 768) * DENSTY
          YZ4 = YIN(MY+ 768) * ZIN(MZ+ 768) * DENSTY
C
          XIDER = XIDER + DXI(MX     ) * YZ1 + DXI(MX+ 256) * YZ2
     1    +                       DXI(MX+ 512) * YZ3 + DXI(MX+ 768) *
     *    YZ4
          YIDER = YIDER + DYI(MY     ) * XZ1 + DYI(MY+ 256) * XZ2
     1    +                       DYI(MY+ 512) * XZ3 + DYI(MY+ 768) *
     *    XZ4
          ZIDER = ZIDER + DZI(MZ     ) * XY1 + DZI(MZ+ 256) * XY2
     1    +                       DZI(MZ+ 512) * XY3 + DZI(MZ+ 768) *
     *    XY4
C
          XJDER = XJDER + DXJ(MX     ) * YZ1 + DXJ(MX+ 256) * YZ2
     1    +                       DXJ(MX+ 512) * YZ3 + DXJ(MX+ 768) *
     *    YZ4
          YJDER = YJDER + DYJ(MY     ) * XZ1 + DYJ(MY+ 256) * XZ2
     1    +                       DYJ(MY+ 512) * XZ3 + DYJ(MY+ 768) *
     *    XZ4
          ZJDER = ZJDER + DZJ(MZ     ) * XY1 + DZJ(MZ+ 256) * XY2
     1    +                       DZJ(MZ+ 512) * XY3 + DZJ(MZ+ 768) *
     *    XY4
C
 4000 CONTINUE
      RETURN
C
 4500 DO 5000 I=1,IJ
        NX=IJX(I)
        NY=IJY(I)
        NZ=IJZ(I)
        DO 5000 K=1,KL
          MX=NX+KLX(K)
          MY=NY+KLY(K)
          MZ=NZ+KLZ(K)
          N=N+1
          DENSTY=ABDENS(N)
          IF (ABS(DENSTY).LT.1.0D-08) GO TO 5000
          XY1 = XIN(MX     ) * YIN(MY     ) * DENSTY
          XZ1 = XIN(MX     ) * ZIN(MZ     ) * DENSTY
          YZ1 = YIN(MY     ) * ZIN(MZ     ) * DENSTY
C
          XY2 = XIN(MX+ 256) * YIN(MY+ 256) * DENSTY
          XZ2 = XIN(MX+ 256) * ZIN(MZ+ 256) * DENSTY
          YZ2 = YIN(MY+ 256) * ZIN(MZ+ 256) * DENSTY
C
          XY3 = XIN(MX+ 512) * YIN(MY+ 512) * DENSTY
          XZ3 = XIN(MX+ 512) * ZIN(MZ+ 512) * DENSTY
          YZ3 = YIN(MY+ 512) * ZIN(MZ+ 512) * DENSTY
C
          XY4 = XIN(MX+ 768) * YIN(MY+ 768) * DENSTY
          XZ4 = XIN(MX+ 768) * ZIN(MZ+ 768) * DENSTY
          YZ4 = YIN(MY+ 768) * ZIN(MZ+ 768) * DENSTY
C
          XY5 = XIN(MX+1024) * YIN(MY+1024) * DENSTY
          XZ5 = XIN(MX+1024) * ZIN(MZ+1024) * DENSTY
          YZ5 = YIN(MY+1024) * ZIN(MZ+1024) * DENSTY
C
          XIDER = XIDER + DXI(MX     ) * YZ1 + DXI(MX+ 256) * YZ2
     1    +                       DXI(MX+ 512) * YZ3 + DXI(MX+ 768) *
     *    YZ4+                       DXI(MX+1024) * YZ5
          YIDER = YIDER + DYI(MY     ) * XZ1 + DYI(MY+ 256) * XZ2
     1    +                       DYI(MY+ 512) * XZ3 + DYI(MY+ 768) *
     *    XZ4+                       DYI(MY+1024) * XZ5
          ZIDER = ZIDER + DZI(MZ     ) * XY1 + DZI(MZ+ 256) * XY2
     1    +                       DZI(MZ+ 512) * XY3 + DZI(MZ+ 768) *
     *    XY4+                       DZI(MZ+1024) * XY5
C
          XJDER = XJDER + DXJ(MX     ) * YZ1 + DXJ(MX+ 256) * YZ2
     1    +                       DXJ(MX+ 512) * YZ3 + DXJ(MX+ 768) *
     *    YZ4+                       DXJ(MX+1024) * YZ5
          YJDER = YJDER + DYJ(MY     ) * XZ1 + DYJ(MY+ 256) * XZ2
     1    +                       DYJ(MY+ 512) * XZ3 + DYJ(MY+ 768) *
     *    XZ4+                       DYJ(MY+1024) * XZ5
          ZJDER = ZJDER + DZJ(MZ     ) * XY1 + DZJ(MZ+ 256) * XY2
     1    +                       DZJ(MZ+ 512) * XY3 + DZJ(MZ+ 768) *
     *    XY4+                       DZJ(MZ+1024) * XY5
C
 5000 CONTINUE
      RETURN
C
      END
      SUBROUTINE INFIJK(XIN,YIN,ZIN,DXI,DYI,DZI,DXJ,DYJ,DZJ,
     #DXK,DYK,DZK,LEN2D,ABDENS,LENBLK)
C
C     ----- FORM INTEGRALS OVER FUNCTIONS -----
C
      IMPLICIT REAL*8 (A-H,O-Z)
C
C     EXTENDED DUMMY XIN,YIN,ZIN,DXI,DYI,DZI,DXJ,DYJ,DZJ,DXK,DYK,DZK
C    #,              ABDENS
C
C     COMMON /DROOT/  XX,U(5),W(5),NROOTS
      COMMON /ROOTS/  NONZER
      COMMON /TAPES/  IOUT,ICHECK,INPUT,ITAP42,ITAP49
      COMMON /DINDEX/ IJGT(36),IJX(36),IJY(36),IJZ(36)
     1,               KLGT(78),KLX(78),KLY(78),KLZ(78)
     2,               IJDGT(36),KLDGT(36),KDG(10),LDG(10)
      COMMON /DSHLNO/ LIT,LJT,LKT,LLT,LOCI,LOCJ,LOCK,LOCL
     1,               MINI,MINJ,MINK,MINL,MAXI,MAXJ,MAXK,MAXL
     2,               NIJ,IJD,KLD,IJ,KL
CIBM  COMMON /SHELLD/ NATOM(4),NPASS
      COMMON /SHELLD/ XIDER,YIDER,ZIDER,XJDER,YJDER,ZJDER
     2,               XKDER,YKDER,ZKDER,NATOM(4),NPASS
C
      DIMENSION XIN(LEN2D),YIN(LEN2D),ZIN(LEN2D)
      DIMENSION DXI(LEN2D),DYI(LEN2D),DZI(LEN2D)
      DIMENSION DXJ(LEN2D),DYJ(LEN2D),DZJ(LEN2D)
      DIMENSION DXK(LEN2D),DYK(LEN2D),DZK(LEN2D)
      DIMENSION ABDENS(LENBLK)
C
      RETURN
C
C-----------------------------------------------------FRMIJK
C
      ENTRY FRMIJK(XIN,YIN,ZIN,DXI,DYI,DZI,DXJ,DYJ,DZJ,
     #DXK,DYK,DZK,LEN2D,ABDENS,LENBLK)
C
      N=0
      GO TO (500,1500,2500,3500,4500),NONZER
C
  500 DO 1000 I=1,IJ
        NX=IJX(I)
        NY=IJY(I)
        NZ=IJZ(I)
        DO 1000 K=1,KL
          MX=NX+KLX(K)
          MY=NY+KLY(K)
          MZ=NZ+KLZ(K)
          N=N+1
          DENSTY=ABDENS(N)
          IF (ABS(DENSTY).LT.1.0D-08) GO TO 1000
          XY=XIN(MX) * YIN(MY) * DENSTY
          XZ=XIN(MX) * ZIN(MZ) * DENSTY
          YZ=YIN(MY) * ZIN(MZ) * DENSTY
C
          XIDER=XIDER + DXI(MX) * YZ
          YIDER=YIDER + DYI(MY) * XZ
          ZIDER=ZIDER + DZI(MZ) * XY
C
          XJDER=XJDER + DXJ(MX) * YZ
          YJDER=YJDER + DYJ(MY) * XZ
          ZJDER=ZJDER + DZJ(MZ) * XY
C
          XKDER=XKDER + DXK(MX) * YZ
          YKDER=YKDER + DYK(MY) * XZ
          ZKDER=ZKDER + DZK(MZ) * XY
C
 1000 CONTINUE
      RETURN
 1500 DO 2000 I=1,IJ
        NX=IJX(I)
        NY=IJY(I)
        NZ=IJZ(I)
        DO 2000 K=1,KL
          MX=NX+KLX(K)
          MY=NY+KLY(K)
          MZ=NZ+KLZ(K)
          N=N+1
          DENSTY=ABDENS(N)
          IF (ABS(DENSTY).LT.1.0D-08) GO TO 2000
          XY1 = XIN(MX) * YIN(MY) * DENSTY
          XZ1 = XIN(MX) * ZIN(MZ) * DENSTY
          YZ1 = YIN(MY) * ZIN(MZ) * DENSTY
          XY2 = XIN(MX+256) * YIN(MY+256) * DENSTY
          XZ2 = XIN(MX+256) * ZIN(MZ+256) * DENSTY
          YZ2 = YIN(MY+256) * ZIN(MZ+256) * DENSTY
C
          XIDER = XIDER + DXI(MX) * YZ1 + DXI(MX+256) * YZ2
          YIDER = YIDER + DYI(MY) * XZ1 + DYI(MY+256) * XZ2
          ZIDER = ZIDER + DZI(MZ) * XY1 + DZI(MZ+256) * XY2
C
          XJDER = XJDER + DXJ(MX) * YZ1 + DXJ(MX+256) * YZ2
          YJDER = YJDER + DYJ(MY) * XZ1 + DYJ(MY+256) * XZ2
          ZJDER = ZJDER + DZJ(MZ) * XY1 + DZJ(MZ+256) * XY2
C
          XKDER = XKDER + DXK(MX) * YZ1 + DXK(MX+256) * YZ2
          YKDER = YKDER + DYK(MY) * XZ1 + DYK(MY+256) * XZ2
          ZKDER = ZKDER + DZK(MZ) * XY1 + DZK(MZ+256) * XY2
C
 2000 CONTINUE
      RETURN
C
 2500 DO 3000 I=1,IJ
        NX=IJX(I)
        NY=IJY(I)
        NZ=IJZ(I)
        DO 3000 K=1,KL
          MX=NX+KLX(K)
          MY=NY+KLY(K)
          MZ=NZ+KLZ(K)
          N=N+1
          DENSTY=ABDENS(N)
          IF (ABS(DENSTY).LT.1.0D-08) GO TO 3000
          XY1 = XIN(MX     ) * YIN(MY     ) * DENSTY
          XZ1 = XIN(MX     ) * ZIN(MZ     ) * DENSTY
          YZ1 = YIN(MY     ) * ZIN(MZ     ) * DENSTY
          XY2 = XIN(MX+ 256) * YIN(MY+ 256) * DENSTY
          XZ2 = XIN(MX+ 256) * ZIN(MZ+ 256) * DENSTY
          YZ2 = YIN(MY+ 256) * ZIN(MZ+ 256) * DENSTY
          XY3 = XIN(MX+ 512) * YIN(MY+ 512) * DENSTY
          XZ3 = XIN(MX+ 512) * ZIN(MZ+ 512) * DENSTY
          YZ3 = YIN(MY+ 512) * ZIN(MZ+ 512) * DENSTY
C
          XIDER = XIDER + DXI(MX     ) * YZ1 + DXI(MX+ 256) * YZ2
     1    +                       DXI(MX+ 512) * YZ3
          YIDER = YIDER + DYI(MY     ) * XZ1 + DYI(MY+ 256) * XZ2
     1    +                       DYI(MY+ 512) * XZ3
          ZIDER = ZIDER + DZI(MZ     ) * XY1 + DZI(MZ+ 256) * XY2
     1    +                       DZI(MZ+ 512) * XY3
C
          XJDER = XJDER + DXJ(MX     ) * YZ1 + DXJ(MX+ 256) * YZ2
     1    +                       DXJ(MX+ 512) * YZ3
          YJDER = YJDER + DYJ(MY     ) * XZ1 + DYJ(MY+ 256) * XZ2
     1    +                       DYJ(MY+ 512) * XZ3
          ZJDER = ZJDER + DZJ(MZ     ) * XY1 + DZJ(MZ+ 256) * XY2
     1    +                       DZJ(MZ+ 512) * XY3
C
          XKDER = XKDER + DXK(MX     ) * YZ1 + DXK(MX+ 256) * YZ2
     1    +                       DXK(MX+ 512) * YZ3
          YKDER = YKDER + DYK(MY     ) * XZ1 + DYK(MY+ 256) * XZ2
     1    +                       DYK(MY+ 512) * XZ3
          ZKDER = ZKDER + DZK(MZ     ) * XY1 + DZK(MZ+ 256) * XY2
     1    +                       DZK(MZ+ 512) * XY3
C
 3000 CONTINUE
      RETURN
C
 3500 DO 4000 I=1,IJ
        NX=IJX(I)
        NY=IJY(I)
        NZ=IJZ(I)
        DO 4000 K=1,KL
          MX=NX+KLX(K)
          MY=NY+KLY(K)
          MZ=NZ+KLZ(K)
          N=N+1
          DENSTY=ABDENS(N)
          IF (ABS(DENSTY).LT.1.0D-08) GO TO 4000
          XY1 = XIN(MX     ) * YIN(MY     ) * DENSTY
          XZ1 = XIN(MX     ) * ZIN(MZ     ) * DENSTY
          YZ1 = YIN(MY     ) * ZIN(MZ     ) * DENSTY
C
          XY2 = XIN(MX+ 256) * YIN(MY+ 256) * DENSTY
          XZ2 = XIN(MX+ 256) * ZIN(MZ+ 256) * DENSTY
          YZ2 = YIN(MY+ 256) * ZIN(MZ+ 256) * DENSTY
C
          XY3 = XIN(MX+ 512) * YIN(MY+ 512) * DENSTY
          XZ3 = XIN(MX+ 512) * ZIN(MZ+ 512) * DENSTY
          YZ3 = YIN(MY+ 512) * ZIN(MZ+ 512) * DENSTY
C
          XY4 = XIN(MX+ 768) * YIN(MY+ 768) * DENSTY
          XZ4 = XIN(MX+ 768) * ZIN(MZ+ 768) * DENSTY
          YZ4 = YIN(MY+ 768) * ZIN(MZ+ 768) * DENSTY
C
          XIDER = XIDER + DXI(MX     ) * YZ1 + DXI(MX+ 256) * YZ2
     1    +                       DXI(MX+ 512) * YZ3 + DXI(MX+ 768) *
     *    YZ4
          YIDER = YIDER + DYI(MY     ) * XZ1 + DYI(MY+ 256) * XZ2
     1    +                       DYI(MY+ 512) * XZ3 + DYI(MY+ 768) *
     *    XZ4
          ZIDER = ZIDER + DZI(MZ     ) * XY1 + DZI(MZ+ 256) * XY2
     1    +                       DZI(MZ+ 512) * XY3 + DZI(MZ+ 768) *
     *    XY4
C
          XJDER = XJDER + DXJ(MX     ) * YZ1 + DXJ(MX+ 256) * YZ2
     1    +                       DXJ(MX+ 512) * YZ3 + DXJ(MX+ 768) *
     *    YZ4
          YJDER = YJDER + DYJ(MY     ) * XZ1 + DYJ(MY+ 256) * XZ2
     1    +                       DYJ(MY+ 512) * XZ3 + DYJ(MY+ 768) *
     *    XZ4
          ZJDER = ZJDER + DZJ(MZ     ) * XY1 + DZJ(MZ+ 256) * XY2
     1    +                       DZJ(MZ+ 512) * XY3 + DZJ(MZ+ 768) *
     *    XY4
C
          XKDER = XKDER + DXK(MX     ) * YZ1 + DXK(MX+ 256) * YZ2
     1    +                       DXK(MX+ 512) * YZ3 + DXK(MX+ 768) *
     *    YZ4
          YKDER = YKDER + DYK(MY     ) * XZ1 + DYK(MY+ 256) * XZ2
     1    +                       DYK(MY+ 512) * XZ3 + DYK(MY+ 768) *
     *    XZ4
          ZKDER = ZKDER + DZK(MZ     ) * XY1 + DZK(MZ+ 256) * XY2
     1    +                       DZK(MZ+ 512) * XY3 + DZK(MZ+ 768) *
     *    XY4
C
 4000 CONTINUE
      RETURN
C
 4500 DO 5000 I=1,IJ
        NX=IJX(I)
        NY=IJY(I)
        NZ=IJZ(I)
        DO 5000 K=1,KL
          MX=NX+KLX(K)
          MY=NY+KLY(K)
          MZ=NZ+KLZ(K)
          N=N+1
          DENSTY=ABDENS(N)
          IF (ABS(DENSTY).LT.1.0D-08) GO TO 5000
          XY1 = XIN(MX     ) * YIN(MY     ) * DENSTY
          XZ1 = XIN(MX     ) * ZIN(MZ     ) * DENSTY
          YZ1 = YIN(MY     ) * ZIN(MZ     ) * DENSTY
C
          XY2 = XIN(MX+ 256) * YIN(MY+ 256) * DENSTY
          XZ2 = XIN(MX+ 256) * ZIN(MZ+ 256) * DENSTY
          YZ2 = YIN(MY+ 256) * ZIN(MZ+ 256) * DENSTY
C
          XY3 = XIN(MX+ 512) * YIN(MY+ 512) * DENSTY
          XZ3 = XIN(MX+ 512) * ZIN(MZ+ 512) * DENSTY
          YZ3 = YIN(MY+ 512) * ZIN(MZ+ 512) * DENSTY
C
          XY4 = XIN(MX+ 768) * YIN(MY+ 768) * DENSTY
          XZ4 = XIN(MX+ 768) * ZIN(MZ+ 768) * DENSTY
          YZ4 = YIN(MY+ 768) * ZIN(MZ+ 768) * DENSTY
C
          XY5 = XIN(MX+1024) * YIN(MY+1024) * DENSTY
          XZ5 = XIN(MX+1024) * ZIN(MZ+1024) * DENSTY
          YZ5 = YIN(MY+1024) * ZIN(MZ+1024) * DENSTY
C
          XIDER = XIDER + DXI(MX     ) * YZ1 + DXI(MX+ 256) * YZ2
     1    +                       DXI(MX+ 512) * YZ3 + DXI(MX+ 768) *
     *    YZ4+                       DXI(MX+1024) * YZ5
          YIDER = YIDER + DYI(MY     ) * XZ1 + DYI(MY+ 256) * XZ2
     1    +                       DYI(MY+ 512) * XZ3 + DYI(MY+ 768) *
     *    XZ4+                       DYI(MY+1024) * XZ5
          ZIDER = ZIDER + DZI(MZ     ) * XY1 + DZI(MZ+ 256) * XY2
     1    +                       DZI(MZ+ 512) * XY3 + DZI(MZ+ 768) *
     *    XY4+                       DZI(MZ+1024) * XY5
C
          XJDER = XJDER + DXJ(MX     ) * YZ1 + DXJ(MX+ 256) * YZ2
     1    +                       DXJ(MX+ 512) * YZ3 + DXJ(MX+ 768) *
     *    YZ4+                       DXJ(MX+1024) * YZ5
          YJDER = YJDER + DYJ(MY     ) * XZ1 + DYJ(MY+ 256) * XZ2
     1    +                       DYJ(MY+ 512) * XZ3 + DYJ(MY+ 768) *
     *    XZ4+                       DYJ(MY+1024) * XZ5
          ZJDER = ZJDER + DZJ(MZ     ) * XY1 + DZJ(MZ+ 256) * XY2
     1    +                       DZJ(MZ+ 512) * XY3 + DZJ(MZ+ 768) *
     *    XY4+                       DZJ(MZ+1024) * XY5
C
          XKDER = XKDER + DXK(MX     ) * YZ1 + DXK(MX+ 256) * YZ2
     1    +                       DXK(MX+ 512) * YZ3 + DXK(MX+ 768) *
     *    YZ4+                       DXK(MX+1024) * YZ5
          YKDER = YKDER + DYK(MY     ) * XZ1 + DYK(MY+ 256) * XZ2
     1    +                       DYK(MY+ 512) * XZ3 + DYK(MY+ 768) *
     *    XZ4+                       DYK(MY+1024) * XZ5
          ZKDER = ZKDER + DZK(MZ     ) * XY1 + DZK(MZ+ 256) * XY2
     1    +                       DZK(MZ+ 512) * XY3 + DZK(MZ+ 768) *
     *    XY4+                       DZK(MZ+1024) * XY5
C
 5000 CONTINUE
      RETURN
C
      END
      SUBROUTINE INFIK (XIN,YIN,ZIN,DXI,DYI,DZI,DXK,DYK,DZK,LEN2D,
     #ABDENS,LENBLK)
C
C     ----- FORM INTEGRALS OVER FUNCTIONS -----
C
      IMPLICIT REAL*8 (A-H,O-Z)
C
C     EXTENDED DUMMY XIN,YIN,ZIN,DXI,DYI,DZI,DXK,DYK,DZK,ABDENS
C
C     COMMON /DROOT/  XX,U(5),W(5),NROOTS
      COMMON /ROOTS/  NONZER
      COMMON /TAPES/  IOUT,ICHECK,INPUT,ITAP42,ITAP49
      COMMON /DINDEX/ IJGT(36),IJX(36),IJY(36),IJZ(36)
     1,               KLGT(78),KLX(78),KLY(78),KLZ(78)
     2,               IJDGT(36),KLDGT(36),KDG(10),LDG(10)
      COMMON /DSHLNO/ LIT,LJT,LKT,LLT,LOCI,LOCJ,LOCK,LOCL
     1,               MINI,MINJ,MINK,MINL,MAXI,MAXJ,MAXK,MAXL
     2,               NIJ,IJD,KLD,IJ,KL
CIBM  COMMON /SHELLD/ NATOM(4),NPASS
      COMMON /SHELLD/ XIDER,YIDER,ZIDER,XJDER,YJDER,ZJDER
     2,               XKDER,YKDER,ZKDER,NATOM(4),NPASS
C
      DIMENSION XIN(LEN2D),YIN(LEN2D),ZIN(LEN2D)
      DIMENSION DXI(LEN2D),DYI(LEN2D),DZI(LEN2D)
      DIMENSION DXK(LEN2D),DYK(LEN2D),DZK(LEN2D)
      DIMENSION ABDENS(LENBLK)
C
      RETURN
C
C-----------------------------------------------------FRMIK
C
      ENTRY FRMIK(XIN,YIN,ZIN,DXI,DYI,DZI,DXK,DYK,DZK,LEN2D,
     #ABDENS,LENBLK)
C
      N=0
      GO TO (500,1500,2500,3500,4500),NONZER
C
  500 DO 1000 I=1,IJ
        NX=IJX(I)
        NY=IJY(I)
        NZ=IJZ(I)
        DO 1000 K=1,KL
          MX=NX+KLX(K)
          MY=NY+KLY(K)
          MZ=NZ+KLZ(K)
          N=N+1
          DENSTY=ABDENS(N)
          IF (ABS(DENSTY).LT.1.0D-08) GO TO 1000
          XY=XIN(MX) * YIN(MY) * DENSTY
          XZ=XIN(MX) * ZIN(MZ) * DENSTY
          YZ=YIN(MY) * ZIN(MZ) * DENSTY
C
          XIDER=XIDER + DXI(MX) * YZ
          YIDER=YIDER + DYI(MY) * XZ
          ZIDER=ZIDER + DZI(MZ) * XY
C
          XKDER=XKDER + DXK(MX) * YZ
          YKDER=YKDER + DYK(MY) * XZ
          ZKDER=ZKDER + DZK(MZ) * XY
C
 1000 CONTINUE
      RETURN
C
 1500 DO 2000 I=1,IJ
        NX=IJX(I)
        NY=IJY(I)
        NZ=IJZ(I)
        DO 2000 K=1,KL
          MX=NX+KLX(K)
          MY=NY+KLY(K)
          MZ=NZ+KLZ(K)
          N=N+1
          DENSTY=ABDENS(N)
          IF (ABS(DENSTY).LT.1.0D-08) GO TO 2000
          XY1 = XIN(MX) * YIN(MY) * DENSTY
          XZ1 = XIN(MX) * ZIN(MZ) * DENSTY
          YZ1 = YIN(MY) * ZIN(MZ) * DENSTY
C
          XY2 = XIN(MX+256) * YIN(MY+256) * DENSTY
          XZ2 = XIN(MX+256) * ZIN(MZ+256) * DENSTY
          YZ2 = YIN(MY+256) * ZIN(MZ+256) * DENSTY
C
          XIDER = XIDER + DXI(MX) * YZ1 + DXI(MX+256) * YZ2
          YIDER = YIDER + DYI(MY) * XZ1 + DYI(MY+256) * XZ2
          ZIDER = ZIDER + DZI(MZ) * XY1 + DZI(MZ+256) * XY2
C
          XKDER = XKDER + DXK(MX) * YZ1 + DXK(MX+256) * YZ2
          YKDER = YKDER + DYK(MY) * XZ1 + DYK(MY+256) * XZ2
          ZKDER = ZKDER + DZK(MZ) * XY1 + DZK(MZ+256) * XY2
C
 2000 CONTINUE
      RETURN
C
 2500 DO 3000 I=1,IJ
        NX=IJX(I)
        NY=IJY(I)
        NZ=IJZ(I)
        DO 3000 K=1,KL
          MX=NX+KLX(K)
          MY=NY+KLY(K)
          MZ=NZ+KLZ(K)
          N=N+1
          DENSTY=ABDENS(N)
          IF (ABS(DENSTY).LT.1.0D-08) GO TO 3000
          XY1 = XIN(MX     ) * YIN(MY     ) * DENSTY
          XZ1 = XIN(MX     ) * ZIN(MZ     ) * DENSTY
          YZ1 = YIN(MY     ) * ZIN(MZ     ) * DENSTY
C
          XY2 = XIN(MX+ 256) * YIN(MY+ 256) * DENSTY
          XZ2 = XIN(MX+ 256) * ZIN(MZ+ 256) * DENSTY
          YZ2 = YIN(MY+ 256) * ZIN(MZ+ 256) * DENSTY
C
          XY3 = XIN(MX+ 512) * YIN(MY+ 512) * DENSTY
          XZ3 = XIN(MX+ 512) * ZIN(MZ+ 512) * DENSTY
          YZ3 = YIN(MY+ 512) * ZIN(MZ+ 512) * DENSTY
C
          XIDER = XIDER + DXI(MX     ) * YZ1 + DXI(MX+ 256) * YZ2
     1    +                       DXI(MX+ 512) * YZ3
          YIDER = YIDER + DYI(MY     ) * XZ1 + DYI(MY+ 256) * XZ2
     1    +                       DYI(MY+ 512) * XZ3
          ZIDER = ZIDER + DZI(MZ     ) * XY1 + DZI(MZ+ 256) * XY2
     1    +                       DZI(MZ+ 512) * XY3
C
          XKDER = XKDER + DXK(MX     ) * YZ1 + DXK(MX+ 256) * YZ2
     1    +                       DXK(MX+ 512) * YZ3
          YKDER = YKDER + DYK(MY     ) * XZ1 + DYK(MY+ 256) * XZ2
     1    +                       DYK(MY+ 512) * XZ3
          ZKDER = ZKDER + DZK(MZ     ) * XY1 + DZK(MZ+ 256) * XY2
     1    +                       DZK(MZ+ 512) * XY3
C
 3000 CONTINUE
      RETURN
C
 3500 DO 4000 I=1,IJ
        NX=IJX(I)
        NY=IJY(I)
        NZ=IJZ(I)
        DO 4000 K=1,KL
          MX=NX+KLX(K)
          MY=NY+KLY(K)
          MZ=NZ+KLZ(K)
          N=N+1
          DENSTY=ABDENS(N)
          IF (ABS(DENSTY).LT.1.0D-08) GO TO 4000
          XY1 = XIN(MX     ) * YIN(MY     ) * DENSTY
          XZ1 = XIN(MX     ) * ZIN(MZ     ) * DENSTY
          YZ1 = YIN(MY     ) * ZIN(MZ     ) * DENSTY
C
          XY2 = XIN(MX+ 256) * YIN(MY+ 256) * DENSTY
          XZ2 = XIN(MX+ 256) * ZIN(MZ+ 256) * DENSTY
          YZ2 = YIN(MY+ 256) * ZIN(MZ+ 256) * DENSTY
C
          XY3 = XIN(MX+ 512) * YIN(MY+ 512) * DENSTY
          XZ3 = XIN(MX+ 512) * ZIN(MZ+ 512) * DENSTY
          YZ3 = YIN(MY+ 512) * ZIN(MZ+ 512) * DENSTY
C
          XY4 = XIN(MX+ 768) * YIN(MY+ 768) * DENSTY
          XZ4 = XIN(MX+ 768) * ZIN(MZ+ 768) * DENSTY
          YZ4 = YIN(MY+ 768) * ZIN(MZ+ 768) * DENSTY
C
          XIDER = XIDER + DXI(MX     ) * YZ1 + DXI(MX+ 256) * YZ2
     1    +                       DXI(MX+ 512) * YZ3 + DXI(MX+ 768) *
     *    YZ4
          YIDER = YIDER + DYI(MY     ) * XZ1 + DYI(MY+ 256) * XZ2
     1    +                       DYI(MY+ 512) * XZ3 + DYI(MY+ 768) *
     *    XZ4
          ZIDER = ZIDER + DZI(MZ     ) * XY1 + DZI(MZ+ 256) * XY2
     1    +                       DZI(MZ+ 512) * XY3 + DZI(MZ+ 768) *
     *    XY4
C
          XKDER = XKDER + DXK(MX     ) * YZ1 + DXK(MX+ 256) * YZ2
     1    +                       DXK(MX+ 512) * YZ3 + DXK(MX+ 768) *
     *    YZ4
          YKDER = YKDER + DYK(MY     ) * XZ1 + DYK(MY+ 256) * XZ2
     1    +                       DYK(MY+ 512) * XZ3 + DYK(MY+ 768) *
     *    XZ4
          ZKDER = ZKDER + DZK(MZ     ) * XY1 + DZK(MZ+ 256) * XY2
     1    +                       DZK(MZ+ 512) * XY3 + DZK(MZ+ 768) *
     *    XY4
C
 4000 CONTINUE
      RETURN
C
 4500 DO 5000 I=1,IJ
        NX=IJX(I)
        NY=IJY(I)
        NZ=IJZ(I)
        DO 5000 K=1,KL
          MX=NX+KLX(K)
          MY=NY+KLY(K)
          MZ=NZ+KLZ(K)
          N=N+1
          DENSTY=ABDENS(N)
          IF (ABS(DENSTY).LT.1.0D-08) GO TO 5000
          XY1 = XIN(MX     ) * YIN(MY     ) * DENSTY
          XZ1 = XIN(MX     ) * ZIN(MZ     ) * DENSTY
          YZ1 = YIN(MY     ) * ZIN(MZ     ) * DENSTY
C
          XY2 = XIN(MX+ 256) * YIN(MY+ 256) * DENSTY
          XZ2 = XIN(MX+ 256) * ZIN(MZ+ 256) * DENSTY
          YZ2 = YIN(MY+ 256) * ZIN(MZ+ 256) * DENSTY
C
          XY3 = XIN(MX+ 512) * YIN(MY+ 512) * DENSTY
          XZ3 = XIN(MX+ 512) * ZIN(MZ+ 512) * DENSTY
          YZ3 = YIN(MY+ 512) * ZIN(MZ+ 512) * DENSTY
C
          XY4 = XIN(MX+ 768) * YIN(MY+ 768) * DENSTY
          XZ4 = XIN(MX+ 768) * ZIN(MZ+ 768) * DENSTY
          YZ4 = YIN(MY+ 768) * ZIN(MZ+ 768) * DENSTY
C
          XY5 = XIN(MX+1024) * YIN(MY+1024) * DENSTY
          XZ5 = XIN(MX+1024) * ZIN(MZ+1024) * DENSTY
          YZ5 = YIN(MY+1024) * ZIN(MZ+1024) * DENSTY
C
          XIDER = XIDER + DXI(MX     ) * YZ1 + DXI(MX+ 256) * YZ2
     1    +                       DXI(MX+ 512) * YZ3 + DXI(MX+ 768) *
     *    YZ4+                       DXI(MX+1024) * YZ5
          YIDER = YIDER + DYI(MY     ) * XZ1 + DYI(MY+ 256) * XZ2
     1    +                       DYI(MY+ 512) * XZ3 + DYI(MY+ 768) *
     *    XZ4+                       DYI(MY+1024) * XZ5
          ZIDER = ZIDER + DZI(MZ     ) * XY1 + DZI(MZ+ 256) * XY2
     1    +                       DZI(MZ+ 512) * XY3 + DZI(MZ+ 768) *
     *    XY4+                       DZI(MZ+1024) * XY5
C
          XKDER = XKDER + DXK(MX     ) * YZ1 + DXK(MX+ 256) * YZ2
     1    +                       DXK(MX+ 512) * YZ3 + DXK(MX+ 768) *
     *    YZ4+                       DXK(MX+1024) * YZ5
          YKDER = YKDER + DYK(MY     ) * XZ1 + DYK(MY+ 256) * XZ2
     1    +                       DYK(MY+ 512) * XZ3 + DYK(MY+ 768) *
     *    XZ4+                       DYK(MY+1024) * XZ5
          ZKDER = ZKDER + DZK(MZ     ) * XY1 + DZK(MZ+ 256) * XY2
     1    +                       DZK(MZ+ 512) * XY3 + DZK(MZ+ 768) *
     *    XY4+                       DZK(MZ+1024) * XY5
C
 5000 CONTINUE
      RETURN
      END
      SUBROUTINE ININDX(C,KATOM,KSTART,KNG,KTYPE,KMIN,KMAX,KLOC,
     #IA,DT)
C
C
C
C
      IMPLICIT REAL*8 (A-H,O-Z)
C
C
      REAL*8 C(3,NAT),DT(NNP)
      INTEGER KATOM(NSHELL),KSTART(NSHELL),KNG(NSHELL),KTYPE(NSHELL)
      INTEGER KMIN(NSHELL),KMAX(NSHELL),KLOC(NSHELL),IA(NNP)
      LOGICAL OPEN
      CHARACTER*5 CALTYP
      CHARACTER*6 SCFTYP
C
      COMMON /ISHELL/  II,IATOM,XI,YI,ZI,IGMIN,IGMAX,LIT,MINI,MAXI,LOCI
      COMMON /JSHELL/  JJ,JATOM,XJ,YJ,ZJ,JGMIN,JGMAX,LJT,MINJ,MAXJ,LOCJ
     #,                RR
      COMMON /INDEX/  DENS(100),IJ,IJX(100),IJY(100),IJZ(100)
     #,               IPOINT(100)
      COMMON /INFOA/  NAT,NUM,NNP,NSHELL,NIRRED,NT,NPRIM,MXT,NISO
      COMMON /CNTRL/  IPRINT,NDERIV,INTOUT,INFOUT,OPEN,SCFTYP,CALTYP
      COMMON /COUPLC/ FOCC(5),ALP(5,5),BET(5,5),NTYPES
      COMMON /TAPES/  IOUT,ICHECK,INPUT,ITAP42,ITAP49
C
      DIMENSION IX(20),IY(20),IZ(20),JX(20),JY(20),JZ(20)
C
C                                         X  Y  Z  X  X  Y  Y  Z  Z  X
C                       X  Y  Z  X  X  Y  X  Y  Z  X  X  Y  Y  Z  Z  Y
C              S X Y Z  X  Y  Z  Y  Z  Z  X  Y  Z  Y  Z  X  Z  X  Y  Z
C
      DATA IX /1,5,1,1, 9, 1, 1, 5, 5, 1,13, 1, 1, 9, 9, 5, 1, 5, 1, 5/
      DATA IY /1,1,5,1, 1, 9, 1, 5, 1, 5, 1,13, 1, 5, 1, 9, 9, 1, 5, 5/
      DATA IZ /1,1,1,5, 1, 1, 9, 1, 5, 5, 1, 1,13, 1, 5, 1, 5, 9, 9, 5/
      DATA JX /0,1,0,0, 2, 0, 0, 1, 1, 0, 3, 0, 0, 2, 2, 1, 0, 1, 0, 1/
      DATA JY /0,0,1,0, 0, 2, 0, 1, 0, 1, 0, 3, 0, 1, 0, 2, 2, 0, 1, 1/
      DATA JZ /0,0,0,1, 0, 0, 2, 0, 1, 1, 0, 0, 3, 0, 1, 0, 1, 2, 2, 1/
C
C
C
      DO 1 I=1,NNP
        IA(I)=I*(I-1)/2
    1 CONTINUE
C
      RETURN
C
C-----------------------------------------------------------INDEX
C
      ENTRY INDEXX(C,KATOM,KSTART,KNG,KTYPE,KMIN,KMAX,KLOC,ia,dt)
C
      IATOM=KATOM(II)
      XI=C(1,IATOM)
      YI=C(2,IATOM)
      ZI=C(3,IATOM)
      IGMIN=KSTART(II)
      IGMAX=IGMIN+KNG(II)-1
      LIT=KTYPE(II)
      MINI=KMIN(II)
      MAXI=KMAX(II)
      LOCI=KLOC(II)-MINI
C
C     ----- J ATOM -----
C
      JATOM=KATOM(JJ)
      XJ=C(1,JATOM)
      YJ=C(2,JATOM)
      ZJ=C(3,JATOM)
      JGMIN=KSTART(JJ)
      JGMAX=JGMIN+KNG(JJ)-1
      LJT=KTYPE(JJ)
      MINJ=KMIN(JJ)
      MAXJ=KMAX(JJ)
      LOCJ=KLOC(JJ)-MINJ
C
      RR=(XI-XJ)**2+(YI-YJ)**2+(ZI-ZJ)**2
C
C     ----- WORK OUT INDICES FOR COMBINING 2D INTEGRALS -----
C
      IJ=0
      JMAX=MAXJ
      DO 3 I=MINI,MAXI
        NX=IX(I)
        NY=IY(I)
        NZ=IZ(I)
        IF (II.EQ.JJ) JMAX=I
        DO 2 J=MINJ,JMAX
          IJ=IJ+1
          IJX(IJ)=NX+JX(J)
          IJY(IJ)=NY+JY(J)
          IJZ(IJ)=NZ+JZ(J)
          IPOINT(IJ)=IA(LOCI+I)+LOCJ+J
          DENS(IJ)=DT(IA(LOCI+I)+LOCJ+J)
          IF (II.NE.JJ.OR.I.NE.J) DENS(IJ)=DENS(IJ)*2.0D+00
    2   CONTINUE
    3 CONTINUE
      RETURN
      END
      SUBROUTINE INIT22(IBF2AT,DS,DH,DTOT,FTOT,B,D2S,nbset)
C
C
      REAL*8 DS(NNP,3),DH(NNP,3,NAT),DTOT(3,NAT),FTOT(NAT3,NAT3)
      REAL*8 B(NNP,3,NAT,NBSET),D2S(NNP,6)
      INTEGER IBF2AT(NUM),FCB22(16)
      LOGICAL OPEN
      CHARACTER*5 CALTYP
      CHARACTER*6 SCFTYP
C
      COMMON /TAPES/  IOUT,ICHECK,INPUT
      COMMON /CNTRL/  IPRINT,NDERIV,INTOUT,INFOUT,OPEN,SCFTYP,CALTYP
      common /infoa/  nat,num,nnp,nshell,nirred,nt,nprim,mxt,niso
      common /second/ nat3
      COMMON /TAPE22/ ITAP42,I22(100),IEND22
C
      RETURN
C
C-------------------------------------------------------------WR22A
C
      ENTRY WR22A(IBF2AT,DS,D2S,DH,nbset)
C
C     ----- PREPARE TAPE22 FOR CPHF -----
C
      ITAP42=42
      CALL RFILE(ITAP42)
      IEND22=101
C
      CALL IZERO(I22,100)
C
      I22(2)=NAT
      I22(3)=NUM
      I22(4)=NNP
      I22(5)=NDERIV
      I22(6)=INTOUT
      I22(7)=INFOUT
      I22(8)=NBSET
C
      I22(11)=IEND22
      CALL WWRITW(ITAP42,IBF2AT,NUM,IEND22,IEND22)
C     WRITE(ICHECK,1001) I22(11),(IBF2AT(III), III=1,NUM)
C1001 FORMAT(/'  IBF2AT WRITTEN TO 22 AT WORD ',I8
C    1       /'  IBF2AT:',10I5)
      I22(12)=IEND22
      CALL WWRITW(ITAP42,DS,INTOWP(NNP*3),IEND22,IEND22)
C     WRITE(ICHECK,1002) I22(12)
C1002 FORMAT(/'  SA WRITTEN TO 22 AT WORD ',I8)
C     DO 31 IXYZ=1,3
C31   CALL PRINT(DS(1,IXYZ),NNP,NUM,6)
C
      IF (IAND(INFOUT,2).NE.0) THEN
        I22(13)=IEND22
        CALL WWRITW(ITAP42,D2S,INTOWP(NNP*6),IEND22,IEND22)
      END IF
      I22(14)=IEND22
      CALL WWRITW(ITAP42,DH,INTOWP(NNP*3*NAT),IEND22,IEND22)
C     WRITE(ICHECK,1003) I22(14)
C1003 FORMAT(/'  DH WRITTEN TO 22 AT WORD',I8)
C     DO 2 IAT=1,NAT
C        DO 1 IXYZ=1,3
C           WRITE(ICHECK,3) IAT,IXYZ,(DH(I,IXYZ,IAT),I=1,NNP)
C   1    CONTINUE
C   2 CONTINUE
C   3 FORMAT (//,1X,2I10,/,(10F12.6))
C
C
      RETURN
C
C------------------------------------------------------WR22B
C
      ENTRY WR22B(B,DTOT,FTOT,nbset)
C
      I22(15)=IEND22
      CALL WWRITW(ITAP42,DTOT,INTOWP(3*NAT),IEND22,IEND22)
      IF (NDERIV.EQ.2) THEN
        I22(16)=IEND22
        CALL WWRITW(ITAP42,FTOT,INTOWP(NAT3**2),IEND22,IEND22)
      END IF
      I22(17)=IEND22
CTJL  WRITE(*,*) ' TWO ELECTRON DER INTS WRITTEN TO WORD ',IEND22
CTJL  WRITE(*,*) ' NNP,NAT,NBSET ',NNP,NAT,NBSET
CTJL  CALL PRINT(B(1,3,3,7),28,7,6)
      CALL WWRITW(ITAP42,B,INTOWP(NNP*3*NAT*NBSET),IEND22,IEND22)
CTJL  WRITE(*,*) ' TWO ELECTRON DER INTS LAST WORD + 1',IEND22
CTJL
CTJL  CALL ZERO(B,NNP*3*NAT*NBSET)
CTJL CALL WREADW(ITAP42,B,INTOWP(NNP*3*NAT*NBSET),I22(17),IUNK)
CTJL  CALL PRINT(B(1,3,3,7),28,7,6)
CTJL
C     WRITE(ICHECK,1004) I22(17)
C1004 FORMAT(/'  T MATRIX WRITTEN TO 22 AT WORD ',I8)
C
      I22(1)=IEND22
      CALL WWRITW(ITAP42,I22,100,1,JUNK)
C
      IOUT=3
C     DO 10 I=1,NAT
C        DO 9 J=1,3
C           WRITE (IOUT,1100) I,J
C           DO 8 K=1,NUM
C              IQL=K*(K-1)/2+1
C              IQU=K*(K-1)/2+K
C              WRITE (IOUT,1101) (B(IQ,J,I,1), IQ=IQL,IQU)
C  8        CONTINUE
C  9     CONTINUE
C 10  CONTINUE
C1100 FORMAT(//,' ATOM:',I3,' COORDINATE:',I3,' 2E-'//)
C1101 FORMAT(/,14F9.5)
C
C
CCCC  CALL SWEOF(ITAP42)
C
C     WRITE(ICHECK,1006) (I22(III), III=1,100)
C1006 FORMAT(10I5)
      RETURN
      END
      SUBROUTINE INITB(B,DERINT,LENINT,DT,D,NBSET,IA)
C
C
C
      IMPLICIT REAL*8 (A-H,O-Z)
C
C     EXTENDED DUMMY B,DERINT,DT,D,IA
C
      REAL*8 B(NNP,3,NAT,NBSET),DERINT(LENINT,12),DT(NNP)
      REAL*8 D(NNP,NTYPES),DENS(6)
      INTEGER IA(NUM),M(6)
      LOGICAL OUT,IANDJ,KANDL,SAME
      LOGICAL OPEN,CIONE
      CHARACTER *6 SCFTYP
      CHARACTER*5 CALTYP
C
      COMMON /CENTRE/ NCENTR
      COMMON /CNTRL/  IPRINT,NDERIV,INTOUT,INFOUT,OPEN,SCFTYP,CALTYP
      COMMON /TAPES/  IOUT,ICHECK,INPUT,ITAP42,ITAP49
      COMMON /TCSCF/  OCC1,OCC12,OCC2,SOCC1,SOCC12,SOCC2,ITCSCF
      COMMON /COUPLC/ FOCC(5),ALP(5,5),BET(5,5),NTYPES
      COMMON /INFOA/  NAT,NUM,NNP,NSHELL,NIRRED,NT,NPRIM,MXT,NISO
      COMMON /DMISC/  IANDJ,KANDL,SAME
CIBM  COMMON /SHELLD/ NATOM(4),NPASS
      COMMON /SHELLD/ XIDER,YIDER,ZIDER,XJDER,YJDER,ZJDER
     2,               XKDER,YKDER,ZKDER,NATOM(4),NPASS
      COMMON /DSHLNO/ LIT,LJT,LKT,LLT,LOCI,LOCJ,LOCK,LOCL
     1,               MINI,MINJ,MINK,MINL,MAXI,MAXJ,MAXK,MAXL
     2,               NIJ,IJD,KLD,IJ,KL
CYO
C     COMMON /D2LAG/  NOABCD,NTABCD,ISDPOS(78),SDINT(78)
CYO
C
C     DIMENSION IAT(12)
C
      DIMENSION NUMC(4)
C
      EQUIVALENCE (DENS(1),DIJ),(DENS(2),DKL),(DENS(3),DJL)
      EQUIVALENCE (DENS(4),DIL),(DENS(5),DIK),(DENS(6),DJK)
      EQUIVALENCE (M(1),MKL),(M(2),MIJ),(M(3),MIK)
      EQUIVALENCE (M(4),MJK),(M(5),MJL),(M(6),MIL)
C
      DATA NUMC/4,3,3,2/
C
      CIONE=.FALSE.
      IF (CALTYP.EQ.'CI    ' .AND. NDERIV.EQ.1) CIONE=.TRUE.
      IF (CALTYP.EQ.'GVBCI ' .AND. NDERIV.EQ.1) CIONE=.TRUE.
      IF(SCFTYP(1:5).EQ.'CLSCF') ASSIGN 1 TO JUMP
      IF(SCFTYP(1:5).EQ.'HSOP ') ASSIGN 2 TO JUMP
      IF(SCFTYP(1:5).EQ.'GRSCF') ASSIGN 4 TO JUMP
      IF(SCFTYP(1:5).EQ.'GRSCF'.AND.CALTYP(1:5).EQ.'CI   '.AND.
     #NBSET.NE.1) ASSIGN 3 TO JUMP
      IF(SCFTYP(1:5).EQ.'TCSCF') ASSIGN 5 TO JUMP
      IF(SCFTYP(1:5).EQ.'MCSCF') ASSIGN 6 TO JUMP
      IF(ITCSCF.EQ.1) GO TO 99
C
C     ----- ZERO B MATRICES -----
C
      CALL ZERO(B,NNP*3*NAT*NBSET)
C
C
C     ----- INITIALIZE MBMAT ROUTINES -----
C
      CALL INB(B,DERINT,LENINT,NBSET)
C
CTJL  WRITE(*,*) ' MIJ,MKL,MJL,MIL,MIK,MJK '
      RETURN
C
   99 STOP  ' PLEASE GO THROUGH TFOCK PROGRAM.'
C
C---------------------------------------------------------MAKSKB
C
      ENTRY MAKSKB(II,JJ,KK,LL,Q4,B,DERINT,LENINT,DT,D,NBSET,IA)
CTJL  WRITE(*,*) ' IN MAKSB Q4 ',Q4
C
      NN=0
C
      IF (NPASS.LT.1.OR.NPASS.GT.4) THEN
        WRITE (ICHECK,901) NPASS
  901   FORMAT (//,' DERIV: ERROR IN NPASS IN MAKSKB:',I8,//)
        STOP ' BAD NPASS IN MAKSKB'
      END IF
      NCENTR=NUMC(NPASS)
C
CYO
CYO      INITIALIZE /D2LAG/ FOR SECOND-ORDER B0 MATRICES
CYO
C     IF (.NOT.CITWO) GO TO 112
C     IF (NPASS.EQ.1) NOABCD=4
C     IF (NPASS.EQ.2) NOABCD=3
C     IF (NPASS.EQ.3) NOABCD=3
C     IF (NPASS.EQ.4) NOABCD=2
C     I0=1
C     DO 110 I=1,NOABCD
C     IAT(I0  ) = (NATOM(I)-1)*3+1
C     IAT(I0+1) = IAT(I0  )+1
C     IAT(I0+2) = IAT(I0+1)+1
C 110 I0=I0+3
C     K=0
C     DO 111 I=1,NOABCD*3
C     DO 111 J=1,I
C     K=K+1
C     I0=IAT(I)
C     J0=IAT(J)
C     IJ0=I0*(I0-1)/2+J0
C     IF (I0.LT.J0) IJ0=J0*(J0-1)/2+I0
C 111 ISDPOS(K)=IJ0
C     NTABCD=K
C 112 CONTINUE
CYO
      DO 1700 I=MINI,MAXI
        DO 1600 J=MINJ,MAXJ
          LMAX=MAXL
          DO 1500 K=MINK,MAXK
            IF (KANDL) LMAX=K
            DO 1400 L=MINL,LMAX
              NN=NN+1
              I1=LOCI+I
              I2=LOCJ+J
              I3=LOCK+K
              I4=LOCL+L
              IF(I1.GE.I2) GO TO 700
              N=I1
              I1=I2
              I2=N
  700         IF(I3.GE.I4) GO TO 800
              N=I3
              I3=I4
              I4=N
  800         IF(I1-I3) 900,1000,1100
  900         N=I1
              I1=I3
              I3=N
              N=I2
              I2=I4
              I4=N
              GO TO 1100
 1000         IF(I2.LT.I4) GO TO 900
 1100         CONTINUE
              MIJ=IA(I1)+I2
              MIK=IA(I1)+I3
              MIL=IA(I1)+I4
              MKL=IA(I3)+I4
              IF(I2.LT.I3) GO TO 1110
              MJK=IA(I2)+I3
              MJL=IA(I2)+I4
              GO TO 1130
 1110         MJK=IA(I3)+I2
              IF(I2.LT.I4) GO TO 1120
              MJL=IA(I2)+I4
              GO TO 1130
 1120         MJL=IA(I4)+I2
 1130         CONTINUE
C
CTJL  WRITE(*,*)  MIJ,MKL,MJL,MIL,MIK,MJK
              FACTOR=Q4
              FFACTR=Q4
              IF(I1.EQ.I2) FACTOR=FACTOR*0.5
              IF(I3.EQ.I4) FACTOR=FACTOR*0.5
C
C     ----- THIS FACTOR OF TWO IS NEEDED BECAUSE ONLY GENERATE
C               ONE OF TWO POSSIBLE DERIVATIVES OF [II,KL]     -----
C
              IF (IANDJ.AND.I.EQ.J) THEN
                FACTOR=FACTOR+FACTOR
                FFACTR=FFACTR+FFACTR
              END IF
C
C     ----- THE FOLLOWING SECTION MAKES THE B MATRIX SKELETON -----
C
C     IF (.NOT.CITWO) GO TO 1200
C     IF (I1.EQ.I3.AND.I2.EQ.I4) FFACTR=FFACTR+FFACTR
C     CALL MSDMAT (NN)
C     CALL WRGRAD (BUFF,I1,I2,I3,I4,NN,FFACTR)
C1200 CONTINUE
C
cets added 6 to folowing
              GO TO JUMP, (1,2,3,4,5,6)
    1         CONTINUE
C
C     ----- CLOSED SHELL SINGLET -----
C
              DIJ = DT(MIJ) * FACTOR * 4.0
              DKL = DT(MKL) * FACTOR * 4.0
              DJL =-DT(MJL) * FACTOR
              DIL =-DT(MIL) * FACTOR
              DIK =-DT(MIK) * FACTOR
              DJK =-DT(MJK) * FACTOR
C
              CALL MBMAT(DENS,M,NN,1,b,derint,lenint,nbset)
              GO TO 1400
C
    2         CONTINUE
C
C     ----- HIGH-SPIN OPEN-SHELL -----
C
              DIJ = DT(MIJ) * FACTOR * 4.0
              DKL = DT(MKL) * FACTOR * 4.0
              DJL =-D(MJL,1) * FACTOR * 2.0
              DIL =-D(MIL,1) * FACTOR * 2.0
              DIK =-D(MIK,1) * FACTOR * 2.0
              DJK =-D(MJK,1) * FACTOR * 2.0
C
              CALL MBMAT(DENS,M,NN,1,b,derint,lenint,nbset)
C
              FACTOR=FACTOR+FACTOR
C
              DJL = D(MJL,2) * FACTOR
              DIL = D(MIL,2) * FACTOR
              DIK = D(MIK,2) * FACTOR
              DJK = D(MJK,2) * FACTOR
C
              CALL MBMAT2(DENS,M,NN,2,b,derint,lenint,nbset)
C
              GO TO 1400
C
    3         CONTINUE
C
C     ----- GENERAL OPEN SHELL -----
C
              DIJ = DT(MIJ) * FACTOR * 4.0
              DKL = DT(MKL) * FACTOR * 4.0
              DJL =-DT(MJL) * FACTOR
              DIL =-DT(MIL) * FACTOR
              DIK =-DT(MIK) * FACTOR
              DJK =-DT(MJK) * FACTOR
              CALL MBMAT(DENS,M,NN,NBSET,b,derint,lenint,nbset)
C
    4         FAC1=FACTOR+FACTOR
              FAC2=FAC1+FAC1
              DO 1350 ITYP=1,NTYPES
                DIJ = 0.0
                DKL = 0.0
                DJL = 0.0
                DIL = 0.0
                DIK = 0.0
                DJK = 0.0
                DO 1340 JTYP=1,NTYPES
                  DIJ = DIJ + D(MIJ,JTYP) * ALP(ITYP,JTYP)
                  DKL = DKL + D(MKL,JTYP) * ALP(ITYP,JTYP)
                  DJL = DJL + D(MJL,JTYP) * BET(ITYP,JTYP)
                  DIL = DIL + D(MIL,JTYP) * BET(ITYP,JTYP)
                  DIK = DIK + D(MIK,JTYP) * BET(ITYP,JTYP)
 1340           DJK = DJK + D(MJK,JTYP) * BET(ITYP,JTYP)
                DIJ = DIJ * FAC2
                DKL = DKL * FAC2
                DJL = DJL * FAC1
                DIL = DIL * FAC1
                DIK = DIK * FAC1
                DJK = DJK * FAC1
                CALL MBMAT(DENS,M,NN,ITYP,b,derint,lenint,nbset)
 1350         CONTINUE
C
              GO TO 1400
C
    5         CONTINUE
C
C     ----- TWO-CONFIGURATION SCF (GVB) -----
C
              FAC1=FACTOR+FACTOR
              FAC2=FAC1+FAC1
      DO 1370 ITYP=1,NTYPES
        DIJ = D(MIJ,ITYP) * FAC2
        DKL = D(MKL,ITYP) * FAC2
        DJL = D(MJL,ITYP) * FAC1
        DIL = D(MIL,ITYP) * FAC1
        DIK = D(MIK,ITYP) * FAC1
        DJK = D(MJK,ITYP) * FAC1
CTJL    IF(ITYP.EQ.1) WRITE(*,*) '  DENS',DENS
        CALL MBMATC(DENS,M,NN,ITYP,b,derint,lenint,nbset)
C     JTYP=(ITYP-1)*2+1
C     KTYP=JTYP+1
C     CALL MBMATC(B1(1,1,JTYP),B1(1,2,JTYP),B1(1,3,JTYP),B2(1,1,JTYP)
C    1,           B1(1,1,KTYP),B1(1,2,KTYP),B1(1,3,KTYP),B2(1,1,KTYP)
C    2,           NNP, MIJ,MKL,MJL,MIL,MIK,MJK, NN
C    3,           DIJ,DKL,DJL,DIL,DIK,DJK)
 1370 CONTINUE
C
      IF (.NOT.CIONE) GO TO 1400
      DIJ = DT(MIJ) * FACTOR * 4.0
      DKL = DT(MKL) * FACTOR * 4.0
      DJL =-DT(MJL) * FACTOR
      DIL =-DT(MIL) * FACTOR
      DIK =-DT(MIK) * FACTOR
      DJK =-DT(MJK) * FACTOR
      CALL MBMAT (DENS,M,NN,NBSET,b,derint,lenint,nbset)
C
      GO TO 1400
C
C
    6         CONTINUE
C
C     ----- MULTI-CONFIGURATION SCF -----
C
C
              STOP
C     IF (.NOT.CIONE) GO TO 7
C     DIJ = DT(MIJ) * FACTOR * 4.0
C     DKL = DT(MKL) * FACTOR * 4.0
C     DJL =-DT(MJL) * FACTOR
C     DIL =-DT(MIL) * FACTOR
C     DIK =-DT(MIK) * FACTOR
C     DJK =-DT(MJK) * FACTOR
C     CALL MBMAT (B1(1,1,1),B1(1,2,1),B1(1,3,1),B2(1,1,1)
C    1,           NNP, MIJ,MKL,MJL,MIL,MIK,MJK, NN
C    2,           DIJ,DKL,DJL,DIL,DIK,DJK)
CC
C   7 IF ( CITWO ) GO TO 1400
C     FACTOR=Q4
C     IF (IANDJ.AND.I.EQ.J) FACTOR=FACTOR+FACTOR
C     IF (I1.EQ.I3.AND.I2.EQ.I4) FACTOR=FACTOR+FACTOR
C     CALL WRGRAD (BUFF,I1,I2,I3,I4,NN,FACTOR)
C
C
 1400       CONTINUE
 1500     CONTINUE
 1600   CONTINUE
 1700 CONTINUE
      RETURN
      END
      SUBROUTINE INMIJK(XIN,YIN,ZIN,DXI,DYI,DZI,DXJ,DYJ,DZJ,DXK,
     #DYK,DZK,LEN2D,XIDINT,YIDINT,ZIDINT,XJDINT,
     #YJDINT,ZJDINT,XKDINT,YKDINT,ZKDINT,LENINT)
C
C     ----- FORM INTEGRALS OVER FUNCTIONS -----
C
      IMPLICIT REAL*8 (A-H,O-Z)
C
C     EXTENDED DUMMY XIN,YIN,ZIN,DXI,DYI,DZI,DXJ,DYJ,DZJ,DXK,DYK,DZK
C    #,              XIDINT,YIDINT,ZIDINT,XJDINT,YJDINT,ZJDINT
C    #,              XKDINT,YKDINT,ZKDINT
C
      COMMON /ROOTS/  NONZER
      COMMON /TAPES/  IOUT,ICHECK,INPUT,ITAP42,ITAP49
      COMMON /DINDEX/ IJGT(36),IJX(36),IJY(36),IJZ(36)
     1,               KLGT(78),KLX(78),KLY(78),KLZ(78)
     2,               IJDGT(36),KLDGT(36),KDG(10),LDG(10)
      COMMON /DSHLNO/ LIT,LJT,LKT,LLT,LOCI,LOCJ,LOCK,LOCL
     1,               MINI,MINJ,MINK,MINL,MAXI,MAXJ,MAXK,MAXL
     2,               NIJ,IJD,KLD,IJ,KL
CIBM  COMMON /SHELLD/ NATOM(4),NPASS
      COMMON /SHELLD/ XIDER,YIDER,ZIDER,XJDER,YJDER,ZJDER
     2,               XKDER,YKDER,ZKDER,NATOM(4),NPASS
C
      DIMENSION XIN(LEN2D),YIN(LEN2D),ZIN(LEN2D)
      DIMENSION DXI(LEN2D),DYI(LEN2D),DZI(LEN2D)
      DIMENSION DXJ(LEN2D),DYJ(LEN2D),DZJ(LEN2D)
      DIMENSION DXK(LEN2D),DYK(LEN2D),DZK(LEN2D)
      DIMENSION XIDINT(LENINT),YIDINT(LENINT),ZIDINT(LENINT)
      DIMENSION XJDINT(LENINT),YJDINT(LENINT),ZJDINT(LENINT)
      DIMENSION XKDINT(LENINT),YKDINT(LENINT),ZKDINT(LENINT)
      RETURN
C
C-----MAKIJK----------------------------------------------MAKIJK
C
      ENTRY MAKIJK (XIN,YIN,ZIN,DXI,DYI,DZI,DXJ,DYJ,DZJ,DXK,
     #DYK,DZK,LEN2D,XIDINT,YIDINT,ZIDINT,XJDINT,
     #YJDINT,ZJDINT,XKDINT,YKDINT,ZKDINT,LENINT)
C
      IOFSET=0
C
      DO 2 IROOT=1,NONZER
        N=0
        DO 1 I=1,IJ
          NX=IJX(I) + IOFSET
          NY=IJY(I) + IOFSET
          NZ=IJZ(I) + IOFSET
          DO 1 K=1,KL
            MX=NX+KLX(K)
            MY=NY+KLY(K)
            MZ=NZ+KLZ(K)
            N=N+1
            X=XIN(MX)
            Y=YIN(MY)
            Z=ZIN(MZ)
            XY=X*Y
            XZ=X*Z
            YZ=Y*Z
            XI=DXI(MX)
            XJ=DXJ(MX)
            XK=DXK(MX)
            YI=DYI(MY)
            YJ=DYJ(MY)
            YK=DYK(MY)
            ZI=DZI(MZ)
            ZJ=DZJ(MZ)
            ZK=DZK(MZ)
C
            XIDINT(N)=XIDINT(N) + XI * YZ
            XJDINT(N)=XJDINT(N) + XJ * YZ
            XKDINT(N)=XKDINT(N) + XK * YZ
            YIDINT(N)=YIDINT(N) + YI * XZ
            YJDINT(N)=YJDINT(N) + YJ * XZ
            YKDINT(N)=YKDINT(N) + YK * XZ
            ZIDINT(N)=ZIDINT(N) + ZI * XY
            ZJDINT(N)=ZJDINT(N) + ZJ * XY
            ZKDINT(N)=ZKDINT(N) + ZK * XY
C
C
    1   CONTINUE
        IOFSET=IOFSET+256
    2 CONTINUE
      RETURN
C
C-----MAKIJ----------------------------------------------MAKIJ
C
      ENTRY MAKIJ (XIN,YIN,ZIN,DXI,DYI,DZI,DXJ,DYJ,DZJ,
     #LEN2D,XIDINT,YIDINT,ZIDINT,XJDINT,
     #YJDINT,ZJDINT,LENINT)
C
      IOFSET=0
C
      DO 4 IROOT=1,NONZER
        N=0
        DO 3 I=1,IJ
          NX=IJX(I) + IOFSET
          NY=IJY(I) + IOFSET
          NZ=IJZ(I) + IOFSET
          DO 3 K=1,KL
            MX=NX+KLX(K)
            MY=NY+KLY(K)
            MZ=NZ+KLZ(K)
            N=N+1
            X=XIN(MX)
            Y=YIN(MY)
            Z=ZIN(MZ)
            XY=X*Y
            XZ=X*Z
            YZ=Y*Z
            XI=DXI(MX)
            XJ=DXJ(MX)
            YI=DYI(MY)
            YJ=DYJ(MY)
            ZI=DZI(MZ)
            ZJ=DZJ(MZ)
C
            XIDINT(N)=XIDINT(N) + XI * YZ
            XJDINT(N)=XJDINT(N) + XJ * YZ
            YIDINT(N)=YIDINT(N) + YI * XZ
            YJDINT(N)=YJDINT(N) + YJ * XZ
            ZIDINT(N)=ZIDINT(N) + ZI * XY
            ZJDINT(N)=ZJDINT(N) + ZJ * XY
C
C
    3   CONTINUE
        IOFSET=IOFSET+256
    4 CONTINUE
      RETURN
C
C-----MAKIK-----------------------------------------------MAKIK
C
      ENTRY MAKIK(XIN,YIN,ZIN,DXI,DYI,DZI,DXK,DYK,DZK,
     #LEN2D,XIDINT,YIDINT,ZIDINT,XJDINT,
     #YJDINT,ZJDINT,LENINT)
C
      IOFSET=0
C
      DO 6 IROOT=1,NONZER
        N=0
        DO 5 I=1,IJ
          NX=IJX(I) + IOFSET
          NY=IJY(I) + IOFSET
          NZ=IJZ(I) + IOFSET
          DO 5 K=1,KL
            MX=NX+KLX(K)
            MY=NY+KLY(K)
            MZ=NZ+KLZ(K)
            N=N+1
            X=XIN(MX)
            Y=YIN(MY)
            Z=ZIN(MZ)
            XY=X*Y
            XZ=X*Z
            YZ=Y*Z
            XI=DXI(MX)
            XK=DXK(MX)
            YI=DYI(MY)
            YK=DYK(MY)
            ZI=DZI(MZ)
            ZK=DZK(MZ)
C
C     ----- NB. FOR CONVENIENCE, PUT DERIVATIVE INTEGRAL WITH
C           RESPECT TO ATOM K IN J ARRAYS.
C
            XIDINT(N)=XIDINT(N) + XI * YZ
            XJDINT(N)=XJDINT(N) + XK * YZ
            YIDINT(N)=YIDINT(N) + YI * XZ
            YJDINT(N)=YJDINT(N) + YK * XZ
            ZIDINT(N)=ZIDINT(N) + ZI * XY
            ZJDINT(N)=ZJDINT(N) + ZK * XY
C
C
    5   CONTINUE
        IOFSET=IOFSET+256
    6 CONTINUE
      RETURN
C
C
C-----MAKI----------------------------------------------MAKI
C
      ENTRY MAKI(XIN,YIN,ZIN,DXI,DYI,DZI,
     #LEN2D,XIDINT,YIDINT,ZIDINT,lenint)
C
      IOFSET=0
C
      DO 8 IROOT=1,NONZER
        N=0
        DO 7 I=1,IJ
          NX=IJX(I) + IOFSET
          NY=IJY(I) + IOFSET
          NZ=IJZ(I) + IOFSET
          DO 7 K=1,KL
            MX=NX+KLX(K)
            MY=NY+KLY(K)
            MZ=NZ+KLZ(K)
            N=N+1
            X=XIN(MX)
            Y=YIN(MY)
            Z=ZIN(MZ)
            XY=X*Y
            XZ=X*Z
            YZ=Y*Z
            XI=DXI(MX)
            YI=DYI(MY)
            ZI=DZI(MZ)
C
            XIDINT(N)=XIDINT(N) + XI * YZ
            YIDINT(N)=YIDINT(N) + YI * XZ
            ZIDINT(N)=ZIDINT(N) + ZI * XY
C
C
    7   CONTINUE
        IOFSET=IOFSET+256
    8 CONTINUE
      RETURN
      END
      SUBROUTINE INSHEL(KATOM,C,KSTART,KNG,KTYPE,KMIN,KMAX,KLOC,
     #EX,CS)
C
C
C MODIFIED 25 AUGUST 1983 AT BRL TO ACCOMODATE VARIABLE DIMENSIONS
C OF HONDO ARRAYS.                                        PWS
C
      IMPLICIT REAL*8 (A-H,O-Z)
C
C     EXTENDED DUMMY KATOM,C,KSTART,KNG,KTYPE,KMIN,KMAX,KLOC,EX,CS
C
      REAL*8 C(3,NAT),EX(NPRIM),CS(NPRIM)
      INTEGER KATOM(NSHELL),KSTART(NSHELL),KNG(NSHELL),KTYPE(NSHELL)
      INTEGER KMIN(NSHELL),KMAX(NSHELL),KLOC(NSHELL)
      LOGICAL IANDJ,KANDL,SAME,XZERO,YZERO,ZZERO
      LOGICAL KSKIP,IXCORD,IYCORD,IZCORD,ISSSS
      LOGICAL IPSSS,IPSPS,IPPSS,IPPPP
C
      COMMON /TAPES/  IOUT,ICHECK,INPUT,ITAP42,ITAP49
      COMMON /LOCSYM/ NXYZ,IXCORD,IYCORD,IZCORD,ISSSS
     1,               IPSSS,IPSPS,IPPSS,IPPPP,IWHICH
      COMMON /OUTPUT/ NPRINT,ITOL,ICUT,NORMF,NORMP,NOPK
      COMMON /INFOA/  NAT,NUM,NNP,NSHELL,NIRRED,NT,NPRIM,MXT,NISO
      COMMON /ROOT/   XX,U(9),W(9),NROOTS
      COMMON /DSHLNO/ LIT,LJT,LKT,LLT,LOCI,LOCJ,LOCK,LOCL
     1,               MINI,MINJ,MINK,MINL,MAXI,MAXJ,MAXK,MAXL
     2,               NIJ,IJD,KLD,IJ,KL
      COMMON /DINDEX/ IJGT(36),IJX(36),IJY(36),IJZ(36)
     1,               KLGT(78),KLX(78),KLY(78),KLZ(78)
     2,               IJDGT(36),KLDGT(36),KDG(10),LDG(10)
      COMMON /DSHLNF/ GA(10),CSA(10),CPA(10),CDA(10)
     1,               GB(10),CSB(10),CPB(10),CDB(10)
     1,               GC(10),CSC(10),CPC(10),CDC(10)
     1,               GD(10),CSD(10),CPD(10),CDD(10)
     1,               AX,AY,AZ,BX,BY,BZ,RAB,CX,CY,CZ,DX,DY,DZ,RCD
     1,               NGA,NGB,NGC,NGD
      COMMON /DMISC/  IANDJ,KANDL,SAME
      COMMON /SHELL/  ISH,JSH,KSH,LSH
CIBM  COMMON /SHELLD/ NATOM(4),NPASS
      COMMON /SHELLD/ XIDER,YIDER,ZIDER,XJDER,YJDER,ZJDER
     2,               XKDER,YKDER,ZKDER,NATOM(4),NPASS
      COMMON /GEOINF/ XIMXJ,YIMYJ,ZIMZJ,XKMXL,YKMYL,ZKMZL
     1,               XAMXB,YAMYB,ZAMZB
      COMMON /EXPNTS/ EIIA,EJIA,EKIB,EIJIA,EKLIB,RHO,RHOTSQ
     1,               EI,EJ,EK,A,B
C
      DIMENSION IX(10),IY(10),IZ(10),LX(20),LY(20),LZ(20)
     1,         KX(10),KY(10),KZ(10),JX(10),JY(10),JZ(10)
C
      DATA KX / 1,65, 1, 1,129, 1, 1,65,65, 1/
      DATA KY / 1, 1,65, 1, 1,129, 1,65, 1,65/
      DATA KZ / 1, 1, 1,65, 1, 1,129, 1,65,65/
      DATA JX / 0,16, 0, 0,32, 0, 0,16,16, 0/
      DATA JY / 0, 0,16, 0, 0,32, 0,16, 0,16/
      DATA JZ / 0, 0, 0,16, 0, 0,32, 0,16,16/
      DATA LX / 0, 4, 0, 0, 8, 0, 0, 4, 4, 0
     1,        12, 0, 0, 8, 8, 4, 0, 4, 0, 4/
      DATA LY / 0, 0, 4, 0, 0, 8, 0, 4, 0, 4
     1,        0, 12, 0, 4, 0, 8, 8, 0, 4, 4/
      DATA LZ / 0, 0, 0, 4, 0, 0, 8, 0, 4, 4
     1,        0, 0, 12, 0, 4, 0, 4, 8, 8, 4/
      DATA IX / 0, 1, 0, 0, 2, 0, 0, 1, 1, 0/
      DATA IY / 0, 0, 1, 0, 0, 2, 0, 1, 0, 1/
      DATA IZ / 0, 0, 0, 1, 0, 0, 2, 0, 1, 1/
C
C
      RETURN
C
C-----------------------------------------------------------DSHELL
C
      ENTRY DSHELL(KATOM,C,KSTART,KNG,KTYPE,KMIN,KMAX,KLOC,ex,cs)
C
C
C     ----- PERMUTE ISH AND JSH SHELLS, FOR THEIR TYPE
C
      IANDJ=ISH.EQ.JSH
      INU=ISH
      JNU=JSH
C
C     ----- ISHELL
C
      I=KATOM(INU)
      AX=C(1,I)
      AY=C(2,I)
      AZ=C(3,I)
      I1=KSTART(INU)
      I2=I1+KNG(INU)-1
      LIT=KTYPE(INU)
      MINI=KMIN(INU)
      MAXI=KMAX(INU)
      LOCI=KLOC(INU)-MINI
      NGA=0
      DO 50 I=I1,I2
        NGA=NGA+1
        GA(NGA)=EX(I)
        CSA(NGA)=CS(I)
   50 CONTINUE
C
C     ----- JSHELL
C
      J=KATOM(JNU)
      BX=C(1,J)
      BY=C(2,J)
      BZ=C(3,J)
      XIMXJ=AX-BX
      YIMYJ=AY-BY
      ZIMZJ=AZ-BZ
      J1=KSTART(JNU)
      J2=J1+KNG(JNU)-1
      LJT=KTYPE(JNU)
      MINJ=KMIN(JNU)
      MAXJ=KMAX(JNU)
      LOCJ=KLOC(JNU)-MINJ
      NGB=0
      DO 100 J=J1,J2
        NGB=NGB+1
        GB(NGB)=EX(J)
        CSB(NGB)=CS(J)
  100 CONTINUE
      RAB=((AX-BX)**2+(AY-BY)**2+(AZ-BZ)**2)
C
C     ----- PREPARE INDICES FOR PAIRS OF (I,J) FUNCTIONS
C
      IJ=0
      IJD=0
      JMAX=MAXJ
      DO 150 I=MINI,MAXI
        NX=IX(I)
        NY=IY(I)
        NZ=IZ(I)
C     IF(IANDJ) JMAX=I
        DO 150 J=MINJ,JMAX
          IJ=IJ+1
          IJX(IJ)=NX+JX(J)
          IJY(IJ)=NY+JY(J)
          IJZ(IJ)=NZ+JZ(J)
  150 CONTINUE
      CALL DPRIM
      IF (NIJ.EQ.0) RETURN
C
C     ---- K AND L SHELLS -----
C
      KANDL=KSH.EQ.LSH
      SAME=ISH.EQ.KSH.AND.JSH.EQ.LSH
C
C     ----- KSHELL
C
      K=KATOM(KSH)
      CX=C(1,K)
      CY=C(2,K)
      CZ=C(3,K)
      K1=KSTART(KSH)
      K2=K1+KNG(KSH)-1
      LKT=KTYPE(KSH)
      MINK=KMIN(KSH)
      MAXK=KMAX(KSH)
      LOCK=KLOC(KSH)-MINK
      NGC=0
      DO 250 K=K1,K2
        NGC=NGC+1
        GC(NGC)=EX(K)
        CSC(NGC)=CS(K)
  250 CONTINUE
C
C     ----- LSHELL
C
      L=KATOM(LSH)
      DX=C(1,L)
      DY=C(2,L)
      DZ=C(3,L)
      XZERO=(ABS(AX).LT.1.0E-6).AND.(ABS(BX).LT.1.0E-6).AND.
     1(ABS(CX).LT.1.0E-6).AND.(ABS(DX).LT.1.0E-6).AND.IXCORD
      YZERO=(ABS(AY).LT.1.0E-6).AND.(ABS(BY).LT.1.0E-6).AND.
     1(ABS(CY).LT.1.0E-6).AND.(ABS(DY).LT.1.0E-6).AND.IYCORD
      ZZERO=(ABS(AZ).LT.1.0E-6).AND.(ABS(BZ).LT.1.0E-6).AND.
     1(ABS(CZ).LT.1.0E-6).AND.(ABS(DZ).LT.1.0E-6).AND.IZCORD
C
      NXYZ=0
      IF (XZERO) NXYZ=4
      IF (XZERO.AND.YZERO) NXYZ=8
C
      XKMXL=CX-DX
      YKMYL=CY-DY
      ZKMZL=CZ-DZ
      L1=KSTART(LSH)
      L2=L1+KNG(LSH)-1
      LLT=KTYPE(LSH)
      ISSSS=.FALSE.
      IPSSS=.FALSE.
      IPSPS=.FALSE.
      IPPSS=.FALSE.
      IZUZ=LLT+LKT+LJT+LIT
      MZUZ=LLT+LKT
      IF (IZUZ.GT.6) GO TO 983
      IF (IZUZ.EQ.4) THEN
        ISSSS=.TRUE.
      ELSE IF (IZUZ.EQ.5) THEN
        IPSSS=.TRUE.
      ELSE IF (MZUZ.EQ.3) THEN
        IPSPS=.TRUE.
      ELSE IF (MZUZ.EQ.4.AND.LLT.EQ.2.AND.(.NOT.KANDL)) THEN
        IPPSS=.TRUE.
      ELSE IF (LIT.EQ.2.AND.LJT.EQ.2.AND.(.NOT.IANDJ)) THEN
        IPPSS=.TRUE.
      END IF
983   CONTINUE
      MINL=KMIN(LSH)
      MAXL=KMAX(LSH)
      LOCL=KLOC(LSH)-MINL
      NGD=0
      DO 300 L=L1,L2
        NGD=NGD+1
        GD(NGD)=EX(L)
        CSD(NGD)=CS(L)
  300 CONTINUE
      NROOTS=(LIT+LJT+LKT+LLT-1)/2
      RCD=((CX-DX)**2+(CY-DY)**2+(CZ-DZ)**2)
C
C     ----- PREPARE INDICES FOR PAIRS OF (K,L) FUNCTIONS
C
      KL=0
      KLD=0
      LMAX=MAXL
      DO 350 K=MINK,MAXK
        NX=KX(K)
        NY=KY(K)
        NZ=KZ(K)
        IF (KANDL) LMAX=K
        DO 350 L=MINL,LMAX
          KL=KL+1
          KLX(KL)=NX+LX(L)
          KLY(KL)=NY+LY(L)
          KLZ(KL)=NZ+LZ(L)
  350 CONTINUE
      RETURN
      END
      SUBROUTINE INWRIT(DERINT,LENINT,IBUF,LENIBF,BUF,LENBUF,IA,
     #ITAP18,ITAP19,NAT,NUM,NNP)
C
C
C
      IMPLICIT REAL*8 (A-H,O-Z)
C
C     EXTENDED DUMMY DERINT,IBUF,BUF,IA
C
      LOGICAL IANDJ,KANDL,SAME
C
      COMMON /TAPES/  IOUT,ICHECK,INPUT,ITAP42,ITAP49
      COMMON /DMISC/  IANDJ,KANDL,SAME
CIBM  COMMON /SHELLD/ NATOM(4),NPASS
      COMMON /SHELLD/ XIDER,YIDER,ZIDER,XJDER,YJDER,ZJDER
     2,               XKDER,YKDER,ZKDER,NATOM(4),NPASS
      COMMON /DSHLNO/ LIT,LJT,LKT,LLT,LOCI,LOCJ,LOCK,LOCL
     1,               MINI,MINJ,MINK,MINL,MAXI,MAXJ,MAXK,MAXL
     2,               NIJ,IJD,KLD,IJ,KL
C
      DIMENSION IA(1),DERINT(LENINT,9),IBUF(LENIBF),BUF(LENBUF)
C
      NUMI=2
      NUMR=0
      RETURN
C
C-----WRITE------------------------------------------------WRITE
C
      ENTRY WRITE(II,JJ,KK,LL,Q4)
C
      NN=0
C
      IF (NPASS.LT.1.OR.NPASS.GT.4) THEN
        WRITE(ICHECK,901) NPASS
  901   FORMAT (//,' DERIV  ERROR IN MAKSKB, NPASS=',I5,//)
        STOP ' BAD NPASS IN MAKSKB'
      END IF
C
      IF (NPASS.EQ.1) NOABCD=4
      IF (NPASS.EQ.2) NOABCD=3
      IF (NPASS.EQ.3) NOABCD=3
      IF (NPASS.EQ.4) NOABCD=2
C
C     ----- CHECK FOR TWO-CENTER INTEGRALS LABELED AS THREE -----
C
      IF (NOABCD.EQ.3) THEN
        IF (NATOM(1).EQ.NATOM(2)) THEN
          DO 2 J=1,3
            DO 1 I=1,IJ*KL
              DERINT(I,J)=DERINT(I,J)+DERINT(I,J+3)
    1       CONTINUE
    2     CONTINUE
          NOABCD=2
          NATOM(2)=NATOM(3)
        ELSE IF (NATOM(1).EQ.NATOM(3)) THEN
          STOP 'ATOM 1 = ATOM 3'
        ELSE IF (NATOM(2).EQ.NATOM(3)) THEN
          STOP 'ATOM 2 = ATOM 3'
        END IF
      END IF
C
      DO 1700 I=MINI,MAXI
        DO 1600 J=MINJ,MAXJ
          LMAX=MAXL
          DO 1500 K=MINK,MAXK
            IF (KANDL) LMAX=K
            DO 1400 L=MINL,LMAX
              NN=NN+1
              I1=LOCI+I
              I2=LOCJ+J
              I3=LOCK+K
              I4=LOCL+L
C     IF(NATOM(1).EQ.1)
C    1  WRITE(*,*) ' IJKL,NOABCD ',I1,I2,I3,I4,NOABCD,DERINT(NN,3)
C     IF(NATOM(1).EQ.2)
C    1  WRITE(*,*) ' IJKL,NOABCD ',I1,I2,I3,I4,NOABCD,DERINT(NN,6)
C     IF(NATOM(1).EQ.3)
C    1  WRITE(*,*) ' IJKL,NOABCD ',I1,I2,I3,I4,NOABCD,(-DERINT(NN,3)
C    2 - DERINT(NN,6))
              IF(I1.GE.I2) GO TO 700
              N=I1
              I1=I2
              I2=N
  700         IF(I3.GE.I4) GO TO 800
              N=I3
              I3=I4
              I4=N
  800         IF(I1-I3) 900,1000,1100
  900         N=I1
              I1=I3
              I3=N
              N=I2
              I2=I4
              I4=N
              GO TO 1100
 1000         IF(I2.LT.I4) GO TO 900
 1100         CONTINUE
C
              FFACTR=Q4
C
C     ----- THIS FACTOR OF TWO IS NEEDED BECAUSE ONLY GENERATE
C               ONE OF TWO POSSIBLE DERIVATIVES OF [II,KL]     -----
C
              IF (IANDJ.AND.I.EQ.J) THEN
                FFACTR=FFACTR+FFACTR
              END IF
C
C     ----- THE FOLLOWING SECTION MAKES THE B MATRIX SKELETON -----
C
              IF (I1.EQ.I3.AND.I2.EQ.I4) FFACTR=FFACTR+FFACTR
C
C     ----- PUT DERIVATIVE INTEGRALS AND LABELS INTO BUFFERS -----
C
              IJKL=IOR(I2,ISHFT(I1,8))
              IJKL=IOR(I3,ISHFT(IJKL,8))
              IJKL=IOR(I4,ISHFT(IJKL,8))
C
              IJKLA=NATOM(1)
              DO 1200 JUNK=2,NOABCD
                IJKLA=IOR(NATOM(JUNK),ISHFT(IJKLA,6))
 1200         CONTINUE
              IJKLA=IOR(NOABCD,ISHFT(IJKLA,6))
C
              IF (NUMI+2.GT.LENIBF) THEN
                IBUF(1)=NUMI
                IBUF(2)=0
                CALL SWRIT(ITAP18,IBUF,LENIBF)
                NUMI=2
              END IF
C
              IBUF(NUMI+1)=IJKL
              IBUF(NUMI+2)=IJKLA
CTJL
C     WRITE(*,*) ' NOABCD,NATOM ',NOABCD,NATOM
C     IF(NATOM(1).EQ.1) THEN
C     WRITE(*,*) ' IJKL,NOABCD ',I1,I2,I3,I4,NOABCD,DERINT(NN,3)
C     END IF
              NUMI=NUMI+2
C
C     ----- PUT INTEGRALS INTO BUF -----
C
              IF (NUMR+9.GT.LENBUF) THEN
                CALL SWRIT(ITAP19,BUF,INTOWP(LENBUF))
                NUMR=0
              END IF
C
CTJL  WRITE(*,*) ' IJKL,NOABCD,FAC ',I1,I2,I3,I4,NOABCD,FFACTR
              DO 1250 IDER=1,3*NOABCD-3
                NUMR=NUMR+1
                BUF(NUMR)=DERINT(NN,IDER)*FFACTR
CTJL
CTJL  WRITE(*,*) ' NN,IDER,INT ',NN,IDER,BUF(NUMR)
 1250         CONTINUE
C
C     ----- DEBUG OUTPUT -----
C
C     WRITE(ICHECK,'(' # CENTERS ',I1,2X,8I3)') NOABCD,(NATOM(JUNK),
C    #       JUNK=1,NOABCD),I1,I2,I3,I4
C     WRITE(ICHECK,'(2X,9F10.6)')(DERINT(NN,JUNK)*FFACTR,
C    #                        JUNK=1,3*NOABCD-3)
C
C
C
C
C
 1400       CONTINUE
 1500     CONTINUE
 1600   CONTINUE
 1700 CONTINUE
      RETURN
C
C-----FNWRIT-------------------------------------------FNWRIT
C
      ENTRY FNWRIT
C
C     ----- WRITE OUT LAST BUFFERS OF INTEGRALS AND LABELS -----
C
      IBUF(1)=NUMI
      IBUF(2)=-1
      CALL SWRIT(ITAP18,IBUF,LENIBF)
C
      CALL SWRIT(ITAP19,BUF,INTOWP(LENBUF))
C
      RETURN
      END
      SUBROUTINE INXI  (XIN,YIN,ZIN,DXI,DYI,DZI,LEN2D)
C
C
      IMPLICIT REAL*8 (A-H,O-Z)
C
C     EXTENDED DUMMY XIN,YIN,ZIN,DXI,DYI,DZI
C
      COMMON /TAPES/  IOUT,ICHECK,INPUT,ITAP42,ITAP49
      COMMON /SETD/   BP01,B00,B10,XCP00,XC00,YCP00,YC00,ZCP00,ZC00,F00
     1,               NIMAX,NJMAX,NKMAX,NLMAX,NMAX,MMAX,IOFFST
     2,               IN(6),KN(6)
      COMMON /GEOINF/ XIMXJ,YIMYJ,ZIMZJ,XKMXL,YKMYL,ZKMZL
     1,               XAMXB,YAMYB,ZAMZB
      COMMON /EXPNTS/ EIIA,EJIA,EKIB,EIJIA,EKLIB,RHO,RHOTSQ
     1,               EI,EJ,EK,A,B
C
      DIMENSION XIN(LEN2D),YIN(LEN2D),ZIN(LEN2D)
      DIMENSION DXI(LEN2D),DYI(LEN2D),DZI(LEN2D)
C
      RETURN
C
C-----------------------------------------------------XYZI
C
      ENTRY XYZI (XIN,YIN,ZIN,DXI,DYI,DZI,LEN2D)
C
      RTIASQ = RHOTSQ / A**2
      RTIAB  = RHOTSQ / (A*B)
      DIC00  = EI/A - RTIASQ*EI - 1
      DICP00 = EI * RTIAB
      RHO2T  = RHOTSQ + RHOTSQ
      RHO2TI = RHO2T*EIIA
      XICNST =  -XIMXJ*EIJIA*2.0 - XAMXB*RHO2TI
      YICNST =  -YIMYJ*EIJIA*2.0 - YAMYB*RHO2TI
      ZICNST = (-ZIMZJ*EIJIA*2.0 - ZAMZB*RHO2TI)
C
C
C     ----- I(0,0) -----
C
      I = IOFFST + 1
      XIN(I) = 1.0
      YIN(I) = 1.0
      ZIN(I) = F00
      DXI(I) = 0.0
      DYI(I) = 0.0
      DZI(I) = 0.0
C
C     ----- I(1,0)=C00 -----
C
      IF (NMAX.NE.0) THEN
        I2 = IOFFST + 2
        XIN(I2) = XC00
        YIN(I2) = YC00
        ZIN(I2) = ZC00 * F00
        DXI(I2) = DIC00
        DYI(I2) = DIC00
        DZI(I2) = DIC00 * F00
      END IF
C
C     ----- I(0,1)=CP00 -----
C
      IF (MMAX.NE.0) THEN
        I = IOFFST + 33
        XIN(I) = XCP00
        YIN(I) = YCP00
        ZIN(I) = ZCP00 * F00
        DXI(I) = DICP00
        DYI(I) = DICP00
        DZI(I) = DICP00 * F00
C
C     ----- I(1,1)=B00 * I(0,0) + CP00 * I(1,0) -----
C
        IF (NMAX.NE.0) THEN
          I = IOFFST + 34
          XIN(I) = XCP00 * XIN(I2) + B00
          YIN(I) = YCP00 * YIN(I2) + B00
          ZIN(I) = ZCP00 * ZIN(I2) + B00 * F00
          DXI(I) = DICP00 * XIN(I2) + XCP00 * DXI(I2)
          DYI(I) = DICP00 * YIN(I2) + YCP00 * DYI(I2)
          DZI(I) = DICP00 * ZIN(I2) + ZCP00 * DZI(I2)
        END IF
      END IF
C
C     ----- I(N,0)=(N-1)B10 * I(N-2,0) + C00 * I(N-1,0) -----
C
      IF (NMAX.GT.1) THEN
        DO 1 N=2,NMAX
          NL10=N + IOFFST
          N0=NL10+1
          NL20=NL10 - 1
          B10NL1=(N-1) * B10
          XIN(N0) = B10NL1 * XIN(NL20) + XC00 * XIN(NL10)
          YIN(N0) = B10NL1 * YIN(NL20) + YC00 * YIN(NL10)
          ZIN(N0) = B10NL1 * ZIN(NL20) + ZC00 * ZIN(NL10)
          DXI(N0) = B10NL1 * DXI(NL20) + DIC00 * XIN(NL10) + XC00* DXI
     *    (NL10)
          DYI(N0) = B10NL1 * DYI(NL20) + DIC00 * YIN(NL10) + YC00* DYI
     *    (NL10)
          DZI(N0) = B10NL1 * DZI(NL20) + DIC00 * ZIN(NL10) + ZC00* DZI
     *    (NL10)
C
C     ----- I(N,1)=N * B00 * I(N-1,0) + CP00 * I(N,0) -----
C
          IF (MMAX.NE.0) THEN
            N1=N0+32
            B00N = B00 * N
            XIN(N1) = B00N * XIN(NL10) + XCP00 * XIN(N0)
            YIN(N1) = B00N * YIN(NL10) + YCP00 * YIN(N0)
            ZIN(N1) = B00N * ZIN(NL10) + ZCP00 * ZIN(N0)
            DXI(N1) = B00N * DXI(NL10) + DICP00 * XIN(N0) + XCP00 *
     *      DXI(N0)
            DYI(N1) = B00N * DYI(NL10) + DICP00 * YIN(N0) + YCP00 *
     *      DYI(N0)
            DZI(N1) = B00N * DZI(NL10) + DICP00 * ZIN(N0) + ZCP00 *
     *      DZI(N0)
          END IF
    1   CONTINUE
      END IF
C
C     ----- I(0,M)=(M-1)BP01 * I(0,M-2) + CP00 * I(0,M-1) -----
C
      IF (MMAX.GT.1) THEN
        DO 2 M=2,MMAX
          I0M = M*32 +  1 + IOFFST
          I0ML1 = I0M - 32
          I0ML2 = I0ML1 - 32
          I1M   = I0M + 1
          BPML1 = (M-1) * BP01
          XIN(I0M) = BPML1 * XIN(I0ML2) + XCP00 * XIN(I0ML1)
          YIN(I0M) = BPML1 * YIN(I0ML2) + YCP00 * YIN(I0ML1)
          ZIN(I0M) = BPML1 * ZIN(I0ML2) + ZCP00 * ZIN(I0ML1)
          DXI(I0M) = BPML1 * DXI(I0ML2) + DICP00 * XIN(I0ML1)
     1    +                                XCP00 * DXI(I0ML1)
          DYI(I0M) = BPML1 * DYI(I0ML2) + DICP00 * YIN(I0ML1)
     1    +                                YCP00 * DYI(I0ML1)
          DZI(I0M) = BPML1 * DZI(I0ML2) + DICP00 * ZIN(I0ML1)
     1    +                                ZCP00 * DZI(I0ML1)
C
C     ----- I(1,M)=M * B00 * I(0,M-1) + C00 * I(0,M) -----
C
          IF (NMAX.NE.0) THEN
            B00M = M * B00
            XIN(I1M) = B00M * XIN(I0ML1) + XC00 * XIN(I0M)
            YIN(I1M) = B00M * YIN(I0ML1) + YC00 * YIN(I0M)
            ZIN(I1M) = B00M * ZIN(I0ML1) + ZC00 * ZIN(I0M)
            DXI(I1M) = B00M * DXI(I0ML1) + DIC00 * XIN(I0M) + XC00 *
     *      DXI(I0M)
            DYI(I1M) = B00M * DYI(I0ML1) + DIC00 * YIN(I0M) + YC00 *
     *      DYI(I0M)
            DZI(I1M) = B00M * DZI(I0ML1) + DIC00 * ZIN(I0M) + ZC00 *
     *      DZI(I0M)
          END IF
    2   CONTINUE
      END IF
C
C     ----- I(N,M)=(N-1)B10 * I(N-2,M) + M * B00 * I(N-1,M-1) +
C                                            C00 * I(N-1,M)   -----
C
      IF (NMAX.GT.1.AND.MMAX.GT.1) THEN
        DO 4 M=2,MMAX
          M8=M*32 + IOFFST
          DO 3 N=2,NMAX
            NM=N + 1 + M8
            NL1M=NM - 1
            NL1ML1= NL1M - 32
            NL2M = NL1M - 1
            B10NL1 = (N-1) * B10
            B00M = M * B00
            XIN(NM) = B10NL1 * XIN(NL2M) + B00M * XIN(NL1ML1) +XC00 *
     *      XIN(NL1M)
            YIN(NM) = B10NL1 * YIN(NL2M) + B00M * YIN(NL1ML1) +YC00 *
     *      YIN(NL1M)
            ZIN(NM) = B10NL1 * ZIN(NL2M) + B00M * ZIN(NL1ML1) +ZC00 *
     *      ZIN(NL1M)
            DXI(NM) = B10NL1 * DXI(NL2M) + B00M * DXI(NL1ML1)
     1      +          DIC00 * XIN(NL1M) + XC00  * DXI(NL1M)
            DYI(NM) = B10NL1 * DYI(NL2M) + B00M * DYI(NL1ML1)
     1      +          DIC00 * YIN(NL1M) + YC00  * DYI(NL1M)
            DZI(NM) = B10NL1 * DZI(NL2M) + B00M * DZI(NL1ML1)
     1      +          DIC00 * ZIN(NL1M) + ZC00  * DZI(NL1M)
    3     CONTINUE
    4   CONTINUE
      END IF
C
C     ----- I(I,J,M)=I(I+1,J-1,M) + (QI-QJ) * I(I,J-1,M) -----
C
      DO 7 M=0,MMAX
        MPT = M * 32 + IOFFST
        DO 6 J=1,NJMAX
          JM = J * 8 + MPT
          DO 5 I=1,NIMAX + NJMAX - J + 1
            IJM = I + JM
            IJL1M = IJM - 8
            I1JL1M = IJL1M + 1
            XIN(IJM) = XIN(I1JL1M) + XIMXJ * XIN(IJL1M)
            YIN(IJM) = YIN(I1JL1M) + YIMYJ * YIN(IJL1M)
            ZIN(IJM) = ZIN(I1JL1M) + ZIMZJ * ZIN(IJL1M)
            DXI(IJM) = DXI(I1JL1M) + XIMXJ * DXI(IJL1M) + XIN(IJL1M)
            DYI(IJM) = DYI(I1JL1M) + YIMYJ * DYI(IJL1M) + YIN(IJL1M)
            DZI(IJM) = DZI(I1JL1M) + ZIMZJ * DZI(IJL1M) + ZIN(IJL1M)
    5     CONTINUE
    6   CONTINUE
    7 CONTINUE
C
C     ----- I(I,J,M,0) = I(I,J,M) -----
C
      DO 10 M=MMAX,0,-1
        MNEW = M * 64 + IOFFST
        MOLD = M * 32 + IOFFST
        DO 9 J=NJMAX,0,-1
          JMNEW = MNEW + J * 16
          JMOLD = MOLD + J * 8
          DO 8 I=NIMAX+1,1,-1
            IJMNEW = JMNEW + I
            IJMOLD = JMOLD + I
            XIN(IJMNEW) = XIN(IJMOLD)
            YIN(IJMNEW) = YIN(IJMOLD)
            ZIN(IJMNEW) = ZIN(IJMOLD)
            DXI(IJMNEW) = DXI(IJMOLD)
            DYI(IJMNEW) = DYI(IJMOLD)
            DZI(IJMNEW) = DZI(IJMOLD)
    8     CONTINUE
    9   CONTINUE
   10 CONTINUE
C
C     ----- I(I,J,K,L)=I(I,J,K+1,L-1) + (QK-QL) * I(I,J,K,L-1) -----
C
      DO 14 L=1,NLMAX
        LPT = 4 * L + IOFFST
        DO 13 K=0,NKMAX + NLMAX - L
          KL = K * 64 + LPT
          DO 12 J=0,NJMAX
            JKL = J * 16 + KL
            DO 11 I=1,NIMAX+1
              IJKL = I + JKL
              IJKLM1 = IJKL - 4
              KP1LM1 = IJKLM1 + 64
              XIN(IJKL) = XIN(KP1LM1) + XKMXL * XIN(IJKLM1)
              YIN(IJKL) = YIN(KP1LM1) + YKMYL * YIN(IJKLM1)
              ZIN(IJKL) = ZIN(KP1LM1) + ZKMZL * ZIN(IJKLM1)
              DXI(IJKL) = DXI(KP1LM1) + XKMXL * DXI(IJKLM1)
              DYI(IJKL) = DYI(KP1LM1) + YKMYL * DYI(IJKLM1)
              DZI(IJKL) = DZI(KP1LM1) + ZKMZL * DZI(IJKLM1)
   11       CONTINUE
   12     CONTINUE
   13   CONTINUE
   14 CONTINUE
C
C     ----- ADD DERIVATIVE OF EXP(-D) AND EXP(-G) -----
C
      DO 18 L=0,NLMAX
        LPT = L*4 + IOFFST
        DO 17 K=0,NKMAX
          KL = K*64 + LPT
          DO 16 J=0,NJMAX
            JKL = J*16 + KL
            DO 15 I=1,NIMAX+1
              IJKL = I + JKL
              DXI(IJKL) = DXI(IJKL) + XICNST * XIN(IJKL)
              DYI(IJKL) = DYI(IJKL) + YICNST * YIN(IJKL)
              DZI(IJKL) = DZI(IJKL) + ZICNST * ZIN(IJKL)
   15       CONTINUE
   16     CONTINUE
   17   CONTINUE
   18 CONTINUE
      RETURN
      END
      SUBROUTINE INXIJ (XIN,YIN,ZIN,DXI,DYI,DZI,DXJ,DYJ,DZJ,LEN2D)
C
C
      IMPLICIT REAL*8 (A-H,O-Z)
C
C     EXTENDED DUMMY XIN,YIN,ZIN,DXI,DYI,DZI,DXJ,DYJ,DZJ
C
      COMMON /TAPES/  IOUT,ICHECK,INPUT,ITAP42,ITAP49
      COMMON /SETD/   BP01,B00,B10,XCP00,XC00,YCP00,YC00,ZCP00,ZC00,F00
     1,               NIMAX,NJMAX,NKMAX,NLMAX,NMAX,MMAX,IOFFST
     2,               IN(6),KN(6)
      COMMON /GEOINF/ XIMXJ,YIMYJ,ZIMZJ,XKMXL,YKMYL,ZKMZL
     1,               XAMXB,YAMYB,ZAMZB
      COMMON /EXPNTS/ EIIA,EJIA,EKIB,EIJIA,EKLIB,RHO,RHOTSQ
     1,               EI,EJ,EK,A,B
C
      DIMENSION XIN(LEN2D),YIN(LEN2D),ZIN(LEN2D)
      DIMENSION DXI(LEN2D),DYI(LEN2D),DZI(LEN2D)
      DIMENSION DXJ(LEN2D),DYJ(LEN2D),DZJ(LEN2D)
C
      RETURN
C
C-----------------------------------------------------XYZIJ
C
      ENTRY XYZIJ (XIN,YIN,ZIN,DXI,DYI,DZI,DXJ,DYJ,DZJ,LEN2D)
C
      RTIASQ = RHOTSQ / A**2
      RTIAB  = RHOTSQ / (A*B)
      DIC00  = EI/A - RTIASQ*EI - 1
      DJC00  = EJ/A - RTIASQ*EJ
      DICP00 = EI * RTIAB
      DJCP00 = EJ * RTIAB
      RHO2T  = RHOTSQ + RHOTSQ
      RHO2TI = RHO2T*EIIA
      RHO2TJ = RHO2T*EJIA
      XICNST =  -XIMXJ*EIJIA*2.0 - XAMXB*RHO2TI
      YICNST =  -YIMYJ*EIJIA*2.0 - YAMYB*RHO2TI
      ZICNST = (-ZIMZJ*EIJIA*2.0 - ZAMZB*RHO2TI)
      XJCNST =   XIMXJ*EIJIA*2.0 - XAMXB*RHO2TJ
      YJCNST =   YIMYJ*EIJIA*2.0 - YAMYB*RHO2TJ
      ZJCNST = ( ZIMZJ*EIJIA*2.0 - ZAMZB*RHO2TJ)
C
C
C     ----- I(0,0) -----
C
      I = IOFFST + 1
      XIN(I) = 1.0
      YIN(I) = 1.0
      ZIN(I) = F00
      DXI(I) = 0.0
      DYI(I) = 0.0
      DZI(I) = 0.0
      DXJ(I) = 0.0
      DYJ(I) = 0.0
      DZJ(I) = 0.0
C
C     ----- I(1,0)=C00 -----
C
      IF (NMAX.NE.0) THEN
        I2 = IOFFST + 2
        XIN(I2) = XC00
        YIN(I2) = YC00
        ZIN(I2) = ZC00 * F00
        DXI(I2) = DIC00
        DYI(I2) = DIC00
        DZI(I2) = DIC00 * F00
        DXJ(I2) = DJC00
        DYJ(I2) = DJC00
        DZJ(I2) = DJC00 * F00
      END IF
C
C     ----- I(0,1)=CP00 -----
C
      IF (MMAX.NE.0) THEN
        I = IOFFST + 33
        XIN(I) = XCP00
        YIN(I) = YCP00
        ZIN(I) = ZCP00 * F00
        DXI(I) = DICP00
        DYI(I) = DICP00
        DZI(I) = DICP00 * F00
        DXJ(I) = DJCP00
        DYJ(I) = DJCP00
        DZJ(I) = DJCP00 * F00
C
C     ----- I(1,1)=B00 * I(0,0) + CP00 * I(1,0) -----
C
        IF (NMAX.NE.0) THEN
          I = IOFFST + 34
          XIN(I) = XCP00 * XIN(I2) + B00
          YIN(I) = YCP00 * YIN(I2) + B00
          ZIN(I) = ZCP00 * ZIN(I2) + B00 * F00
          DXI(I) = DICP00 * XIN(I2) + XCP00 * DXI(I2)
          DYI(I) = DICP00 * YIN(I2) + YCP00 * DYI(I2)
          DZI(I) = DICP00 * ZIN(I2) + ZCP00 * DZI(I2)
          DXJ(I) = DJCP00 * XIN(I2) + XCP00 * DXJ(I2)
          DYJ(I) = DJCP00 * YIN(I2) + YCP00 * DYJ(I2)
          DZJ(I) = DJCP00 * ZIN(I2) + ZCP00 * DZJ(I2)
        END IF
      END IF
C
C     ----- I(N,0)=(N-1)B10 * I(N-2,0) + C00 * I(N-1,0) -----
C
      IF (NMAX.GT.1) THEN
        DO 1 N=2,NMAX
          NL10=N + IOFFST
          N0=NL10+1
          NL20=NL10 - 1
          B10NL1=(N-1) * B10
          XIN(N0) = B10NL1 * XIN(NL20) + XC00 * XIN(NL10)
          YIN(N0) = B10NL1 * YIN(NL20) + YC00 * YIN(NL10)
          ZIN(N0) = B10NL1 * ZIN(NL20) + ZC00 * ZIN(NL10)
          DXI(N0) = B10NL1 * DXI(NL20) + DIC00 * XIN(NL10) + XC00* DXI
     *    (NL10)
          DYI(N0) = B10NL1 * DYI(NL20) + DIC00 * YIN(NL10) + YC00* DYI
     *    (NL10)
          DZI(N0) = B10NL1 * DZI(NL20) + DIC00 * ZIN(NL10) + ZC00* DZI
     *    (NL10)
          DXJ(N0) = B10NL1 * DXJ(NL20) + DJC00 * XIN(NL10) + XC00* DXJ
     *    (NL10)
          DYJ(N0) = B10NL1 * DYJ(NL20) + DJC00 * YIN(NL10) + YC00* DYJ
     *    (NL10)
          DZJ(N0) = B10NL1 * DZJ(NL20) + DJC00 * ZIN(NL10) + ZC00* DZJ
     *    (NL10)
C
C     ----- I(N,1)=N * B00 * I(N-1,0) + CP00 * I(N,0) -----
C
          IF (MMAX.NE.0) THEN
            N1=N0+32
            B00N = B00 * N
            XIN(N1) = B00N * XIN(NL10) + XCP00 * XIN(N0)
            YIN(N1) = B00N * YIN(NL10) + YCP00 * YIN(N0)
            ZIN(N1) = B00N * ZIN(NL10) + ZCP00 * ZIN(N0)
            DXI(N1) = B00N * DXI(NL10) + DICP00 * XIN(N0) + XCP00 *
     *      DXI(N0)
            DYI(N1) = B00N * DYI(NL10) + DICP00 * YIN(N0) + YCP00 *
     *      DYI(N0)
            DZI(N1) = B00N * DZI(NL10) + DICP00 * ZIN(N0) + ZCP00 *
     *      DZI(N0)
            DXJ(N1) = B00N * DXJ(NL10) + DJCP00 * XIN(N0) + XCP00 *
     *      DXJ(N0)
            DYJ(N1) = B00N * DYJ(NL10) + DJCP00 * YIN(N0) + YCP00 *
     *      DYJ(N0)
            DZJ(N1) = B00N * DZJ(NL10) + DJCP00 * ZIN(N0) + ZCP00 *
     *      DZJ(N0)
          END IF
    1   CONTINUE
      END IF
C
C     ----- I(0,M)=(M-1)BP01 * I(0,M-2) + CP00 * I(0,M-1) -----
C
      IF (MMAX.GT.1) THEN
        DO 2 M=2,MMAX
          I0M = M*32 +  1 + IOFFST
          I0ML1 = I0M - 32
          I0ML2 = I0ML1 - 32
          I1M   = I0M + 1
          BPML1 = (M-1) * BP01
          XIN(I0M) = BPML1 * XIN(I0ML2) + XCP00 * XIN(I0ML1)
          YIN(I0M) = BPML1 * YIN(I0ML2) + YCP00 * YIN(I0ML1)
          ZIN(I0M) = BPML1 * ZIN(I0ML2) + ZCP00 * ZIN(I0ML1)
          DXI(I0M) = BPML1 * DXI(I0ML2) + DICP00 * XIN(I0ML1)
     1    +                                XCP00 * DXI(I0ML1)
          DYI(I0M) = BPML1 * DYI(I0ML2) + DICP00 * YIN(I0ML1)
     1    +                                YCP00 * DYI(I0ML1)
          DZI(I0M) = BPML1 * DZI(I0ML2) + DICP00 * ZIN(I0ML1)
     1    +                                ZCP00 * DZI(I0ML1)
          DXJ(I0M) = BPML1 * DXJ(I0ML2) + DJCP00 * XIN(I0ML1)
     1    +                                XCP00 * DXJ(I0ML1)
          DYJ(I0M) = BPML1 * DYJ(I0ML2) + DJCP00 * YIN(I0ML1)
     1    +                                YCP00 * DYJ(I0ML1)
          DZJ(I0M) = BPML1 * DZJ(I0ML2) + DJCP00 * ZIN(I0ML1)
     1    +                                ZCP00 * DZJ(I0ML1)
C
C     ----- I(1,M)=M * B00 * I(0,M-1) + C00 * I(0,M) -----
C
          IF (NMAX.NE.0) THEN
            B00M = M * B00
            XIN(I1M) = B00M * XIN(I0ML1) + XC00 * XIN(I0M)
            YIN(I1M) = B00M * YIN(I0ML1) + YC00 * YIN(I0M)
            ZIN(I1M) = B00M * ZIN(I0ML1) + ZC00 * ZIN(I0M)
            DXI(I1M) = B00M * DXI(I0ML1) + DIC00 * XIN(I0M) + XC00 *
     *      DXI(I0M)
            DYI(I1M) = B00M * DYI(I0ML1) + DIC00 * YIN(I0M) + YC00 *
     *      DYI(I0M)
            DZI(I1M) = B00M * DZI(I0ML1) + DIC00 * ZIN(I0M) + ZC00 *
     *      DZI(I0M)
            DXJ(I1M) = B00M * DXJ(I0ML1) + DJC00 * XIN(I0M) + XC00 *
     *      DXJ(I0M)
            DYJ(I1M) = B00M * DYJ(I0ML1) + DJC00 * YIN(I0M) + YC00 *
     *      DYJ(I0M)
            DZJ(I1M) = B00M * DZJ(I0ML1) + DJC00 * ZIN(I0M) + ZC00 *
     *      DZJ(I0M)
          END IF
    2   CONTINUE
      END IF
C
C     ----- I(N,M)=(N-1)B10 * I(N-2,M) + M * B00 * I(N-1,M-1) +
C                                            C00 * I(N-1,M)   -----
C
      IF (NMAX.GT.1.AND.MMAX.GT.1) THEN
        DO 4 M=2,MMAX
          M8=M*32 + IOFFST
          DO 3 N=2,NMAX
            NM=N + 1 + M8
            NL1M=NM - 1
            NL1ML1= NL1M - 32
            NL2M = NL1M - 1
            B10NL1 = (N-1) * B10
            B00M = M * B00
            XIN(NM) = B10NL1 * XIN(NL2M) + B00M * XIN(NL1ML1) +XC00 *
     *      XIN(NL1M)
            YIN(NM) = B10NL1 * YIN(NL2M) + B00M * YIN(NL1ML1) +YC00 *
     *      YIN(NL1M)
            ZIN(NM) = B10NL1 * ZIN(NL2M) + B00M * ZIN(NL1ML1) +ZC00 *
     *      ZIN(NL1M)
            DXI(NM) = B10NL1 * DXI(NL2M) + B00M * DXI(NL1ML1)
     1      +          DIC00 * XIN(NL1M) + XC00  * DXI(NL1M)
            DYI(NM) = B10NL1 * DYI(NL2M) + B00M * DYI(NL1ML1)
     1      +          DIC00 * YIN(NL1M) + YC00  * DYI(NL1M)
            DZI(NM) = B10NL1 * DZI(NL2M) + B00M * DZI(NL1ML1)
     1      +          DIC00 * ZIN(NL1M) + ZC00  * DZI(NL1M)
            DXJ(NM) = B10NL1 * DXJ(NL2M) + B00M * DXJ(NL1ML1)
     1      +          DJC00 * XIN(NL1M) + XC00  * DXJ(NL1M)
            DYJ(NM) = B10NL1 * DYJ(NL2M) + B00M * DYJ(NL1ML1)
     1      +          DJC00 * YIN(NL1M) + YC00  * DYJ(NL1M)
            DZJ(NM) = B10NL1 * DZJ(NL2M) + B00M * DZJ(NL1ML1)
     1      +          DJC00 * ZIN(NL1M) + ZC00  * DZJ(NL1M)
    3     CONTINUE
    4   CONTINUE
      END IF
C
C     ----- I(I,J,M)=I(I+1,J-1,M) + (QI-QJ) * I(I,J-1,M) -----
C
      DO 7 M=0,MMAX
        MPT = M * 32 + IOFFST
        DO 6 J=1,NJMAX
          JM = J * 8 + MPT
          DO 5 I=1,NIMAX + NJMAX - J + 1
            IJM = I + JM
            IJL1M = IJM - 8
            I1JL1M = IJL1M + 1
            XIN(IJM) = XIN(I1JL1M) + XIMXJ * XIN(IJL1M)
            YIN(IJM) = YIN(I1JL1M) + YIMYJ * YIN(IJL1M)
            ZIN(IJM) = ZIN(I1JL1M) + ZIMZJ * ZIN(IJL1M)
            DXI(IJM) = DXI(I1JL1M) + XIMXJ * DXI(IJL1M) + XIN(IJL1M)
            DYI(IJM) = DYI(I1JL1M) + YIMYJ * DYI(IJL1M) + YIN(IJL1M)
            DZI(IJM) = DZI(I1JL1M) + ZIMZJ * DZI(IJL1M) + ZIN(IJL1M)
            DXJ(IJM) = DXJ(I1JL1M) + XIMXJ * DXJ(IJL1M) - XIN(IJL1M)
            DYJ(IJM) = DYJ(I1JL1M) + YIMYJ * DYJ(IJL1M) - YIN(IJL1M)
            DZJ(IJM) = DZJ(I1JL1M) + ZIMZJ * DZJ(IJL1M) - ZIN(IJL1M)
    5     CONTINUE
    6   CONTINUE
    7 CONTINUE
C
C     ----- I(I,J,M,0) = I(I,J,M) -----
C
      DO 10 M=MMAX,0,-1
        MNEW = M * 64 + IOFFST
        MOLD = M * 32 + IOFFST
        DO 9 J=NJMAX,0,-1
          JMNEW = MNEW + J * 16
          JMOLD = MOLD + J * 8
          DO 8 I=NIMAX+1,1,-1
            IJMNEW = JMNEW + I
            IJMOLD = JMOLD + I
            XIN(IJMNEW) = XIN(IJMOLD)
            YIN(IJMNEW) = YIN(IJMOLD)
            ZIN(IJMNEW) = ZIN(IJMOLD)
            DXI(IJMNEW) = DXI(IJMOLD)
            DYI(IJMNEW) = DYI(IJMOLD)
            DZI(IJMNEW) = DZI(IJMOLD)
            DXJ(IJMNEW) = DXJ(IJMOLD)
            DYJ(IJMNEW) = DYJ(IJMOLD)
            DZJ(IJMNEW) = DZJ(IJMOLD)
    8     CONTINUE
    9   CONTINUE
   10 CONTINUE
C
C     ----- I(I,J,K,L)=I(I,J,K+1,L-1) + (QK-QL) * I(I,J,K,L-1) -----
C
      DO 14 L=1,NLMAX
        LPT = 4 * L + IOFFST
        DO 13 K=0,NKMAX + NLMAX - L
          KL = K * 64 + LPT
          DO 12 J=0,NJMAX
            JKL = J * 16 + KL
            DO 11 I=1,NIMAX+1
              IJKL = I + JKL
              IJKLM1 = IJKL - 4
              KP1LM1 = IJKLM1 + 64
              XIN(IJKL) = XIN(KP1LM1) + XKMXL * XIN(IJKLM1)
              YIN(IJKL) = YIN(KP1LM1) + YKMYL * YIN(IJKLM1)
              ZIN(IJKL) = ZIN(KP1LM1) + ZKMZL * ZIN(IJKLM1)
              DXI(IJKL) = DXI(KP1LM1) + XKMXL * DXI(IJKLM1)
              DYI(IJKL) = DYI(KP1LM1) + YKMYL * DYI(IJKLM1)
              DZI(IJKL) = DZI(KP1LM1) + ZKMZL * DZI(IJKLM1)
              DXJ(IJKL) = DXJ(KP1LM1) + XKMXL * DXJ(IJKLM1)
              DYJ(IJKL) = DYJ(KP1LM1) + YKMYL * DYJ(IJKLM1)
              DZJ(IJKL) = DZJ(KP1LM1) + ZKMZL * DZJ(IJKLM1)
   11       CONTINUE
   12     CONTINUE
   13   CONTINUE
   14 CONTINUE
C
C     ----- ADD DERIVATIVE OF EXP(-D) AND EXP(-G) -----
C
      DO 18 L=0,NLMAX
        LPT = L*4 + IOFFST
        DO 17 K=0,NKMAX
          KL = K*64 + LPT
          DO 16 J=0,NJMAX
            JKL = J*16 + KL
            DO 15 I=1,NIMAX+1
              IJKL = I + JKL
              DXI(IJKL) = DXI(IJKL) + XICNST * XIN(IJKL)
              DYI(IJKL) = DYI(IJKL) + YICNST * YIN(IJKL)
              DZI(IJKL) = DZI(IJKL) + ZICNST * ZIN(IJKL)
              DXJ(IJKL) = DXJ(IJKL) + XJCNST * XIN(IJKL)
              DYJ(IJKL) = DYJ(IJKL) + YJCNST * YIN(IJKL)
              DZJ(IJKL) = DZJ(IJKL) + ZJCNST * ZIN(IJKL)
   15       CONTINUE
   16     CONTINUE
   17   CONTINUE
   18 CONTINUE
      RETURN
      END
      SUBROUTINE INXIJK(XIN,YIN,ZIN,DXI,DYI,DZI,DXJ,DYJ,DZJ,
     #DXK,DYK,DZK,LEN2D)
C
C
      IMPLICIT REAL*8 (A-H,O-Z)
C
C     EXTENDED DUMMY XIN,YIN,ZIN,DXI,DYI,DZI,DXJ,DYJ,DZJ,DXK,DYK,DZK
C
      COMMON /TAPES/  IOUT,ICHECK,INPUT,ITAP42,ITAP49
      COMMON /SETD/   BP01,B00,B10,XCP00,XC00,YCP00,YC00,ZCP00,ZC00,F00
     1,               NIMAX,NJMAX,NKMAX,NLMAX,NMAX,MMAX,IOFFST
     2,               IN(6),KN(6)
      COMMON /GEOINF/ XIMXJ,YIMYJ,ZIMZJ,XKMXL,YKMYL,ZKMZL
     1,               XAMXB,YAMYB,ZAMZB
      COMMON /EXPNTS/ EIIA,EJIA,EKIB,EIJIA,EKLIB,RHO,RHOTSQ
     1,               EI,EJ,EK,A,B
C
      DIMENSION XIN(LEN2D),YIN(LEN2D),ZIN(LEN2D)
      DIMENSION DXI(LEN2D),DYI(LEN2D),DZI(LEN2D)
      DIMENSION DXJ(LEN2D),DYJ(LEN2D),DZJ(LEN2D)
      DIMENSION DXK(LEN2D),DYK(LEN2D),DZK(LEN2D)
C
      RETURN
C
C-----------------------------------------------------XYZIJK
C
      ENTRY XYZIJK (XIN,YIN,ZIN,DXI,DYI,DZI,DXJ,DYJ,DZJ,
     #DXK,DYK,DZK,LEN2D)
C
      RTIASQ = RHOTSQ / A**2
      RTIBSQ = RHOTSQ / B**2
      RTIAB  = RHOTSQ / (A*B)
      DIC00  = EI/A - RTIASQ*EI - 1
      DJC00  = EJ/A - RTIASQ*EJ
      DKC00  = EK * RTIAB
      DICP00 = EI * RTIAB
      DJCP00 = EJ * RTIAB
      DKCP00 = EK/B - RTIBSQ*EK - 1
      RHO2T  = RHOTSQ + RHOTSQ
      RHO2TI = RHO2T*EIIA
      RHO2TJ = RHO2T*EJIA
      RHO2TK = RHO2T*EKIB
      XICNST =  -XIMXJ*EIJIA*2.0 - XAMXB*RHO2TI
      YICNST =  -YIMYJ*EIJIA*2.0 - YAMYB*RHO2TI
      ZICNST = (-ZIMZJ*EIJIA*2.0 - ZAMZB*RHO2TI)
      XJCNST =   XIMXJ*EIJIA*2.0 - XAMXB*RHO2TJ
      YJCNST =   YIMYJ*EIJIA*2.0 - YAMYB*RHO2TJ
      ZJCNST = ( ZIMZJ*EIJIA*2.0 - ZAMZB*RHO2TJ)
      XKCNST =  -XKMXL*EKLIB*2.0 + XAMXB*RHO2TK
      YKCNST =  -YKMYL*EKLIB*2.0 + YAMYB*RHO2TK
      ZKCNST = (-ZKMZL*EKLIB*2.0 + ZAMZB*RHO2TK)
C
C
C     ----- I(0,0) -----
C
      I = IOFFST + 1
      XIN(I) = 1.0
      YIN(I) = 1.0
      ZIN(I) = F00
      DXI(I) = 0.0
      DYI(I) = 0.0
      DZI(I) = 0.0
      DXJ(I) = 0.0
      DYJ(I) = 0.0
      DZJ(I) = 0.0
      DXK(I) = 0.0
      DYK(I) = 0.0
      DZK(I) = 0.0
C
C     ----- I(1,0)=C00 -----
C
      IF (NMAX.NE.0) THEN
        I2 = IOFFST + 2
        XIN(I2) = XC00
        YIN(I2) = YC00
        ZIN(I2) = ZC00 * F00
        DXI(I2) = DIC00
        DYI(I2) = DIC00
        DZI(I2) = DIC00 * F00
        DXJ(I2) = DJC00
        DYJ(I2) = DJC00
        DZJ(I2) = DJC00 * F00
        DXK(I2) = DKC00
        DYK(I2) = DKC00
        DZK(I2) = DKC00 * F00
      END IF
C
C     ----- I(0,1)=CP00 -----
C
      IF (MMAX.NE.0) THEN
        I = IOFFST + 33
        XIN(I) = XCP00
        YIN(I) = YCP00
        ZIN(I) = ZCP00 * F00
        DXI(I) = DICP00
        DYI(I) = DICP00
        DZI(I) = DICP00 * F00
        DXJ(I) = DJCP00
        DYJ(I) = DJCP00
        DZJ(I) = DJCP00 * F00
        DXK(I) = DKCP00
        DYK(I) = DKCP00
        DZK(I) = DKCP00 * F00
C
C     ----- I(1,1)=B00 * I(0,0) + CP00 * I(1,0) -----
C
        IF (NMAX.NE.0) THEN
          I = IOFFST + 34
          XIN(I) = XCP00 * XIN(I2) + B00
          YIN(I) = YCP00 * YIN(I2) + B00
          ZIN(I) = ZCP00 * ZIN(I2) + B00 * F00
          DXI(I) = DICP00 * XIN(I2) + XCP00 * DXI(I2)
          DYI(I) = DICP00 * YIN(I2) + YCP00 * DYI(I2)
          DZI(I) = DICP00 * ZIN(I2) + ZCP00 * DZI(I2)
          DXJ(I) = DJCP00 * XIN(I2) + XCP00 * DXJ(I2)
          DYJ(I) = DJCP00 * YIN(I2) + YCP00 * DYJ(I2)
          DZJ(I) = DJCP00 * ZIN(I2) + ZCP00 * DZJ(I2)
          DXK(I) = DKCP00 * XIN(I2) + XCP00 * DXK(I2)
          DYK(I) = DKCP00 * YIN(I2) + YCP00 * DYK(I2)
          DZK(I) = DKCP00 * ZIN(I2) + ZCP00 * DZK(I2)
        END IF
      END IF
C
C     ----- I(N,0)=(N-1)B10 * I(N-2,0) + C00 * I(N-1,0) -----
C
      IF (NMAX.GT.1) THEN
        DO 1 N=2,NMAX
          NL10=N + IOFFST
          N0=NL10+1
          NL20=NL10 - 1
          B10NL1=(N-1) * B10
          XIN(N0) = B10NL1 * XIN(NL20) + XC00 * XIN(NL10)
          YIN(N0) = B10NL1 * YIN(NL20) + YC00 * YIN(NL10)
          ZIN(N0) = B10NL1 * ZIN(NL20) + ZC00 * ZIN(NL10)
          DXI(N0) = B10NL1 * DXI(NL20) + DIC00 * XIN(NL10) + XC00* DXI
     *    (NL10)
          DYI(N0) = B10NL1 * DYI(NL20) + DIC00 * YIN(NL10) + YC00* DYI
     *    (NL10)
          DZI(N0) = B10NL1 * DZI(NL20) + DIC00 * ZIN(NL10) + ZC00* DZI
     *    (NL10)
          DXJ(N0) = B10NL1 * DXJ(NL20) + DJC00 * XIN(NL10) + XC00* DXJ
     *    (NL10)
          DYJ(N0) = B10NL1 * DYJ(NL20) + DJC00 * YIN(NL10) + YC00* DYJ
     *    (NL10)
          DZJ(N0) = B10NL1 * DZJ(NL20) + DJC00 * ZIN(NL10) + ZC00* DZJ
     *    (NL10)
          DXK(N0) = B10NL1 * DXK(NL20) + DKC00 * XIN(NL10) + XC00* DXK
     *    (NL10)
          DYK(N0) = B10NL1 * DYK(NL20) + DKC00 * YIN(NL10) + YC00* DYK
     *    (NL10)
          DZK(N0) = B10NL1 * DZK(NL20) + DKC00 * ZIN(NL10) + ZC00* DZK
     *    (NL10)
C
C     ----- I(N,1)=N * B00 * I(N-1,0) + CP00 * I(N,0) -----
C
          IF (MMAX.NE.0) THEN
            N1=N0+32
            B00N = B00 * N
            XIN(N1) = B00N * XIN(NL10) + XCP00 * XIN(N0)
            YIN(N1) = B00N * YIN(NL10) + YCP00 * YIN(N0)
            ZIN(N1) = B00N * ZIN(NL10) + ZCP00 * ZIN(N0)
            DXI(N1) = B00N * DXI(NL10) + DICP00 * XIN(N0) + XCP00 *
     *      DXI(N0)
            DYI(N1) = B00N * DYI(NL10) + DICP00 * YIN(N0) + YCP00 *
     *      DYI(N0)
            DZI(N1) = B00N * DZI(NL10) + DICP00 * ZIN(N0) + ZCP00 *
     *      DZI(N0)
            DXJ(N1) = B00N * DXJ(NL10) + DJCP00 * XIN(N0) + XCP00 *
     *      DXJ(N0)
            DYJ(N1) = B00N * DYJ(NL10) + DJCP00 * YIN(N0) + YCP00 *
     *      DYJ(N0)
            DZJ(N1) = B00N * DZJ(NL10) + DJCP00 * ZIN(N0) + ZCP00 *
     *      DZJ(N0)
            DXK(N1) = B00N * DXK(NL10) + DKCP00 * XIN(N0) + XCP00 *
     *      DXK(N0)
            DYK(N1) = B00N * DYK(NL10) + DKCP00 * YIN(N0) + YCP00 *
     *      DYK(N0)
            DZK(N1) = B00N * DZK(NL10) + DKCP00 * ZIN(N0) + ZCP00 *
     *      DZK(N0)
          END IF
    1   CONTINUE
      END IF
C
C     ----- I(0,M)=(M-1)BP01 * I(0,M-2) + CP00 * I(0,M-1) -----
C
      IF (MMAX.GT.1) THEN
        DO 2 M=2,MMAX
          I0M = M*32 +  1 + IOFFST
          I0ML1 = I0M - 32
          I0ML2 = I0ML1 - 32
          I1M   = I0M + 1
          BPML1 = (M-1) * BP01
          XIN(I0M) = BPML1 * XIN(I0ML2) + XCP00 * XIN(I0ML1)
          YIN(I0M) = BPML1 * YIN(I0ML2) + YCP00 * YIN(I0ML1)
          ZIN(I0M) = BPML1 * ZIN(I0ML2) + ZCP00 * ZIN(I0ML1)
          DXI(I0M) = BPML1 * DXI(I0ML2) + DICP00 * XIN(I0ML1)
     1    +                                XCP00 * DXI(I0ML1)
          DYI(I0M) = BPML1 * DYI(I0ML2) + DICP00 * YIN(I0ML1)
     1    +                                YCP00 * DYI(I0ML1)
          DZI(I0M) = BPML1 * DZI(I0ML2) + DICP00 * ZIN(I0ML1)
     1    +                                ZCP00 * DZI(I0ML1)
          DXJ(I0M) = BPML1 * DXJ(I0ML2) + DJCP00 * XIN(I0ML1)
     1    +                                XCP00 * DXJ(I0ML1)
          DYJ(I0M) = BPML1 * DYJ(I0ML2) + DJCP00 * YIN(I0ML1)
     1    +                                YCP00 * DYJ(I0ML1)
          DZJ(I0M) = BPML1 * DZJ(I0ML2) + DJCP00 * ZIN(I0ML1)
     1    +                                ZCP00 * DZJ(I0ML1)
          DXK(I0M) = BPML1 * DXK(I0ML2) + DKCP00 * XIN(I0ML1)
     1    +                                XCP00 * DXK(I0ML1)
          DYK(I0M) = BPML1 * DYK(I0ML2) + DKCP00 * YIN(I0ML1)
     1    +                                YCP00 * DYK(I0ML1)
          DZK(I0M) = BPML1 * DZK(I0ML2) + DKCP00 * ZIN(I0ML1)
     1    +                                ZCP00 * DZK(I0ML1)
C
C     ----- I(1,M)=M * B00 * I(0,M-1) + C00 * I(0,M) -----
C
          IF (NMAX.NE.0) THEN
            B00M = M * B00
            XIN(I1M) = B00M * XIN(I0ML1) + XC00 * XIN(I0M)
            YIN(I1M) = B00M * YIN(I0ML1) + YC00 * YIN(I0M)
            ZIN(I1M) = B00M * ZIN(I0ML1) + ZC00 * ZIN(I0M)
            DXI(I1M) = B00M * DXI(I0ML1) + DIC00 * XIN(I0M) + XC00 *
     *      DXI(I0M)
            DYI(I1M) = B00M * DYI(I0ML1) + DIC00 * YIN(I0M) + YC00 *
     *      DYI(I0M)
            DZI(I1M) = B00M * DZI(I0ML1) + DIC00 * ZIN(I0M) + ZC00 *
     *      DZI(I0M)
            DXJ(I1M) = B00M * DXJ(I0ML1) + DJC00 * XIN(I0M) + XC00 *
     *      DXJ(I0M)
            DYJ(I1M) = B00M * DYJ(I0ML1) + DJC00 * YIN(I0M) + YC00 *
     *      DYJ(I0M)
            DZJ(I1M) = B00M * DZJ(I0ML1) + DJC00 * ZIN(I0M) + ZC00 *
     *      DZJ(I0M)
            DXK(I1M) = B00M * DXK(I0ML1) + DKC00 * XIN(I0M) + XC00 *
     *      DXK(I0M)
            DYK(I1M) = B00M * DYK(I0ML1) + DKC00 * YIN(I0M) + YC00 *
     *      DYK(I0M)
            DZK(I1M) = B00M * DZK(I0ML1) + DKC00 * ZIN(I0M) + ZC00 *
     *      DZK(I0M)
          END IF
    2   CONTINUE
      END IF
C
C     ----- I(N,M)=(N-1)B10 * I(N-2,M) + M * B00 * I(N-1,M-1) +
C                                            C00 * I(N-1,M)   -----
C
      IF (NMAX.GT.1.AND.MMAX.GT.1) THEN
        DO 4 M=2,MMAX
          M8=M*32 + IOFFST
          DO 3 N=2,NMAX
            NM=N + 1 + M8
            NL1M=NM - 1
            NL1ML1= NL1M - 32
            NL2M = NL1M - 1
            B10NL1 = (N-1) * B10
            B00M = M * B00
            XIN(NM) = B10NL1 * XIN(NL2M) + B00M * XIN(NL1ML1) +XC00 *
     *      XIN(NL1M)
            YIN(NM) = B10NL1 * YIN(NL2M) + B00M * YIN(NL1ML1) +YC00 *
     *      YIN(NL1M)
            ZIN(NM) = B10NL1 * ZIN(NL2M) + B00M * ZIN(NL1ML1) +ZC00 *
     *      ZIN(NL1M)
            DXI(NM) = B10NL1 * DXI(NL2M) + B00M * DXI(NL1ML1)
     1      +          DIC00 * XIN(NL1M) + XC00  * DXI(NL1M)
            DYI(NM) = B10NL1 * DYI(NL2M) + B00M * DYI(NL1ML1)
     1      +          DIC00 * YIN(NL1M) + YC00  * DYI(NL1M)
            DZI(NM) = B10NL1 * DZI(NL2M) + B00M * DZI(NL1ML1)
     1      +          DIC00 * ZIN(NL1M) + ZC00  * DZI(NL1M)
            DXJ(NM) = B10NL1 * DXJ(NL2M) + B00M * DXJ(NL1ML1)
     1      +          DJC00 * XIN(NL1M) + XC00  * DXJ(NL1M)
            DYJ(NM) = B10NL1 * DYJ(NL2M) + B00M * DYJ(NL1ML1)
     1      +          DJC00 * YIN(NL1M) + YC00  * DYJ(NL1M)
            DZJ(NM) = B10NL1 * DZJ(NL2M) + B00M * DZJ(NL1ML1)
     1      +          DJC00 * ZIN(NL1M) + ZC00  * DZJ(NL1M)
            DXK(NM) = B10NL1 * DXK(NL2M) + B00M * DXK(NL1ML1)
     1      +          DKC00 * XIN(NL1M) + XC00  * DXK(NL1M)
            DYK(NM) = B10NL1 * DYK(NL2M) + B00M * DYK(NL1ML1)
     1      +          DKC00 * YIN(NL1M) + YC00  * DYK(NL1M)
            DZK(NM) = B10NL1 * DZK(NL2M) + B00M * DZK(NL1ML1)
     1      +          DKC00 * ZIN(NL1M) + ZC00  * DZK(NL1M)
    3     CONTINUE
    4   CONTINUE
      END IF
C
C     ----- I(I,J,M)=I(I+1,J-1,M) + (QI-QJ) * I(I,J-1,M) -----
C
      DO 7 M=0,MMAX
        MPT = M * 32 + IOFFST
        DO 6 J=1,NJMAX
          JM = J * 8 + MPT
          DO 5 I=1,NIMAX + NJMAX - J + 1
            IJM = I + JM
            IJL1M = IJM - 8
            I1JL1M = IJL1M + 1
            XIN(IJM) = XIN(I1JL1M) + XIMXJ * XIN(IJL1M)
            YIN(IJM) = YIN(I1JL1M) + YIMYJ * YIN(IJL1M)
            ZIN(IJM) = ZIN(I1JL1M) + ZIMZJ * ZIN(IJL1M)
            DXI(IJM) = DXI(I1JL1M) + XIMXJ * DXI(IJL1M) + XIN(IJL1M)
            DYI(IJM) = DYI(I1JL1M) + YIMYJ * DYI(IJL1M) + YIN(IJL1M)
            DZI(IJM) = DZI(I1JL1M) + ZIMZJ * DZI(IJL1M) + ZIN(IJL1M)
            DXJ(IJM) = DXJ(I1JL1M) + XIMXJ * DXJ(IJL1M) - XIN(IJL1M)
            DYJ(IJM) = DYJ(I1JL1M) + YIMYJ * DYJ(IJL1M) - YIN(IJL1M)
            DZJ(IJM) = DZJ(I1JL1M) + ZIMZJ * DZJ(IJL1M) - ZIN(IJL1M)
            DXK(IJM) = DXK(I1JL1M) + XIMXJ * DXK(IJL1M)
            DYK(IJM) = DYK(I1JL1M) + YIMYJ * DYK(IJL1M)
            DZK(IJM) = DZK(I1JL1M) + ZIMZJ * DZK(IJL1M)
    5     CONTINUE
    6   CONTINUE
    7 CONTINUE
C
C     ----- I(I,J,M,0) = I(I,J,M) -----
C
      DO 10 M=MMAX,0,-1
        MNEW = M * 64 + IOFFST
        MOLD = M * 32 + IOFFST
        DO 9 J=NJMAX,0,-1
          JMNEW = MNEW + J * 16
          JMOLD = MOLD + J * 8
          DO 8 I=NIMAX+1,1,-1
            IJMNEW = JMNEW + I
            IJMOLD = JMOLD + I
            XIN(IJMNEW) = XIN(IJMOLD)
            YIN(IJMNEW) = YIN(IJMOLD)
            ZIN(IJMNEW) = ZIN(IJMOLD)
            DXI(IJMNEW) = DXI(IJMOLD)
            DYI(IJMNEW) = DYI(IJMOLD)
            DZI(IJMNEW) = DZI(IJMOLD)
            DXJ(IJMNEW) = DXJ(IJMOLD)
            DYJ(IJMNEW) = DYJ(IJMOLD)
            DZJ(IJMNEW) = DZJ(IJMOLD)
            DXK(IJMNEW) = DXK(IJMOLD)
            DYK(IJMNEW) = DYK(IJMOLD)
            DZK(IJMNEW) = DZK(IJMOLD)
    8     CONTINUE
    9   CONTINUE
   10 CONTINUE
C
C     ----- I(I,J,K,L)=I(I,J,K+1,L-1) + (QK-QL) * I(I,J,K,L-1) -----
C
      DO 14 L=1,NLMAX
        LPT = 4 * L + IOFFST
        DO 13 K=0,NKMAX + NLMAX - L
          KL = K * 64 + LPT
          DO 12 J=0,NJMAX
            JKL = J * 16 + KL
            DO 11 I=1,NIMAX+1
              IJKL = I + JKL
              IJKLM1 = IJKL - 4
              KP1LM1 = IJKLM1 + 64
              XIN(IJKL) = XIN(KP1LM1) + XKMXL * XIN(IJKLM1)
              YIN(IJKL) = YIN(KP1LM1) + YKMYL * YIN(IJKLM1)
              ZIN(IJKL) = ZIN(KP1LM1) + ZKMZL * ZIN(IJKLM1)
              DXI(IJKL) = DXI(KP1LM1) + XKMXL * DXI(IJKLM1)
              DYI(IJKL) = DYI(KP1LM1) + YKMYL * DYI(IJKLM1)
              DZI(IJKL) = DZI(KP1LM1) + ZKMZL * DZI(IJKLM1)
              DXJ(IJKL) = DXJ(KP1LM1) + XKMXL * DXJ(IJKLM1)
              DYJ(IJKL) = DYJ(KP1LM1) + YKMYL * DYJ(IJKLM1)
              DZJ(IJKL) = DZJ(KP1LM1) + ZKMZL * DZJ(IJKLM1)
              DXK(IJKL) = DXK(KP1LM1) + XKMXL * DXK(IJKLM1) + XIN(
     *        IJKLM1)
              DYK(IJKL) = DYK(KP1LM1) + YKMYL * DYK(IJKLM1) + YIN(
     *        IJKLM1)
              DZK(IJKL) = DZK(KP1LM1) + ZKMZL * DZK(IJKLM1) + ZIN(
     *        IJKLM1)
   11       CONTINUE
   12     CONTINUE
   13   CONTINUE
   14 CONTINUE
C
C     ----- ADD DERIVATIVE OF EXP(-D) AND EXP(-G) -----
C
      DO 18 L=0,NLMAX
        LPT = L*4 + IOFFST
        DO 17 K=0,NKMAX
          KL = K*64 + LPT
          DO 16 J=0,NJMAX
            JKL = J*16 + KL
            DO 15 I=1,NIMAX+1
              IJKL = I + JKL
              DXI(IJKL) = DXI(IJKL) + XICNST * XIN(IJKL)
              DYI(IJKL) = DYI(IJKL) + YICNST * YIN(IJKL)
              DZI(IJKL) = DZI(IJKL) + ZICNST * ZIN(IJKL)
              DXJ(IJKL) = DXJ(IJKL) + XJCNST * XIN(IJKL)
              DYJ(IJKL) = DYJ(IJKL) + YJCNST * YIN(IJKL)
              DZJ(IJKL) = DZJ(IJKL) + ZJCNST * ZIN(IJKL)
              DXK(IJKL) = DXK(IJKL) + XKCNST * XIN(IJKL)
              DYK(IJKL) = DYK(IJKL) + YKCNST * YIN(IJKL)
              DZK(IJKL) = DZK(IJKL) + ZKCNST * ZIN(IJKL)
   15       CONTINUE
   16     CONTINUE
   17   CONTINUE
   18 CONTINUE
      RETURN
      END
      SUBROUTINE INXIK (XIN,YIN,ZIN,DXI,DYI,DZI,DXK,DYK,DZK,LEN2D)
C
C
      IMPLICIT REAL*8 (A-H,O-Z)
C
C     EXTENDED DUMMY XIN,YIN,ZIN,DXI,DYI,DZI,DXK,DYK,DZK
C
      COMMON /TAPES/  IOUT,ICHECK,INPUT,ITAP42,ITAP49
      COMMON /SETD/   BP01,B00,B10,XCP00,XC00,YCP00,YC00,ZCP00,ZC00,F00
     1,               NIMAX,NJMAX,NKMAX,NLMAX,NMAX,MMAX,IOFFST
     2,               IN(6),KN(6)
      COMMON /GEOINF/ XIMXJ,YIMYJ,ZIMZJ,XKMXL,YKMYL,ZKMZL
     1,               XAMXB,YAMYB,ZAMZB
      COMMON /EXPNTS/ EIIA,EJIA,EKIB,EIJIA,EKLIB,RHO,RHOTSQ
     1,               EI,EJ,EK,A,B
C
      DIMENSION XIN(LEN2D),YIN(LEN2D),ZIN(LEN2D)
      DIMENSION DXI(LEN2D),DYI(LEN2D),DZI(LEN2D)
      DIMENSION DXK(LEN2D),DYK(LEN2D),DZK(LEN2D)
C
      RETURN
C
C-----------------------------------------------------XYZIK
C
      ENTRY XYZIK (XIN,YIN,ZIN,DXI,DYI,DZI,DXK,DYK,DZK,LEN2D)
C
      RTIASQ = RHOTSQ / A**2
      RTIBSQ = RHOTSQ / B**2
      RTIAB  = RHOTSQ / (A*B)
      DIC00  = EI/A - RTIASQ*EI - 1
      DKC00  = EK * RTIAB
      DICP00 = EI * RTIAB
      DKCP00 = EK/B - RTIBSQ*EK - 1
      RHO2T  = RHOTSQ + RHOTSQ
      RHO2TI = RHO2T*EIIA
      RHO2TK = RHO2T*EKIB
      XICNST =  -XIMXJ*EIJIA*2.0 - XAMXB*RHO2TI
      YICNST =  -YIMYJ*EIJIA*2.0 - YAMYB*RHO2TI
      ZICNST = (-ZIMZJ*EIJIA*2.0 - ZAMZB*RHO2TI)
      XKCNST =  -XKMXL*EKLIB*2.0 + XAMXB*RHO2TK
      YKCNST =  -YKMYL*EKLIB*2.0 + YAMYB*RHO2TK
      ZKCNST = (-ZKMZL*EKLIB*2.0 + ZAMZB*RHO2TK)
C
C
C     ----- I(0,0) -----
C
      I = IOFFST + 1
      XIN(I) = 1.0
      YIN(I) = 1.0
      ZIN(I) = F00
      DXI(I) = 0.0
      DYI(I) = 0.0
      DZI(I) = 0.0
      DXK(I) = 0.0
      DYK(I) = 0.0
      DZK(I) = 0.0
C
C     ----- I(1,0)=C00 -----
C
      IF (NMAX.NE.0) THEN
        I2 = IOFFST + 2
        XIN(I2) = XC00
        YIN(I2) = YC00
        ZIN(I2) = ZC00 * F00
        DXI(I2) = DIC00
        DYI(I2) = DIC00
        DZI(I2) = DIC00 * F00
        DXK(I2) = DKC00
        DYK(I2) = DKC00
        DZK(I2) = DKC00 * F00
      END IF
C
C     ----- I(0,1)=CP00 -----
C
      IF (MMAX.NE.0) THEN
        I = IOFFST + 33
        XIN(I) = XCP00
        YIN(I) = YCP00
        ZIN(I) = ZCP00 * F00
        DXI(I) = DICP00
        DYI(I) = DICP00
        DZI(I) = DICP00 * F00
        DXK(I) = DKCP00
        DYK(I) = DKCP00
        DZK(I) = DKCP00 * F00
C
C     ----- I(1,1)=B00 * I(0,0) + CP00 * I(1,0) -----
C
        IF (NMAX.NE.0) THEN
          I = IOFFST + 34
          XIN(I) = XCP00 * XIN(I2) + B00
          YIN(I) = YCP00 * YIN(I2) + B00
          ZIN(I) = ZCP00 * ZIN(I2) + B00 * F00
          DXI(I) = DICP00 * XIN(I2) + XCP00 * DXI(I2)
          DYI(I) = DICP00 * YIN(I2) + YCP00 * DYI(I2)
          DZI(I) = DICP00 * ZIN(I2) + ZCP00 * DZI(I2)
          DXK(I) = DKCP00 * XIN(I2) + XCP00 * DXK(I2)
          DYK(I) = DKCP00 * YIN(I2) + YCP00 * DYK(I2)
          DZK(I) = DKCP00 * ZIN(I2) + ZCP00 * DZK(I2)
        END IF
      END IF
C
C     ----- I(N,0)=(N-1)B10 * I(N-2,0) + C00 * I(N-1,0) -----
C
      IF (NMAX.GT.1) THEN
        DO 1 N=2,NMAX
          NL10=N + IOFFST
          N0=NL10+1
          NL20=NL10 - 1
          B10NL1=(N-1) * B10
          XIN(N0) = B10NL1 * XIN(NL20) + XC00 * XIN(NL10)
          YIN(N0) = B10NL1 * YIN(NL20) + YC00 * YIN(NL10)
          ZIN(N0) = B10NL1 * ZIN(NL20) + ZC00 * ZIN(NL10)
          DXI(N0) = B10NL1 * DXI(NL20) + DIC00 * XIN(NL10) + XC00* DXI
     *    (NL10)
          DYI(N0) = B10NL1 * DYI(NL20) + DIC00 * YIN(NL10) + YC00* DYI
     *    (NL10)
          DZI(N0) = B10NL1 * DZI(NL20) + DIC00 * ZIN(NL10) + ZC00* DZI
     *    (NL10)
          DXK(N0) = B10NL1 * DXK(NL20) + DKC00 * XIN(NL10) + XC00* DXK
     *    (NL10)
          DYK(N0) = B10NL1 * DYK(NL20) + DKC00 * YIN(NL10) + YC00* DYK
     *    (NL10)
          DZK(N0) = B10NL1 * DZK(NL20) + DKC00 * ZIN(NL10) + ZC00* DZK
     *    (NL10)
C
C     ----- I(N,1)=N * B00 * I(N-1,0) + CP00 * I(N,0) -----
C
          IF (MMAX.NE.0) THEN
            N1=N0+32
            B00N = B00 * N
            XIN(N1) = B00N * XIN(NL10) + XCP00 * XIN(N0)
            YIN(N1) = B00N * YIN(NL10) + YCP00 * YIN(N0)
            ZIN(N1) = B00N * ZIN(NL10) + ZCP00 * ZIN(N0)
            DXI(N1) = B00N * DXI(NL10) + DICP00 * XIN(N0) + XCP00 *
     *      DXI(N0)
            DYI(N1) = B00N * DYI(NL10) + DICP00 * YIN(N0) + YCP00 *
     *      DYI(N0)
            DZI(N1) = B00N * DZI(NL10) + DICP00 * ZIN(N0) + ZCP00 *
     *      DZI(N0)
            DXK(N1) = B00N * DXK(NL10) + DKCP00 * XIN(N0) + XCP00 *
     *      DXK(N0)
            DYK(N1) = B00N * DYK(NL10) + DKCP00 * YIN(N0) + YCP00 *
     *      DYK(N0)
            DZK(N1) = B00N * DZK(NL10) + DKCP00 * ZIN(N0) + ZCP00 *
     *      DZK(N0)
          END IF
    1   CONTINUE
      END IF
C
C     ----- I(0,M)=(M-1)BP01 * I(0,M-2) + CP00 * I(0,M-1) -----
C
      IF (MMAX.GT.1) THEN
        DO 2 M=2,MMAX
          I0M = M*32 +  1 + IOFFST
          I0ML1 = I0M - 32
          I0ML2 = I0ML1 - 32
          I1M   = I0M + 1
          BPML1 = (M-1) * BP01
          XIN(I0M) = BPML1 * XIN(I0ML2) + XCP00 * XIN(I0ML1)
          YIN(I0M) = BPML1 * YIN(I0ML2) + YCP00 * YIN(I0ML1)
          ZIN(I0M) = BPML1 * ZIN(I0ML2) + ZCP00 * ZIN(I0ML1)
          DXI(I0M) = BPML1 * DXI(I0ML2) + DICP00 * XIN(I0ML1)
     1    +                                XCP00 * DXI(I0ML1)
          DYI(I0M) = BPML1 * DYI(I0ML2) + DICP00 * YIN(I0ML1)
     1    +                                YCP00 * DYI(I0ML1)
          DZI(I0M) = BPML1 * DZI(I0ML2) + DICP00 * ZIN(I0ML1)
     1    +                                ZCP00 * DZI(I0ML1)
          DXK(I0M) = BPML1 * DXK(I0ML2) + DKCP00 * XIN(I0ML1)
     1    +                                XCP00 * DXK(I0ML1)
          DYK(I0M) = BPML1 * DYK(I0ML2) + DKCP00 * YIN(I0ML1)
     1    +                                YCP00 * DYK(I0ML1)
          DZK(I0M) = BPML1 * DZK(I0ML2) + DKCP00 * ZIN(I0ML1)
     1    +                                ZCP00 * DZK(I0ML1)
C
C     ----- I(1,M)=M * B00 * I(0,M-1) + C00 * I(0,M) -----
C
          IF (NMAX.NE.0) THEN
            B00M = M * B00
            XIN(I1M) = B00M * XIN(I0ML1) + XC00 * XIN(I0M)
            YIN(I1M) = B00M * YIN(I0ML1) + YC00 * YIN(I0M)
            ZIN(I1M) = B00M * ZIN(I0ML1) + ZC00 * ZIN(I0M)
            DXI(I1M) = B00M * DXI(I0ML1) + DIC00 * XIN(I0M) + XC00 *
     *      DXI(I0M)
            DYI(I1M) = B00M * DYI(I0ML1) + DIC00 * YIN(I0M) + YC00 *
     *      DYI(I0M)
            DZI(I1M) = B00M * DZI(I0ML1) + DIC00 * ZIN(I0M) + ZC00 *
     *      DZI(I0M)
            DXK(I1M) = B00M * DXK(I0ML1) + DKC00 * XIN(I0M) + XC00 *
     *      DXK(I0M)
            DYK(I1M) = B00M * DYK(I0ML1) + DKC00 * YIN(I0M) + YC00 *
     *      DYK(I0M)
            DZK(I1M) = B00M * DZK(I0ML1) + DKC00 * ZIN(I0M) + ZC00 *
     *      DZK(I0M)
          END IF
    2   CONTINUE
      END IF
C
C     ----- I(N,M)=(N-1)B10 * I(N-2,M) + M * B00 * I(N-1,M-1) +
C                                            C00 * I(N-1,M)   -----
C
      IF (NMAX.GT.1.AND.MMAX.GT.1) THEN
        DO 4 M=2,MMAX
          M8=M*32 + IOFFST
          DO 3 N=2,NMAX
            NM=N + 1 + M8
            NL1M=NM - 1
            NL1ML1= NL1M - 32
            NL2M = NL1M - 1
            B10NL1 = (N-1) * B10
            B00M = M * B00
            XIN(NM) = B10NL1 * XIN(NL2M) + B00M * XIN(NL1ML1) +XC00 *
     *      XIN(NL1M)
            YIN(NM) = B10NL1 * YIN(NL2M) + B00M * YIN(NL1ML1) +YC00 *
     *      YIN(NL1M)
            ZIN(NM) = B10NL1 * ZIN(NL2M) + B00M * ZIN(NL1ML1) +ZC00 *
     *      ZIN(NL1M)
            DXI(NM) = B10NL1 * DXI(NL2M) + B00M * DXI(NL1ML1)
     1      +          DIC00 * XIN(NL1M) + XC00  * DXI(NL1M)
            DYI(NM) = B10NL1 * DYI(NL2M) + B00M * DYI(NL1ML1)
     1      +          DIC00 * YIN(NL1M) + YC00  * DYI(NL1M)
            DZI(NM) = B10NL1 * DZI(NL2M) + B00M * DZI(NL1ML1)
     1      +          DIC00 * ZIN(NL1M) + ZC00  * DZI(NL1M)
            DXK(NM) = B10NL1 * DXK(NL2M) + B00M * DXK(NL1ML1)
     1      +          DKC00 * XIN(NL1M) + XC00  * DXK(NL1M)
            DYK(NM) = B10NL1 * DYK(NL2M) + B00M * DYK(NL1ML1)
     1      +          DKC00 * YIN(NL1M) + YC00  * DYK(NL1M)
            DZK(NM) = B10NL1 * DZK(NL2M) + B00M * DZK(NL1ML1)
     1      +          DKC00 * ZIN(NL1M) + ZC00  * DZK(NL1M)
    3     CONTINUE
    4   CONTINUE
      END IF
C
C     ----- I(I,J,M)=I(I+1,J-1,M) + (QI-QJ) * I(I,J-1,M) -----
C
      DO 7 M=0,MMAX
        MPT = M * 32 + IOFFST
        DO 6 J=1,NJMAX
          JM = J * 8 + MPT
          DO 5 I=1,NIMAX + NJMAX - J + 1
            IJM = I + JM
            IJL1M = IJM - 8
            I1JL1M = IJL1M + 1
            XIN(IJM) = XIN(I1JL1M) + XIMXJ * XIN(IJL1M)
            YIN(IJM) = YIN(I1JL1M) + YIMYJ * YIN(IJL1M)
            ZIN(IJM) = ZIN(I1JL1M) + ZIMZJ * ZIN(IJL1M)
            DXI(IJM) = DXI(I1JL1M) + XIMXJ * DXI(IJL1M) + XIN(IJL1M)
            DYI(IJM) = DYI(I1JL1M) + YIMYJ * DYI(IJL1M) + YIN(IJL1M)
            DZI(IJM) = DZI(I1JL1M) + ZIMZJ * DZI(IJL1M) + ZIN(IJL1M)
            DXK(IJM) = DXK(I1JL1M) + XIMXJ * DXK(IJL1M)
            DYK(IJM) = DYK(I1JL1M) + YIMYJ * DYK(IJL1M)
            DZK(IJM) = DZK(I1JL1M) + ZIMZJ * DZK(IJL1M)
    5     CONTINUE
    6   CONTINUE
    7 CONTINUE
C
C     ----- I(I,J,M,0) = I(I,J,M) -----
C
      DO 10 M=MMAX,0,-1
        MNEW = M * 64 + IOFFST
        MOLD = M * 32 + IOFFST
        DO 9 J=NJMAX,0,-1
          JMNEW = MNEW + J * 16
          JMOLD = MOLD + J * 8
          DO 8 I=NIMAX+1,1,-1
            IJMNEW = JMNEW + I
            IJMOLD = JMOLD + I
            XIN(IJMNEW) = XIN(IJMOLD)
            YIN(IJMNEW) = YIN(IJMOLD)
            ZIN(IJMNEW) = ZIN(IJMOLD)
            DXI(IJMNEW) = DXI(IJMOLD)
            DYI(IJMNEW) = DYI(IJMOLD)
            DZI(IJMNEW) = DZI(IJMOLD)
            DXK(IJMNEW) = DXK(IJMOLD)
            DYK(IJMNEW) = DYK(IJMOLD)
            DZK(IJMNEW) = DZK(IJMOLD)
    8     CONTINUE
    9   CONTINUE
   10 CONTINUE
C
C     ----- I(I,J,K,L)=I(I,J,K+1,L-1) + (QK-QL) * I(I,J,K,L-1) -----
C
      DO 14 L=1,NLMAX
        LPT = 4 * L + IOFFST
        DO 13 K=0,NKMAX + NLMAX - L
          KL = K * 64 + LPT
          DO 12 J=0,NJMAX
            JKL = J * 16 + KL
            DO 11 I=1,NIMAX+1
              IJKL = I + JKL
              IJKLM1 = IJKL - 4
              KP1LM1 = IJKLM1 + 64
              XIN(IJKL) = XIN(KP1LM1) + XKMXL * XIN(IJKLM1)
              YIN(IJKL) = YIN(KP1LM1) + YKMYL * YIN(IJKLM1)
              ZIN(IJKL) = ZIN(KP1LM1) + ZKMZL * ZIN(IJKLM1)
              DXI(IJKL) = DXI(KP1LM1) + XKMXL * DXI(IJKLM1)
              DYI(IJKL) = DYI(KP1LM1) + YKMYL * DYI(IJKLM1)
              DZI(IJKL) = DZI(KP1LM1) + ZKMZL * DZI(IJKLM1)
              DXK(IJKL) = DXK(KP1LM1) + XKMXL * DXK(IJKLM1) + XIN(
     *        IJKLM1)
              DYK(IJKL) = DYK(KP1LM1) + YKMYL * DYK(IJKLM1) + YIN(
     *        IJKLM1)
              DZK(IJKL) = DZK(KP1LM1) + ZKMZL * DZK(IJKLM1) + ZIN(
     *        IJKLM1)
   11       CONTINUE
   12     CONTINUE
   13   CONTINUE
   14 CONTINUE
C
C     ----- ADD DERIVATIVE OF EXP(-D) AND EXP(-G) -----
C
      DO 18 L=0,NLMAX
        LPT = L*4 + IOFFST
        DO 17 K=0,NKMAX
          KL = K*64 + LPT
          DO 16 J=0,NJMAX
            JKL = J*16 + KL
            DO 15 I=1,NIMAX+1
              IJKL = I + JKL
              DXI(IJKL) = DXI(IJKL) + XICNST * XIN(IJKL)
              DYI(IJKL) = DYI(IJKL) + YICNST * YIN(IJKL)
              DZI(IJKL) = DZI(IJKL) + ZICNST * ZIN(IJKL)
              DXK(IJKL) = DXK(IJKL) + XKCNST * XIN(IJKL)
              DYK(IJKL) = DYK(IJKL) + YKCNST * YIN(IJKL)
              DZK(IJKL) = DZK(IJKL) + ZKCNST * ZIN(IJKL)
   15       CONTINUE
   16     CONTINUE
   17   CONTINUE
   18 CONTINUE
      RETURN
      END
      SUBROUTINE ISOOUT
C
C
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      COMMON /INFOA/  NAT,NUM,NNP,NSHELL,NIRRED,NT,NPRIM,MXT,NISO
      COMMON /ISOPAC/ INDIN(120),INDOUT(30)
      COMMON /TAPES/  IOUT,ICHECK,INPUT,ITAP42,ITAP49
C
      LOGICAL*4 TRANS(120)
      LOGICAL*1 INDOUT
      EQUIVALENCE (TRANS(1),INDIN(1))
C
CIBM  INTEGER*1 INDOUT
C
      DO 20 J=1,NT
CIBM    INDIN(J)=INDOUT(J)
        TRANS(J) = INDOUT(J)
   20 CONTINUE
      RETURN
C
C--ISOIN-------------------------------------------------ISOIN
C
      ENTRY ISOIN
C
      DO 40 J=1,NT
CIBM    INDOUT(J)=INDIN(J)
        INDOUT(J) = TRANS(J)
   40 CONTINUE
      RETURN
      END
      SUBROUTINE JK1DER(IA,DT,D,DTWO,XIN,YIN,ZIN,DXI,DYI,DZI,
     #DXJ,DYJ,DZJ,DXK,DYK,DZK,LEN2D,ABDENS,LENBLK,
     #DERINT,LENINT,IBUF,LENIBF,BUF,LENBUF,ITAP18,
     #ITAP19,MXSPDF,MINSH,MAXSH,MXANGM,KATOM,C,
     #KSTART,KNG,KTYPE,KMIN,KMAX,KLOC,EX,CS,ISO,
     #BMAT,NBSET,
     #shiz,ijoff,kloff,klsiz,rdmbf,idmbf,idmsz,idmr,ioff,
     #abtemp,maxshl,imoshl)
C
C
C DRIVER FOR TWO-ELECTRON PORTION OF FIRST DERIVATIVE CALCULATION
C WHICH NEVER EXPLICITLY FORMS INTEGRALS OVER CONTRACTED FUNCTIONS.
C PRIMITIVE INTEGRALS ARE DIRECTLY MULTIPLIED BY TWO-PARTICLE DENSITY
C MATRIX ELEMENTS TO FORM GRADIENTS.
C
C MODIFIED 25 AUGUST 1983 AT BRL TO ACCOMODATE VARIABLE DIMENSIONS
C OF HONDO ARRAYS                                            PWS
C
C
      IMPLICIT REAL*8 (A-H,O-Z)
C
C     EXTENDED DUMMY IA,DT,D,DTWO,XIN,YIN,ZIN,DXI,DYI,DZI,DXJ,DYJ,DZJ
C    #,              DXK,DYK,DZK,ABDENS,DERINT,IBUF,BUF,MXSPDF,MINSH
C    #,              MAXSH,KATOM,C,KSTART,KNG,KTYPE,KMIN,KMAX
C    #,              KLOC,EX,CS,ISO,BMAT
C
      REAL*8 C(3,NAT),EX(NPRIM),CS(NPRIM),BMAT(NNP,3,NAT,NBSET)
      real*8 rdmbf(idmr),abtemp(maxshl,maxshl,maxshl,maxshl)
      INTEGER KATOM(NSHELL),KSTART(NSHELL),KNG(NSHELL),KTYPE(NSHELL)
      INTEGER KMIN(NSHELL),KMAX(NSHELL),KLOC(NSHELL),idmbf(idmsz)
      integer shiz(nnp),ijoff(nnp),kloff(nnp),klsiz(nnp),ioff(nnp)
      INTEGER ISO(NSHELL,NISO)
      LOGICAL OPEN
      CHARACTER*5 CALTYP
      CHARACTER*6 SCFTYP
C
      COMMON /DSHLNO/ LIT,LJT,LKT,LLT,LOCI,LOCJ,LOCK,LOCL
     1,               MINI,MINJ,MINK,MINL,MAXI,MAXJ,MAXK,MAXL
     2,               NIJ,IJD,KLD,IJ,KL
      COMMON /RESTAR/ TIMLIM,IREST,NREC,INTLOC,IST,JST,KST,LST
      COMMON /ISOPAC/ INDIN(120),INDOUT(30)
      COMMON /TIMES/  TI,TX,TIM,INDIX
      COMMON /DINDEX/ IJGT(36),IJX(36),IJY(36),IJZ(36)
     1,               KLGT(78),KLX(78),KLY(78),KLZ(78)
     2,               IJDGT(36),KLDGT(36),KDG(10),LDG(10)
      COMMON /ROOT/   XX,U(9),WT(9),NROOTS
CIBM  COMMON /SHELLD/ NATOM(4),NPASS
      COMMON /SHELLD/ XIDER,YIDER,ZIDER,XJDER,YJDER,ZJDER
     2,               XKDER,YKDER,ZKDER,NATOM(4),NPASS
      COMMON /INFOA/  NAT,NUM,NNP,NSHELL,NIRRED,NT,NPRIM,MXT,NISO
      COMMON /CNTRL/  IPRINT,NDERIV,INTOUT,INFOUT,OPEN,SCFTYP,CALTYP
      COMMON /TAPES/  IOUT,ICHECK,INPUT,ITAP42,ITAP49
      COMMON /TCSCF/  OCC1,OCC12,OCC2,SOCC1,SOCC12,SOCC2,ITCSCF
      COMMON /COUPLC/ FOCC(5),ALP(5,5),BET(5,5),NTYPES
C
C
      INTEGER*4 ITIME1,ITIME2,ITIME3,ITIME4
C
      COMMON /TIME/   IXYZ(4),JXYZ(4),IFRM(4),JFRM(4), ITIME
C
C
      dimension imoshl(num)
      DIMENSION M0(8),M1(8),M2(8),M3(8)
      DIMENSION IA(1),DT(NNP),D(NNP,NTYPES),DTWO(3,NAT)
      DIMENSION XIN(LEN2D),YIN(LEN2D),ZIN(LEN2D)
      DIMENSION DXI(LEN2D),DYI(LEN2D),DZI(LEN2D)
      DIMENSION DXJ(LEN2D),DYJ(LEN2D),DZJ(LEN2D)
      DIMENSION DXK(LEN2D),DYK(LEN2D),DZK(LEN2D)
      DIMENSION ABDENS(LENBLK),DERINT(LENINT,9)
      DIMENSION IBUF(LENIBF),BUF(LENBUF)
      DIMENSION MXSPDF(NAT),MINSH(MXANGM,NAT),MAXSH(MXANGM,NAT)
C********************************************************************
C     WRITE(*,*) LENIBF,LENBUF,LENINT,
C    +    LEN2D,NNP,LENBLK,NBSET,NPRIM
C********************************************************************
C
C
C     ----- TWO ELECTRON CONTRIBUTION TO THE GRADIENT -----
C
      DO 11 I=1,NAT
        DO 10 J=1,3
          DTWO(J,I)=0.0D+00
   10   CONTINUE
   11 CONTINUE
C
C     ----- SET SOME PARAMETERS -----
C
C
      CALL DDEBUT(SCFTYP)
      IF(IST.GT.NSHELL) GO TO 9100
C
C     ----- INITIALIZE SUBROUTINES -----
C
      CALL INSHEL(KATOM,C,KSTART,KNG,KTYPE,KMIN,KMAX,KLOC,EX,CS)
      CALL INXIJK(XIN,YIN,ZIN,DXI,DYI,DZI,DXJ,DYJ,DZJ,DXK,DYK,DZK,
     #LEN2D)
      CALL INXIJ (XIN,YIN,ZIN,DXI,DYI,DZI,DXJ,DYJ,DZJ,LEN2D)
      CALL INXIK (XIN,YIN,ZIN,DXI,DYI,DZI,DXK,DYK,DZK,LEN2D)
      CALL INXI  (XIN,YIN,ZIN,DXI,DYI,DZI,LEN2D)
      IF (INTOUT.NE.0) THEN
        CALL INWRIT(DERINT,LENINT,IBUF,LENIBF,BUF,LENBUF,IA,
     #  ITAP18,ITAP19,NAT,NUM,NNP)
      END IF
C
      IF (INTOUT.NE.0.OR.INFOUT.NE.0) THEN
        CALL INMIJK(XIN,YIN,ZIN,DXI,DYI,DZI,DXJ,DYJ,DZJ,DXK,DYK,
     #  DZK,LEN2D,DERINT(1,1),DERINT(1,2),DERINT(1,3),
     #  DERINT(1,4),DERINT(1,5),DERINT(1,6),
     #  DERINT(1,7),DERINT(1,8),DERINT(1,9),LENINT)
      ELSE
        CALL INFIJK(XIN,YIN,ZIN,DXI,DYI,DZI,DXJ,DYJ,DZJ,DXK,DYK,DZK,
     #  LEN2D,ABDENS,LENBLK)
        CALL INFIJ (XIN,YIN,ZIN,DXI,DYI,DZI,DXJ,DYJ,DZJ,LEN2D,ABDENS,
     #  LENBLK)
        CALL INFIK (XIN,YIN,ZIN,DXI,DYI,DZI,DXK,DYK,DZK,LEN2D,ABDENS,
     #  LENBLK)
        CALL INFI  (XIN,YIN,ZIN,DXI,DYI,DZI,LEN2D,ABDENS,LENBLK)
      END IF
C
      CALL DABIN(IA,DT,D,ABDENS,LENBLK,jump)
C
      IF (INFOUT.NE.0) CALL INITB(BMAT,DERINT,LENINT,DT,D,NBSET,IA)
C
C     ----- ISHELL -----
C
      DO 9000 IAT=1,NAT
        DO 8000 JAT=1,IAT
          DO 7000 KAT=1,IAT
            DO 6000 LAT=1,KAT
C
              DO 5000 ISPDF=1,MXSPDF(IAT)
                JMXSPD=MXSPDF(JAT)
                IF (IAT.EQ.JAT) JMXSPD=ISPDF
                DO 4000 JSPDF=1,JMXSPD
                  KMXSPD=MXSPDF(KAT)
                  IF (IAT.EQ.KAT) KMXSPD=ISPDF
                  DO 3000 KSPDF=1,KMXSPD
                    LMXSPD=MXSPDF(LAT)
                    IF (KAT.EQ.LAT) LMXSPD=KSPDF
                    DO 2000 LSPDF=1,LMXSPD
C
C     ----- LOOP OVER SHELLS -----
C
                      DO 1000 II=MINSH(ISPDF,IAT),MAXSH(ISPDF,
     *                  IAT)
C
                        DO 100 IT=1,NISO
  100                   INDOUT(IT)=ISO(II,IT)
                        CALL ySOOUT
                        DO 110 IT=1,NT
                          ID=INDIN(IT)
                          IF(ID.GT.II) GO TO 1000
  110                   M0(IT)=ID
C
C     ----- JSHELL -----
C
                        MAXJJ=MAXSH(JSPDF,JAT)
                        IF (MAXJJ.GT.II) MAXJJ=II
                        DO 900 JJ=MINSH(JSPDF,JAT),MAXJJ
C
                          JST=1
      DO 200 IT=1,NISO
  200 INDOUT(IT)=ISO(JJ,IT)
      CALL ySOOUT
      DO 220 IT=1,NT
        ID=M0(IT)
        JD=INDIN(IT)
        IF(JD.GT.II) GO TO 900
        IF(ID.GE.JD) GO TO 210
        ND=ID
        ID=JD
        JD=ND
  210   IF(ID.EQ.II.AND.JD.GT.JJ) GO TO 900
        M1(IT)=ID
  220 M2(IT)=JD
C
C     ----- KSHELL -----
C
      MAXKK=MAXSH(KSPDF,KAT)
      IF (MAXKK.GT.II) MAXKK=II
      DO 800 KK=MINSH(KSPDF,KAT),MAXKK
C
        KST=1
        DO 300 IT=1,NISO
  300   INDOUT(IT)=ISO(KK,IT)
        CALL ySOOUT
        DO 310 IT=1,NT
          KD=INDIN(IT)
          IF(KD.GT.II) GO TO 800
  310   M3(IT)=KD
C
C     ----- LSHELL -----
C
        MAXLL=MAXSH(LSPDF,LAT)
        IF (MAXLL.GT.KK) MAXLL=KK
        IF (II.EQ.KK.AND.MAXLL.GT.JJ) MAXLL=JJ
        DO 700 LL=MINSH(LSPDF,LAT),MAXLL
C
          LST=1
          DO 400 IT=1,NISO
  400     INDOUT(IT)=ISO(LL,IT)
          CALL ySOOUT
          N4=0
          DO 430 IT=1,NT
            LD=INDIN(IT)
            IF(LD.GT.II) GO TO 700
            KD=M3(IT)
            IF(KD.GE.LD) GO TO 410
            ND=KD
            KD=LD
            LD=ND
  410       ID=M1(IT)
            JD=M2(IT)
            IF(ID.NE.II.AND.KD.NE.II) GO TO 430
            IF(KD.LT.ID) GO TO 420
            IF(KD.EQ.ID.AND.LD.LE.JD) GO TO 420
            ND=ID
            ID=KD
            KD=ND
            ND=JD
            JD=LD
            LD=ND
  420       IF(JD.LT.JJ) GO TO 430
            IF(JD.GT.JJ) GO TO 700
            IF(KD.LT.KK) GO TO 430
            IF(KD.GT.KK) GO TO 700
            IF(LD.LT.LL) GO TO 430
            IF(LD.GT.LL) GO TO 700
            N4=N4+1
  430     CONTINUE
C
C     ----- CALCULATE Q4 FACTOR FOR THIS GROUP OF SHELLS -----
C
          Q4=DBLE(NT)/DBLE(N4)
C
C     ----- CHECK FOR REDUNDANT COMBINATIONS -----
C           THIS VERSION HALVES Q4 FOR [II,JJ]
C                       OR [IJ,IJ]
C
          CALL REDUN2(II,JJ,KK,LL,Q4,KATOM)
          IF(NPASS.EQ.0) GO TO 700
C
C     ----- PREPARE INDICES FOR SHELLS I,J,K AND L -----
C
          CALL DSHELL(KATOM,C,KSTART,KNG,KTYPE,KMIN,KMAX,KLOC,EX,CS)
          IF (NIJ.EQ.0) GO TO 700
C
C     ----- CALCULATE NUMBER OF ROOTS FOR SECOND DERIVATIVES -----
C
          NROOTS=(LIT+LJT+LKT+LLT-2+NDERIV)/2
C
C     ----- FORM PRODUCTS OF DENSITY MATRIX ELEMENTS -----
C
          IF (CALTYP.EQ.'MCSCF'.OR.CALTYP.EQ.'CI   '
     #  .OR.CALTYP.EQ.'GVBCI') THEN
            CALL MCDENS(II,JJ,KK,LL,Q4,shiz,ijoff,kloff,klsiz,rdmbf,
     #idmbf,idmsz,idmr,ioff,abdens,lenblk,abtemp,maxshl,imoshl,kloc,
     #kmin,kmax)
          ELSE
            CALL DAB(II,JJ,KK,LL,Q4,ia,dt,d,abdens,lenblk,jump)
          END IF
C
C     ----- ZERO VARIABLES TO ACCUMULATE SHELL DERIVATIVES -----
C
          IF (INTOUT.NE.0.OR.INFOUT.NE.0) THEN
            IF (NPASS.EQ.1) THEN
              MAXD=9
            ELSE IF (NPASS.EQ.4) THEN
              MAXD=3
            ELSE
              MAXD=6
            END IF
            DO 581 JUNK=1,MAXD
              CALL ZERO(DERINT(1,JUNK),IJ*KL)
  581       CONTINUE
C
C        ----- COMPUTE DERIVATIVE TWO_ELECTRON INTEGRALS AND
C              THEIR CONTRIBUTION TO THE GRADIENT            _____
C
            CALL DGEN1B (XIN,YIN,ZIN,DXI,DYI,DZI,DXJ,DYJ,DZJ,DXK,DYK,
     #DZK,len2d,DERINT(1,1),DERINT(1,2),DERINT(1,3),
     #  DERINT(1,4),DERINT(1,5),DERINT(1,6),
     #  DERINT(1,7),DERINT(1,8),DERINT(1,9),LENINT)
            CALL MAKGRD(DERINT,LENINT,ABDENS,LENBLK)
            CALL FORMEG(DTWO)
            IF (INTOUT.NE.0) CALL WRITE(II,JJ,KK,LL,Q4)
            IF (INFOUT.NE.0) CALL MAKSKB(II,JJ,KK,LL,Q4,bmat,derint,
     #lenint,dt,d,nbset,ia)
          ELSE
            XIDER=0.0
            YIDER=0.0
            ZIDER=0.0
            XJDER=0.0
            YJDER=0.0
            ZJDER=0.0
            XKDER=0.0
            YKDER=0.0
            ZKDER=0.0
C
C        ----- DIRECTLY COMPUTE TWO-ELECTRON CONTRIBUTION
C                             TO GRADIENT                 -----
C
            CALL DGEN1A(XIN,YIN,ZIN,DXI,DYI,DZI,DXJ,DYJ,DZJ,DXK,DYK,DZK,
     #LEN2D,abdens,lenblk)
            CALL FORMEG(DTWO)
          END IF
  700   CONTINUE
  800 CONTINUE
  900                   CONTINUE
 1000                 CONTINUE
C
C     ----- END OF SHELL LOOPS -----
C
 2000               CONTINUE
 3000             CONTINUE
 4000           CONTINUE
 5000         CONTINUE
C
C     ----- END OF LOOPS OF ANGULAR MOMENTUM QUANTUM NUMBER -----
C
 6000       CONTINUE
 7000     CONTINUE
 8000   CONTINUE
 9000 CONTINUE
C
C     ----- END OF LOOPS OVER ATOMS -----
C
 9100 CONTINUE
C
C     ----- FINISH WRITING OUT DERIVATIVE INTEGRALS -----
C
      IF (INTOUT.NE.0) THEN
        CALL FNWRIT
      END IF
C
C     ----- IF CALCULATED BMATRICES, CORRECT MAGNITUDES -----
C
C
C     ----- OFF-DIAGONALS MUST BE HALVED, SO DOUBLE DIAGONAL AND
C             THEN HALVE THE WHOLE THING
C
      IF (INFOUT.NE.0) THEN
        DO 9110 ISET=1,NBSET
          DO 9109 IAT=1,NAT
            DO 9108 IPQR=1,3
              IJ = 0
              DO 9107 I=1,NUM
                IJ = IJ + I
                BMAT(IJ,IPQR,IAT,ISET)=BMAT(IJ,IPQR,IAT,ISET)*2.0D+00
 9107         CONTINUE
 9108       CONTINUE
 9109     CONTINUE
 9110   CONTINUE
CTJL  WRITE(*,*) BMAT
C
        HALF=0.5D+00
        N=NNP*3*NAT*NBSET
        CALL VEWS(BMAT,BMAT,HALF,N)
C
      END IF
C
      RETURN
      END
      SUBROUTINE JK2DER(IA,DT,D,DTWO,XIN,YIN,ZIN,DXI,DYI,DZI,
     #DXJ,DYJ,DZJ,DXK,DYK,DZK,DD2D,LEN2D,ABDENS,LENBLK,
     #DERINT,LENINT,IBUF,LENIBF,BUF,LENBUF,ITAP18,
     #ITAP19,MXSPDF,MINSH,MAXSH,MXANGM,KATOM,C,
     #KSTART,KNG,KTYPE,KMIN,KMAX,KLOC,EX,CS,ISO,
     #FTWO,BMAT,ICT,PTR,DTR,INVT,NBSET,
     #shiz,ijoff,kloff,klsiz,rdmbf,idmbf,idmsz,idmr,ioff,
     #abtemp,maxshl,imoshl)
C
C DRIVER FOR TWO-ELECTRON PORTION OF SECOND DERIVATIVE CALCULATION
C WHICH EXPLICITLY FORMS ONLY THE FIRST DERIVATIVES OF THE INTEGRALS
C THE CONTRIBUTION OF THE SECOND DERIVATIVE INTEGRALS TO THE FORCE
C CONSTANT MATRIX IS DIRECTLY CALCULATED.
C      27 AUGUST 1983 AT BRL                                 PWS
C
      IMPLICIT REAL*8 (A-H,O-Z)
C
C     EXTENDED DUMMY IA,DT,D,DTWO,XIN,YIN,ZIN,DXI,DYI,DZI,DXJ,DYJ,DZJ
C    #,              DXK,DYK,DZK,DD2D,ABDENS,DERINT,IBUF,BUF,MXSPDF
C    #,              MINSH,MAXSH,KATOM,C,KSTART,KNG,KTYPE,KMIN,KMAX
C    #,              KLOC,EX,CS,ISO,FTWO,BMAT,ICT,PTR,DTR,INVT
C
      REAL*8 C(3,NAT),EX(NPRIM),CS(NPRIM),DD2D(LEN2D,18)
      REAL*8 FTWO(NAT3,NAT3),BMAT(NNP,3,NAT,NBSET),PTR(3,3,NT)
      REAL*8 DTR(6,6,NT),rdmbf(idmr)
      real*8 abtemp(maxshl,maxshl,maxshl,maxshl)
      INTEGER KATOM(NSHELL),KSTART(NSHELL),KNG(NSHELL),KTYPE(NSHELL)
      INTEGER KMIN(NSHELL),KMAX(NSHELL),KLOC(NSHELL),idmbf(idmsz)
      integer shiz(nnp),ijoff(nnp),kloff(nnp),klsiz(nnp),ioff(nnp)
      INTEGER ISO(NSHELL,NISO),ICT(NAT,NT),INVT(NT)
      LOGICAL OPEN
      CHARACTER*5 CALTYP
      CHARACTER*6 SCFTYP
C
      COMMON /SECOND/ NAT3
      COMMON /TAPES/  IOUT,ICHECK,INPUT,ITAP42,ITAP49
      COMMON /DSHLNO/ LIT,LJT,LKT,LLT,LOCI,LOCJ,LOCK,LOCL
     1,               MINI,MINJ,MINK,MINL,MAXI,MAXJ,MAXK,MAXL
     2,               NIJ,IJD,KLD,IJ,KL
      COMMON /RESTAR/ TIMLIM,IREST,NREC,INTLOC,IST,JST,KST,LST
      COMMON /ISOPAC/ INDIN(120),INDOUT(30)
      COMMON /TIMES/  TI,TX,TIM,INDIX
      COMMON /DINDEX/ IJGT(36),IJX(36),IJY(36),IJZ(36)
     1,               KLGT(78),KLX(78),KLY(78),KLZ(78)
     2,               IJDGT(36),KLDGT(36),KDG(10),LDG(10)
      COMMON /ROOT/   XX,U(9),WT(9),NROOTS
CIBM  COMMON /SHELLD/ NATOM(4),NPASS
      COMMON /SHELLD/ XIDER,YIDER,ZIDER,XJDER,YJDER,ZJDER
     2,               XKDER,YKDER,ZKDER,NATOM(4),NPASS
      COMMON /INFOA/  NAT,NUM,NNP,NSHELL,NIRRED,NT,NPRIM,MXT,NISO
      COMMON /CNTRL/  IPRINT,NDERIV,INTOUT,INFOUT,OPEN,SCFTYP,CALTYP
      COMMON /TCSCF/  OCC1,OCC12,OCC2,SOCC1,SOCC12,SOCC2,ITCSCF
      COMMON /COUPLC/ FOCC(5),ALP(5,5),BET(5,5),NTYPES
      COMMON /D2INT/  DD(45)
C
C
      INTEGER*4 ITIME1,ITIME2,ITIME3,ITIME4
C
      COMMON /TIME/   IXYZ(4),JXYZ(4),IFRM(4),JFRM(4), ITIME
C
C
      dimension imoshl(num)
      DIMENSION M0(8),M1(8),M2(8),M3(8)
      DIMENSION IA(NUM),DT(NNP),D(NNP,NTYPES),DTWO(3,NAT)
      DIMENSION XIN(LEN2D),YIN(LEN2D),ZIN(LEN2D)
      DIMENSION DXI(LEN2D),DYI(LEN2D),DZI(LEN2D)
      DIMENSION DXJ(LEN2D),DYJ(LEN2D),DZJ(LEN2D)
      DIMENSION DXK(LEN2D),DYK(LEN2D),DZK(LEN2D)
      DIMENSION ABDENS(LENBLK),DERINT(LENINT,9)
      DIMENSION IBUF(LENIBF),BUF(LENBUF)
      DIMENSION MXSPDF(NAT),MINSH(MXANGM,NAT),MAXSH(MXANGM,NAT)
C
C
C     ----- TWO ELECTRON CONTRIBUTION TO THE GRADIENT -----
C
CRBR  WRITE (IOUT,*) ' NUM =',NUM,' NAT3 =',NAT3,' NNP =',NNP
CRBR  WRITE (IOUT,*) ' NTYPES =',NTYPES,' NAT =',NAT,' LEN2D =',LEN2D
CRBR  WRITE (IOUT,*) ' LENBLK =',LENBLK,' LENINT =',LENINT
CRBR  WRITE (IOUT,*) ' LENIBF =',LENIBF,' LENBUF =',LENBUF
CRBR  WRITE (IOUT,*) ' MXANGM =',MXANGM
      CALL ZERO(DTWO,NAT3)
      CALL ZERO(FTWO,NAT3**2)
C
C     ----- SET SOME PARAMETERS -----
C
      CALL DDEBUT(SCFTYP)
      IF(IST.GT.NSHELL) GO TO 9100
C
C     ----- INITIALIZE SUBROUTINES -----
C
      CALL INSHEL(KATOM,C,KSTART,KNG,KTYPE,KMIN,KMAX,KLOC,EX,CS)
C
      IF (INTOUT.NE.0) CALL INWRIT(DERINT,LENINT,IBUF,LENIBF,BUF,
     #LENBUF,IA,ITAP18,ITAP19,NAT,NUM,
     #NNP)
C
      CALL IN2IJK(XIN,YIN,ZIN,DXI,DYI,DZI,DXJ,DYJ,DZJ,DXK,DYK,DZK,
     #DD2D(1,1),DD2D(1,2),DD2D(1,3),DD2D(1,4),DD2D(1,5),
     #DD2D(1,6),DD2D(1,7),DD2D(1,8),DD2D(1,9),
     #DD2D(1,10),DD2D(1,11),DD2D(1,12),DD2D(1,13),
     #DD2D(1,14),DD2D(1,15),DD2D(1,16),DD2D(1,17),
     #DD2D(1,18),LEN2D)
C
      CALL I2MIJK(XIN,YIN,ZIN,DXI,DYI,DZI,DXJ,DYJ,DZJ,DXK,DYK,DZK,
     #DD2D(1,1),DD2D(1,2),DD2D(1,3),DD2D(1,4),DD2D(1,5),
     #DD2D(1,6),DD2D(1,7),DD2D(1,8),DD2D(1,9),
     #DD2D(1,10),DD2D(1,11),DD2D(1,12),DD2D(1,13),
     #DD2D(1,14),DD2D(1,15),DD2D(1,16),DD2D(1,17),
     #DD2D(1,18),LEN2D,DERINT(1,1),DERINT(1,2),
     #DERINT(1,3),DERINT(1,4),DERINT(1,5),DERINT(1,6),
     #DERINT(1,7),DERINT(1,8),DERINT(1,9),LENINT,
     #ABDENS,LENBLK)
C
C
      CALL DABIN(IA,DT,D,ABDENS,LENBLK,jump)
C
      IF (INFOUT.NE.0) CALL INITB(BMAT,DERINT,LENINT,DT,D,NBSET,IA)
C
C
C     ----- ISHELL -----
C
      DO 9000 IAT=1,NAT
         DO 8000 JAT=1,IAT
            DO 7000 KAT=1,IAT
               DO 6000 LAT=1,KAT
C
                  DO 5000 ISPDF=1,MXSPDF(IAT)
                     JMXSPD=MXSPDF(JAT)
                     IF (IAT.EQ.JAT) JMXSPD=ISPDF
                     DO 4000 JSPDF=1,JMXSPD
                        KMXSPD=MXSPDF(KAT)
                        IF (IAT.EQ.KAT) KMXSPD=ISPDF
                        DO 3000 KSPDF=1,KMXSPD
                           LMXSPD=MXSPDF(LAT)
                           IF (KAT.EQ.LAT) LMXSPD=KSPDF
                           DO 2000 LSPDF=1,LMXSPD
C
C     ----- LOOP OVER SHELLS -----
C
                              DO 1000 II=MINSH(ISPDF,IAT),MAXSH(ISPDF,
     *                        IAT)
C
                                 DO 100 IT=1,NISO
  100                            INDOUT(IT)=ISO(II,IT)
                                 CALL ySOOUT
                                 DO 110 IT=1,NT
                                    ID=INDIN(IT)
                                    IF(ID.GT.II) GO TO 1000
  110                            M0(IT)=ID
C
C     ----- JSHELL -----
C
                                 MAXJJ=MAXSH(JSPDF,JAT)
                                 IF (MAXJJ.GT.II) MAXJJ=II
                                 DO 900 JJ=MINSH(JSPDF,JAT),MAXJJ
C
                                    JST=1
      DO 200 IT=1,NISO
  200 INDOUT(IT)=ISO(JJ,IT)
      CALL ySOOUT
      DO 220 IT=1,NT
         ID=M0(IT)
         JD=INDIN(IT)
         IF(JD.GT.II) GO TO 900
         IF(ID.GE.JD) GO TO 210
         ND=ID
         ID=JD
         JD=ND
  210    IF(ID.EQ.II.AND.JD.GT.JJ) GO TO 900
         M1(IT)=ID
  220 M2(IT)=JD
C
C     ----- KSHELL -----
C
      MAXKK=MAXSH(KSPDF,KAT)
      IF (MAXKK.GT.II) MAXKK=II
      DO 800 KK=MINSH(KSPDF,KAT),MAXKK
C
         KST=1
         DO 300 IT=1,NISO
  300    INDOUT(IT)=ISO(KK,IT)
         CALL ySOOUT
         DO 310 IT=1,NT
            KD=INDIN(IT)
            IF(KD.GT.II) GO TO 800
  310    M3(IT)=KD
C
C     ----- LSHELL -----
C
         MAXLL=MAXSH(LSPDF,LAT)
         IF (MAXLL.GT.KK) MAXLL=KK
         IF (II.EQ.KK.AND.MAXLL.GT.JJ) MAXLL=JJ
         DO 700 LL=MINSH(LSPDF,LAT),MAXLL
C
            LST=1
            DO 400 IT=1,NISO
  400       INDOUT(IT)=ISO(LL,IT)
            CALL ySOOUT
            N4=0
            DO 430 IT=1,NT
               LD=INDIN(IT)
               IF(LD.GT.II) GO TO 700
               KD=M3(IT)
               IF(KD.GE.LD) GO TO 410
               ND=KD
               KD=LD
               LD=ND
  410          ID=M1(IT)
               JD=M2(IT)
               IF(ID.NE.II.AND.KD.NE.II) GO TO 430
               IF(KD.LT.ID) GO TO 420
               IF(KD.EQ.ID.AND.LD.LE.JD) GO TO 420
               ND=ID
               ID=KD
               KD=ND
               ND=JD
               JD=LD
               LD=ND
  420          IF(JD.LT.JJ) GO TO 430
               IF(JD.GT.JJ) GO TO 700
               IF(KD.LT.KK) GO TO 430
               IF(KD.GT.KK) GO TO 700
               IF(LD.LT.LL) GO TO 430
               IF(LD.GT.LL) GO TO 700
               N4=N4+1
  430       CONTINUE
C
C     ----- CALCULATE Q4 FACTOR FOR THIS GROUP OF SHELLS -----
C
            Q4=FLOAT(NT)/FLOAT(N4)
C
C     ----- CHECK FOR REDUNDANT COMBINATIONS -----
C           THIS VERSION HALVES Q4 FOR [II,JJ]
C                       OR [IJ,IJ]
C
            CALL REDUN2(II,JJ,KK,LL,Q4,KATOM)
            IF(NPASS.EQ.0) GO TO 700
C
C     ----- PREPARE INDICES FOR SHELLS I,J,K AND L -----
C
            CALL DSHELL(KATOM,C,KSTART,KNG,KTYPE,KMIN,KMAX,KLOC,EX,CS)
            IF (NIJ.EQ.0) GO TO 700
C
C     ----- CALCULATE NUMBER OF ROOTS FOR SECOND DERIVATIVES -----
C
            NROOTS=(LIT+LJT+LKT+LLT-2+NDERIV)/2
C
C     ----- FORM PRODUCTS OF DENSITY MATRIX ELEMENTS -----
C
            IF (CALTYP.EQ.'MCSCF'.OR.CALTYP.EQ.'CI   '
     #   .OR.CALTYP.EQ.'GVBCI') THEN
               CALL MCDENS(II,JJ,KK,LL,Q4,
     #shiz,ijoff,kloff,klsiz,rdmbf,idmbf,idmsz,idmr,ioff,abdens,lenblk,
     #abtemp,maxshl,imoshl,kloc,kmin,kmax)
            ELSE
               CALL DAB(II,JJ,KK,LL,Q4,ia,dt,d,abdens,lenblk,jump)
            END IF
C
C     ----- ZERO VARIABLES TO ACCUMULATE SHELL DERIVATIVES -----
C
            IF (NPASS.EQ.1) THEN
               MAXD=9
            ELSE IF (NPASS.EQ.4) THEN
               MAXD=3
            ELSE
               MAXD=6
            END IF
            DO 560 JUNKD=1,MAXD
               CALL ZERO(DERINT(1,JUNKD),IJ*KL)
  560       CONTINUE
            CALL ZERO(DD,45)
C
C     ----- COMPUTE DERIVATIVE TWO_ELECTRON INTEGRALS AND
C           THEIR CONTRIBUTION TO THE GRADIENT            _____
C
            CALL DGEN2 (XIN,YIN,ZIN,DXI,DYI,DZI,DXJ,DYJ,DZJ,DXK,DYK,DZK,
     #DD2D(1,1),DD2D(1,2),DD2D(1,3),DD2D(1,4),DD2D(1,5),
     #DD2D(1,6),DD2D(1,7),DD2D(1,8),DD2D(1,9),
     #DD2D(1,10),DD2D(1,11),DD2D(1,12),DD2D(1,13),
     #DD2D(1,14),DD2D(1,15),DD2D(1,16),DD2D(1,17),
     #DD2D(1,18),LEN2D,DERINT(1,1),DERINT(1,2),
     #DERINT(1,3),DERINT(1,4),DERINT(1,5),DERINT(1,6),
     #DERINT(1,7),DERINT(1,8),DERINT(1,9),LENINT,
     #ABDENS,LENBLK)
            CALL MAKGRD(DERINT,LENINT,ABDENS,LENBLK)
            CALL FORMEG(DTWO)
            CALL FORME2(FTWO)
            IF (INTOUT.NE.0) CALL WRITE(II,JJ,KK,LL,Q4)
            IF (INFOUT.NE.0) CALL MAKSKB(II,JJ,KK,LL,Q4,bmat,derint,
     #lenint,dt,d,nbset,ia)
  700    CONTINUE
  800 CONTINUE
  900                            CONTINUE
 1000                         CONTINUE
C
C     ----- END OF SHELL LOOPS -----
C
 2000                      CONTINUE
 3000                   CONTINUE
 4000                CONTINUE
 5000             CONTINUE
C
C     ----- END OF LOOPS OF ANGULAR MOMENTUM QUANTUM NUMBER -----
C
 6000          CONTINUE
 7000       CONTINUE
 8000    CONTINUE
 9000 CONTINUE
C
C     ----- END OF LOOPS OVER ATOMS -----
C
 9100 CONTINUE
C
C     ----- FINISH WRITING OUT DERIVATIVE INTEGRALS -----
C
      IF (INTOUT.NE.0) THEN
         CALL FNWRIT
      END IF
C
C     ----- IF CALCULATED BMATRICES, CORRECT MAGNITUDES -----
C
C
C     ----- OFF-DIADONALS MUST BE HALVED, SO DOUBLE DIAGONAL AND
C             THEN HALVE THE WHOLE THING
C
      IF (INFOUT.NE.0) THEN
         DO 9110 ISET=1,NBSET
            DO 9109 IAT=1,NAT
               DO 9108 IPQR=1,3
                  IJ=0
                  DO 9107 I=1,NUM
                     IJ=IJ+I
                     BMAT(IJ,IPQR,IAT,ISET)=BMAT(IJ,IPQR,IAT,ISET)
     #               *2.0D+00
 9107             CONTINUE
 9108          CONTINUE
 9109       CONTINUE
 9110    CONTINUE
C
         HALF=0.5D+00
         N=NNP*3*NAT*NBSET
         CALL VEWS(BMAT,BMAT,HALF,N)
C
      END IF
      RETURN
      END
      SUBROUTINE LIMITS(MXSPDF,MINSH,MAXSH,NAT,NSHELL,KATOM,
     #KTYPE,MXANGM)
C
      IMPLICIT INTEGER (A-Z)
C
C     EXTENDED DUMMY MXSPDF,MINSH,MAXSH,KATOM,KTYPE
C
      COMMON /TAPES/  IOUT,ICHECK,INPUT,ITAP42,ITAP49
      DIMENSION MXSPDF(NAT),MINSH(MXANGM,NAT),MAXSH(MXANGM,NAT)
      DIMENSION KATOM(NSHELL),KTYPE(NSHELL)
C
      DO 2 I=1,NAT
        MXSPDF(I)=0
        DO 1 J=1,MXANGM
          MINSH(J,I)=0
          MAXSH(J,I)=0
    1   CONTINUE
    2 CONTINUE
C
      DO 3 I=1,NSHELL
        ATOM=KATOM(I)
        IF (KTYPE(I).GT.MXSPDF(ATOM)) MXSPDF(ATOM)=KTYPE(I)
    3 CONTINUE
C
      DO 6 ATOM=1,NAT
        DO 5 SPDF=1,MXSPDF(ATOM)
          DO 4 SHELL=1,NSHELL
            IF (KATOM(SHELL).EQ.ATOM.AND.KTYPE(SHELL).EQ.SPDF) THEN
              IF (MINSH(SPDF,ATOM).EQ.0) MINSH(SPDF,ATOM)=SHELL
              MAXSH(SPDF,ATOM)=SHELL
            END IF
    4     CONTINUE
    5   CONTINUE
    6 CONTINUE
C
      DO 9 ATOM=1,NAT
        DO 8 SPDF=1,MXSPDF(ATOM)
          DO 7 SHELL=MINSH(SPDF,ATOM),MAXSH(SPDF,ATOM)
            IF (KTYPE(SHELL).NE.SPDF.OR.KATOM(SHELL).NE.ATOM)
     #      STOP ' # DERIV # ERROR: BASIS FUNCTION ORDER'
    7     CONTINUE
    8   CONTINUE
    9 CONTINUE
C
      DO 11 ATOM=1,NAT
        MX=MXSPDF(ATOM)
        WRITE (ICHECK,901) ATOM,MXSPDF(ATOM),(I,MINSH(I,ATOM)
     #  ,    MAXSH(I,ATOM),I=1,MX)
  901   FORMAT (/,' ATOM # ',I2,' MAXSPDF',I2,/,('   SPDF ',I1,5X,I3
     #  ,          '-',I3))
   11 CONTINUE
      RETURN
      END
      SUBROUTINE MAIN(Z,A,MAXCOR)
C
C
C     THE SUBROUTINES CALL EACH OTHER IN THE FOLLOWING PATTERN
C         (VARIOUS PRINT ROUTINES ARE AFTER MAIN)
C
C        MAIN
C                  CONVRT
C                            INPSYM
C                                      GCENTR
C                            GETRAN
C                  GETMAT
C                  SCFINP
C                            DMAT
C                                      COMTRN
C                  NUCDER
C                  VDERIV
C                            INDEX
C                            TDER (ENTRY IN VDER)
C                            (ROOTS)
C                            VDER
C                  GLIMIT
C                  JKDER
C                            DDEBUT
C                            INCID
C                            ISOOUT
C                            REDUN2
C                            REDUND
C                            DSHELL
C                                      DPRIM
C                            DAB
C                            CIDENS (ENTRY IN INCID)
C                            CHDENS
C                            DGENRL
C                                      SSSS
C                                      PSSS
C                                      PSPS
C                                      PPSS
C                                      (ROOTS)
C                                      (XYZIJK)
C                                      (FRMIJK)
C                            MAKGRD
C                            FORME2
C                            MAKSKB (ENTRY IN INITB)
C                            FORMEG
C                  SYMTRY
C                            LOCAL
C                            TRANS
C                            ROT
C                            ISOOUT
C                            RDFR
C
C
C
C     NAMES IN PARENTHESES REFER TO COLLECTIONS OF SIMILAR ROUTINES,EG
C
C     (ROOTS) = RT123, ROOT4, ROOT5, DROOT
C
C
C
      IMPLICIT INTEGER (A-Z)
C
C
CIBM  INTEGER*8 FIRSTD,XECOND
      REAL*8 Z(MAXCOR),SECS
      LOGICAL OPEN
      CHARACTER*5 CALTYP,NOSYM
      CHARACTER*6 SCFTYP,LEVEL,DERTYP,CITYP
      CHARACTER*11 NAME
C
      COMMON /CNTRL/  IPRINT,NDERIV,INTOUT,INFOUT,OPEN,SCFTYP,CALTYP
      COMMON /INFOA/  NAT,NUM,NNP,NSHELL,NIRRED,NT,NPRIM,MXT,NISO
      COMMON /ITAP30/ I10(200),ITAP30,IEND,MPOINT,MCONST,MCALCS,
     #NCALCS,IFCB10(16)
      COMMON /TAPES/  IOUT,ICHECK,INPUT,ITAP42,ITAP49
      COMMON /NAME/   INAME,NAME
C
      DIMENSION A(1)
C
CIBM  DATA FIRSTD/'FIRST   '/, XECOND /'SECOND  '/
C
      NEED   = 1
      ICHECK = 3
      INPUT  = 5
      IOUT   = 6
      ITAP42 = 42
      ITAP49 = 49
C
C     ----- OPEN OUTPUT FILES WITH APPEND ACCESS -----
C
CIBM  OPEN (UNIT=IOUT,OPENMODE='A')
CIBM  OPEN (UNIT=6,OPENMODE='A')
C
C
C
      CALL LOCATE(INPUT,'# NAME ###',ERROR)
C
      IF (ERROR.EQ.0) THEN
        READ (INPUT,'(A11)') NAME
        INAME=0
      ELSE
        INAME=1
      END IF
C
      CALL LOCATE(INPUT,'# NEWDER #',ERROR)
C
      IF (ERROR.NE.0) THEN
        WRITE (IOUT,901)
  901   FORMAT (//,' DERIV: WARNING -- NO INPUT',/)
        CALTYP(1:5)='SCF  '
        NDERIV=1
        INTOUT=0
        INFOUT=0
      ELSE
        READ (INPUT,'(A5,5X,A6,I5)') CALTYP,LEVEL,IPRINT
        READ (INPUT,'(A5,2I5)') NOSYM,INTOUT,INFOUT
        CLOSE (UNIT=INPUT)
C
        IF (CALTYP.NE.'SCF  '.AND.CALTYP.NE.'CI   '.AND.CALTYP.NE.
     #  'MCSCF'.AND.CALTYP.NE.'TCSCF'.AND.CALTYP.NE.'GVBCI')  THEN
          WRITE (IOUT,902) CALTYP,LEVEL,IPRINT
  902     FORMAT (//,' UNKNOWN CALCULATION TYPE: ',A5,1X,A5,I5,//)
          STOP
        END IF
        NDERIV=0
        IF (LEVEL.EQ.'FIRST ') NDERIV=1
        IF (LEVEL.EQ.'SECOND') NDERIV=2
        IF (LEVEL.EQ.'THIRD ') NDERIV=3
        IF (LEVEL.EQ.'FOURTH') NDERIV=4
        IF (NDERIV.LE.0) THEN
          WRITE (IOUT,903) LEVEL
  903     FORMAT (//,' CANNOT UNDERSTAND LEVEL OF DERIVATIVE ',A5,//)
          STOP
        END IF
      END IF
C
      IF (INFOUT.EQ.0) THEN
        IF (NDERIV.EQ.2.AND.CALTYP.EQ.'SCF  ') INFOUT=1
        IF (NDERIV.EQ.2.AND.CALTYP.EQ.'TCSCF') INFOUT=1
        IF (NDERIV.EQ.2.AND.CALTYP.EQ.'CI   ') INFOUT=1
        IF (NDERIV.EQ.1.AND.CALTYP.EQ.'CI   ') INFOUT=1
        IF (NDERIV.EQ.1.AND.CALTYP.EQ.'GVBCI') INFOUT=1
        IF (NDERIV.EQ.3.AND.CALTYP.EQ.'SCF  ') THEN
          INFOUT=2
          NDERIV=2
        END IF
      END IF
C
      IF (IPRINT.EQ.0) THEN
        IPRINT=512+64+8+2
        IF (NDERIV.EQ.2) IPRINT=IPRINT+1024+128+16+4
      END IF
C
C
C
C     ----- GET CONSTANTS FROM TAPE30 -----
C
      ITAP30=30
      CALL RFILE(ITAP30)
      CALL WREADW(ITAP30,I10,200,101,JUNK)
C
      IEND=I10(1)
      MPOINT=I10(2)
      MCONST=I10(3)
      MCALCS=I10(4)
      NCALCS=I10(5)
      NAT=I10(19)
      NUM=I10(22)
      NNP=I10(23)
      NSHELL=I10(27)
      NIRRED=I10(28)
      NT=I10(29)
      NPRIM=I10(32)
      MXT=I10(36)
      NISO=I10(40)
C
C     ----- DIVIDE CORE FOR BASIS SET INFO -----
C
      EX=NEED
      CSPD=EX+NPRIM
      KATOM=WPADTI(CSPD+NPRIM*3)
      KTYPE=KATOM+NSHELL
      KSTART=KTYPE+NSHELL
      KLOC=KSTART+NSHELL
      KMIN=KLOC+NSHELL
      KMAX=KMIN+NSHELL
      KNG=KMAX+NSHELL
      ZAN=IADTWP(KNG+NSHELL)
      C=ZAN+NAT
      T=C+3*NAT
      INVT=WPADTI(T+MXT)
      ISO=INVT+NT
      LBLAT=ISO+NSHELL*NISO
      ICT=LBLAT+2*NAT
      PTR=IADTWP(ICT+NAT*NT)
      DTR=PTR+3*3*NT
      NEED=DTR+6*6*NT
C
C     ----- FORM INTEGER EQUIVALENTS FOR REAL ADDRESSES -----
C
      IEX=WPADTI(EX)
      ICSPD=WPADTI(CSPD)
      IZAN=WPADTI(ZAN)
      IC=WPADTI(C)
      IT=WPADTI(T)
      IPTR=WPADTI(PTR)
      IDTR=WPADTI(DTR)
C
      CALL BASIS(A(IEX),A(ICSPD),A(KATOM),A(KTYPE),A(KSTART),
     #A(KLOC),A(KMIN),A(KMAX),A(KNG),A(IZAN),A(IC),A(IT),
     #A(INVT),A(ISO),A(LBLAT),A(ICT),A(IPTR),A(IDTR),Z(CSPD))
C
C
C     ----- FORCE CALCULATION TO NOSYM IF DESIRED -----
C
      IF (NOSYM.EQ.'NOSYM') CALL SETNOS(NT,MXT,Z(T),A(ISO),NISO,
     #NSHELL)
C
C
C     ----- CALL APPROPRIATE DRIVER FOR CALCULATION -----
C
      IF (NDERIV.EQ.1) THEN
C       CALL M:LOAD(FIRSTD,JUNK)
        CALL SCF1(A,Z,NEED,MAXCOR,Z(EX),Z(CSPD)
     #  ,            A(KATOM),A(KTYPE),A(KSTART),A(KLOC),A(KMIN)
     #  ,            A(KMAX),A(KNG),Z(ZAN),Z(C),Z(T),A(INVT),A(ISO)
     #  ,            A(LBLAT),A(ICT),Z(PTR),Z(DTR))
C
      ELSE IF (NDERIV.EQ.2) THEN
C       CALL M:LOAD(XECOND,JUNK)
        CALL SCF2(A,Z,NEED,MAXCOR,Z(EX),Z(CSPD)
     #  ,            A(KATOM),A(KTYPE),A(KSTART),A(KLOC),A(KMIN)
     #  ,            A(KMAX),A(KNG),Z(ZAN),Z(C),Z(T),A(INVT),A(ISO)
     #  ,            A(LBLAT),A(ICT),Z(PTR),Z(DTR))
      END IF
C
CIBM  CALL CPUTIM(SECS)
CIBM  MINS=SECS/60
CIBM  HRS=MINS/60
CIBM  SECS=SECS-MINS*60
CIBM  MINS=MINS-HRS*60
      WRITE (IOUT,*) '            '
      WRITE (ICHECK,904) HRS,MINS,SECS
  904 FORMAT (//,' **** DERIVATIVE INTEGRALS FINISHED IN ',I4,':',I2
     #,       ':',F6.3,//)
C
      RETURN
      END
      SUBROUTINE MAKD1E(DENT,DONE,DH,NAT,NUM,NNP,DENW,DOVL,IBF2AT,
     #DS)
C
C
C     EXTENDED DUMMY DENT,DONE,DH,DENW,DOVL,IBF2AT,DS
C
      REAL*8 DENT(NNP),DONE(3,NAT),DH(NNP,3,NAT),DOT,DENW(NNP)
      REAL*8 DOVL(3,NAT),DS(NNP,3),DENS
C
      COMMON /TAPES/  IOUT,ICHECK,INPUT,ITAP42,ITAP49
      DIMENSION IBF2AT(NUM)
C
C     ----- TEMPORARILY MODIFY DENT TO ACCOUNT FOR REPETITION -----
C                            OF INTEGRALS
C
      DO 1 I=1,NUM
        IJ=I*(I+1)/2
        DENT(IJ)=DENT(IJ)/2.0D+00
    1 CONTINUE
C
C     ----- CALCULATE GRADIENT CONTRIBUTION -----
C
      DO 3 IATOM=1,NAT
        DO 2 IXYZ=1,3
          DONE(IXYZ,IATOM)=2.0D+00*DOT(DENT,DH(1,IXYZ,IATOM),NNP)
    2   CONTINUE
    3 CONTINUE
C
C     ----- RESTORE DENT -----
C
      DO 4 I=1,NUM
        IJ=I*(I+1)/2
        DENT(IJ)=DENT(IJ)*2.0D+00
    4 CONTINUE
C
C     ----- NOW FOR OVERLAP CONTRIBUTION -----
C
      DO 9 I=1,3
        DO 8 J=1,NAT
          DOVL(I,J)=0.0D+00
    8   CONTINUE
    9 CONTINUE
      IJ=0
      DO 7 I=1,NUM
        IATOM=IBF2AT(I)
        DO 6 J=1,I
          JATOM=IBF2AT(J)
          IJ=IJ+1
          DENS=2.0D+00*DENW(IJ)
          DO 5 IXYZ=1,3
            DOVL(IXYZ,IATOM)=DOVL(IXYZ,IATOM)+DENS*DS(IJ,IXYZ)
            DOVL(IXYZ,JATOM)=DOVL(IXYZ,JATOM)-DENS*DS(IJ,IXYZ)
    5     CONTINUE
    6   CONTINUE
    7 CONTINUE
C
      RETURN
      END
      SUBROUTINE MAKGRD(DERINT,LENINT,ABDENS,LENBLK)
C
C
C
      IMPLICIT REAL*8 (A-H,O-Z)
C
C     EXTENDED DUMMY DERINT,ABDENS
C
      COMMON /TAPES/  IOUT,ICHECK,INPUT,ITAP42,ITAP49
      COMMON /DSHLNO/ LIT,LJT,LKT,LLT,LOCI,LOCJ,LOCK,LOCL
     1,               MINI,MINJ,MINK,MINL,MAXI,MAXJ,MAXK,MAXL
     2,               NIJ,IJD,KLD,IJ,KL
CIBM  COMMON /SHELLD/ NATOM(4),NPASS
      COMMON /SHELLD/ XIDER,YIDER,ZIDER,XJDER,YJDER,ZJDER
     2,               XKDER,YKDER,ZKDER,NATOM(4),NPASS
C
      DIMENSION DERINT(LENINT,9),ABDENS(LENBLK)
C
      N=IJ*KL
      IF (NPASS.EQ.1) THEN
        XIDER = DOT(DERINT(1,1),ABDENS,N)
        YIDER = DOT(DERINT(1,2),ABDENS,N)
        ZIDER = DOT(DERINT(1,3),ABDENS,N)
        XJDER = DOT(DERINT(1,4),ABDENS,N)
        YJDER = DOT(DERINT(1,5),ABDENS,N)
        ZJDER = DOT(DERINT(1,6),ABDENS,N)
        XKDER = DOT(DERINT(1,7),ABDENS,N)
        YKDER = DOT(DERINT(1,8),ABDENS,N)
        ZKDER = DOT(DERINT(1,9),ABDENS,N)
      ELSE IF (NPASS.EQ.2) THEN
        XIDER = DOT(DERINT(1,1),ABDENS,N)
        YIDER = DOT(DERINT(1,2),ABDENS,N)
        ZIDER = DOT(DERINT(1,3),ABDENS,N)
        XJDER = DOT(DERINT(1,4),ABDENS,N)
        YJDER = DOT(DERINT(1,5),ABDENS,N)
        ZJDER = DOT(DERINT(1,6),ABDENS,N)
      ELSE IF (NPASS.EQ.3) THEN
        XIDER = DOT(DERINT(1,1),ABDENS,N)
        YIDER = DOT(DERINT(1,2),ABDENS,N)
        ZIDER = DOT(DERINT(1,3),ABDENS,N)
        XKDER = DOT(DERINT(1,4),ABDENS,N)
        YKDER = DOT(DERINT(1,5),ABDENS,N)
        ZKDER = DOT(DERINT(1,6),ABDENS,N)
      ELSE IF (NPASS.EQ.4) THEN
        XIDER = DOT(DERINT(1,1),ABDENS,N)
        YIDER = DOT(DERINT(1,2),ABDENS,N)
        ZIDER = DOT(DERINT(1,3),ABDENS,N)
      ELSE
        STOP 'INVALID VALUE OF NPASS IN MAKGRD'
      END IF
      RETURN
      END
      SUBROUTINE MAKONE(DHF,DH,DS,C,ZAN,EX,CS,katom,kstart,kng,ktype,
     #kmin,kmax,kloc,ia,dt)
C
C  CALCULATE DERIVATIVE ONE-ELECTRON INTEGRALS AND OVERLAP
C     TERMS. TOTAL DENSITY MATRIX IS DT, LAGRANGIAN (OR ENERGY W
C     WEIGHTED DENSITY MATRIX) IS W.
C
      IMPLICIT REAL*8 (A-H,O-Z)
C
C     EXTENDED DUMMY DHF,DH,DS,C,ZAN,EX,CS
C
      REAL*8 C(3,NAT),ZAN(NAT),EX(NPRIM),CS(NPRIM),dt(nnp)
      LOGICAL DIAG
      LOGICAL OPEN
      integer katom(nshell),kstart(nshell),kng(nshell),ktype(nshell)
      integer kmin(nshell),kmax(nshell),kloc(nshell),ia(nnp)
      CHARACTER*5 CALTYP
      CHARACTER*6 SCFTYP
C
      COMMON /CNTRL/  IPRINT,NDERIV,INTOUT,INFOUT,OPEN,SCFTYP,CALTYP
      COMMON /TAPES/  IOUT,ICHECK,INPUT,ITAP42,ITAP49
      COMMON /OUTPUT/ NPRINT,ITOL,ICUT,NORMF,NORMP,NOPK
      COMMON /INDEX/  DENS(100),IJ,IJX(100),IJY(100),IJZ(100)
     #,               IPOINT(100)
      COMMON /ISHELL/  II,IATOM,XI,YI,ZI,IGMIN,IGMAX,LIT,MINI,MAXI,LOCI
      COMMON /JSHELL/  JJ,JATOM,XJ,YJ,ZJ,JGMIN,JGMAX,LJT,MINJ,MAXJ,LOCJ
     #,                RR
      COMMON /DSTVP/  T,X0,Y0,Z0,NI,NJ,CX,CY,CZ,D0DI,D0DJ,VX,VY,VZ,UU
     #,               D0DC,DVX,DVY,DVZ,               WIVX,WIVY,WIVZ
     #,                                    WJVX,WJVY,WJVZ
     #,               WIXDVX,WIYDVY,WIZDVZ
     #,               DEXDXI,DEXDYI,DEXDZI,DEXDXJ,DEXDYJ,DEXDZJ
     #,               DEXDII,DEXDIJ,DEXDJJ,DEXDIC,DEXDJC
     #,               TAI,TAJ,TAA,ICATOM
      COMMON /INFOA/  NAT,NUM,NNP,NSHELL,NIRRED,NT,NPRIM,MXT,NISO
      COMMON /ROOT/   XX,U(9),WT(9),NROOTS
C
      DIMENSION XIN(16),YIN(16),ZIN(16),DXC(16),DYC(16),DZC(16)
      DIMENSION WXI(16),WYI(16),WZI(16),WXJ(16),WYJ(16),WZJ(16)
      DIMENSION WXIDXC(16),WYIDYC(16),WZIDZC(16)
      DIMENSION DHF(3,NAT),DH(NNP,3,NAT),DS(NNP,3)
C
      DATA PI212 /1.1283791670955D+0/
C
C
C
      DO 2 I=1,NAT
        DO 1 J=1,3
          DHF(J,I)=0.0D+00
          DO 1 K=1,NNP
            DH(K,J,I)=0.0D+00
    1   CONTINUE
    2 CONTINUE
      DO 4 I=1,3
        DO 3 J=1,NNP
          DS(J,I)=0.0D+00
    3   CONTINUE
    4 CONTINUE
C
C
C
      ITOL=20
      TOL=ITOL*2.30258D+00
C
C     ----- I SHELL -----
C
      DO 5000 II=1,NSHELL
C
C     ----- J SHELL -----
C
        DO 5000 JJ=1,II
C
C     ----- PREPARE INDICES FOR PAIRS OF (I,J) FUNCTIONS -----
C
          CALL INDEXX(c,katom,kstart,kng,ktype,kmin,kmax,kloc,ia,dt)
          IPONT= (IATOM-1)*NNP
          JPONT= (JATOM-1)*NNP
C
          IAPT = (IATOM-1)*3+1
          JAPT = (JATOM-1)*3+1
          IAPTT= IAPT*(IAPT+1)/2
          JAPTT= JAPT*(JAPT+1)/2
          MAPT = MAX(IAPT,JAPT)
          NAPT = MIN(IAPT,JAPT)
          IJAPT= MAPT*(MAPT-1)/2+NAPT
C
          XIMXJ=XI-XJ
          YIMYJ=YI-YJ
          ZIMZJ=ZI-ZJ
C
C     ----- CALCULATE CORRECT NUMBER OF ROOTS TO USE FOR RYS QUAD. -
C
          NROOTS=(LIT+LJT+NDERIV)/2
C
C     ----- ZERO TEMPORARY VARIABLES -----
C
          DVDXI=0.0D+00
          DVDYI=0.0D+00
          DVDZI=0.0D+00
          DVDXJ=0.0D+00
          DVDYJ=0.0D+00
          DVDZJ=0.0D+00
          DTDX  =0.0D+00
          DTDY  =0.0D+00
          DTDZ  =0.0D+00
          DSDX  =0.0D+00
          DSDY  =0.0D+00
          DSDZ  =0.0D+00
C
C     ----- I PRIMITIVE -----
C
          DO 3000 IG=IGMIN,IGMAX
            CI=CS(IG)
            AI=EX(IG)
            TAI=AI*2.0D+00
            ARRI=AI*RR
            AXI=AI*XI
            AYI=AI*YI
            AZI=AI*ZI
C
C     ----- J PRIMITIVE -----
C
            IF (II.EQ.JJ) JGMAX=IG
            DO 3000 JG=JGMIN,JGMAX
              AJ=EX(JG)
              TAJ=AJ*2.0D+00
              AA=AI+AJ
              TAA=TAI+TAJ
              RHO2=AI*AJ*2.0D+00/AA
              TEMP=AJ*ARRI/AA
C
C     ----- IGNORE INTEGRAL IF PRE-EXPONENTIAL TOO SMALL -----
C
              IF (TEMP.LE.TOL) THEN
C
C     ----- DENSITY FACTOR -----
C
                DIJ=CI*CS(JG)*EXP(-TEMP)
                IF (II.EQ.JJ.AND.IG.NE.JG) DIJ=DIJ*2.0D+00
                DIJPI=DIJ*PI212/AA
                DIJ=-DIJ
C
                AAX=AXI+AJ*XJ
                AAY=AYI+AJ*YJ
                AAZ=AZI+AJ*ZJ
                AX=AAX/AA
                AY=AAY/AA
                AZ=AAZ/AA
C
C     ----- CALCULATE DERIVATIVE CONTRIBUTIONS FROM -----
C                KINETIC AND OVERLAP INTEGRALS
C
                IF (IATOM.NE.JATOM) THEN
                  X0=AX
                  Y0=AY
                  Z0=AZ
                  T=DSQRT(AA)
                  ST=1.0D0/T
                  IN=-4
                  DO 1010 NI=1,LIT
                    IN=IN+4
                    DO 1010 NJ=1,LJT
                      JN=IN+NJ
                      CALL TDER
                      XIN(JN)=VX             * ST
                      YIN(JN)=VY             * ST
                      ZIN(JN)=VZ*DIJ         * ST
                      WXI(JN)=WIVX           * ST
                      WYI(JN)=WIVY           * ST
                      WZI(JN)=WIVZ*DIJ       * ST
                      DXC(JN)=DVX            * ST
                      DYC(JN)=DVY            * ST
                      DZC(JN)=DVZ*DIJ        * ST
                      WXIDXC(JN)=WIXDVX      * ST
                      WYIDYC(JN)=WIYDVY      * ST
                      WZIDZC(JN)=WIZDVZ*DIJ  * ST
 1010             CONTINUE
C
C     ----- COMBINE TWO-DIMENSIONAL INTEGRALS TO FORM INTEGRALS -----
C
                  DO 1050 I=1,IJ
                    NX=IJX(I)
                    NY=IJY(I)
                    NZ=IJZ(I)
                    D=DENS(I)*0.5D0
                    X = XIN(NX)
                    Y = YIN(NY)
                    Z = ZIN(NZ)
                    XY = X*Y
                    XZ = X*Z
                    YZ = Y*Z
                    DX = DXC(NX)
                    DY = DYC(NY)
                    DZ = DZC(NZ)
                    WX = WXI(NX)
                    WY = WYI(NY)
                    WZ = WZI(NZ)
                    WDX = WXIDXC(NX)
                    WDY = WYIDYC(NY)
                    WDZ = WZIDZC(NZ)
                    IP=IPOINT(I)
                    DS(IP,1)=DS(IP,1)-WX*YZ
                    DS(IP,2)=DS(IP,2)-WY*XZ
                    DS(IP,3)=DS(IP,3)-WZ*XY
                    XTEMPT = (WDX*YZ + WX * (DY*Z + Y*DZ)) * 0.5D
     *              +00
                    YTEMPT = (WDY*XZ + WY * (DX*Z + X*DZ)) * 0.5D
     *              +00
                    ZTEMPT = (WDZ*XY + WZ * (DX*Y + X*DY)) * 0.5D
     *              +00
                    DH(IP,1,IATOM)=DH(IP,1,IATOM)+XTEMPT
                    DH(IP,1,JATOM)=DH(IP,1,JATOM)-XTEMPT
                    DH(IP,2,IATOM)=DH(IP,2,IATOM)+YTEMPT
                    DH(IP,2,JATOM)=DH(IP,2,JATOM)-YTEMPT
                    DH(IP,3,IATOM)=DH(IP,3,IATOM)+ZTEMPT
                    DH(IP,3,JATOM)=DH(IP,3,JATOM)-ZTEMPT
 1050             CONTINUE
                END IF
C
C     ----- LOOP OVER ATOMS IN POTENTIAL TERM -----
C
                DO 2000 IC=1,NAT
                  ICATOM=IC
C
                  KAPT = (ICATOM-1)*3+1
                  KAPTT= KAPT*(KAPT+1)/2
                  MMAPT=MAX(IAPT,KAPT)
                  NNAPT=MIN(IAPT,KAPT)
                  IKAPT=MMAPT*(MMAPT-1)/2+NNAPT
                  MMAPT=MAX(JAPT,KAPT)
                  NNAPT=MIN(JAPT,KAPT)
                  JKAPT=MMAPT*(MMAPT-1)/2+NNAPT
C
                  ZNUC=-ZAN(IC)*DIJPI
                  CX=C(1,IC)
                  CY=C(2,IC)
                  CZ=C(3,IC)
                  XX=AA*((AX-CX)**2+(AY-CY)**2+(AZ-CZ)**2)
                  IF (NROOTS.LE.3) THEN
                    CALL RT123
                  ELSE IF (NROOTS.EQ.4) THEN
                    CALL ROOT4
                  ELSE IF (NROOTS.EQ.5) THEN
                    CALL ROOT5
                  ELSE
                    STOP 'NOT ENOUGH ROOTS IN VDERIV'
                  END IF
                  HFDX=0.0
                  HFDY=0.0
                  HFDZ=0.0
                  DO 1500 IROOT=1,NROOTS
                    UU=AA*U(IROOT)
                    WW=WT(IROOT)*ZNUC
                    TT=AA+UU
                    T=DSQRT(TT)
                    X0=(AAX+UU*CX)/TT
                    Y0=(AAY+UU*CY)/TT
                    Z0=(AAZ+UU*CZ)/TT
C
C     ----- CALCULATE TWO-DIMENSIONAL INTEGRALS -----
C
                    IN=-4
                    DO 1100 NI=1,LIT
                      IN=IN+4
                      DO 1100 NJ=1,LJT
                        JN=IN+NJ
                        CALL VDER
                        XIN(JN)=VX
                        YIN(JN)=VY
                        ZIN(JN)=VZ*WW
                        DXC(JN)=DVX
                        DYC(JN)=DVY
                        DZC(JN)=DVZ*WW
                        WXI(JN)=WIVX
                        WYI(JN)=WIVY
                        WZI(JN)=WIVZ*WW
                        WXJ(JN)=WJVX
                        WYJ(JN)=WJVY
                        WZJ(JN)=WJVZ*WW
 1100               CONTINUE
C
C     ----- COMBINE TWO-DIMENSIONAL INTEGRALS TO FORM INTEGRALS -----
C
                    ICPONT = (IC-1)*NNP
                    IDIAG=2
                    DO 1200 I=1,IJ
                      NX=IJX(I)
                      NY=IJY(I)
                      NZ=IJZ(I)
                      DENSTY=DENS(I)
                      IP=IPOINT(I)
                      X = XIN(NX)
                      Y = YIN(NY)
                      Z = ZIN(NZ)
                      XY = X*Y
                      XZ = X*Z
                      YZ = Y*Z
                      XTEMP1 = DXC(NX)*YZ
                      YTEMP1 = DYC(NY)*XZ
                      ZTEMP1 = DZC(NZ)*XY
                      HFDX  = HFDX + XTEMP1*DENSTY
                      HFDY  = HFDY + YTEMP1*DENSTY
                      HFDZ  = HFDZ + ZTEMP1*DENSTY
                      DH(IP,1,IC)=DH(IP,1,IC)+XTEMP1
                      DH(IP,2,IC)=DH(IP,2,IC)+YTEMP1
                      DH(IP,3,IC)=DH(IP,3,IC)+ZTEMP1
                      XTEMP2 =  WXI(NX)*YZ
                      YTEMP2 =  WYI(NY)*XZ
                      ZTEMP2 =  WZI(NZ)*XY
                      DH(IP,1,IATOM)=DH(IP,1,IATOM)+XTEMP2
                      DH(IP,2,IATOM)=DH(IP,2,IATOM)+YTEMP2
                      DH(IP,3,IATOM)=DH(IP,3,IATOM)+ZTEMP2
                      XTEMP3 =  WXJ(NX)*YZ
                      YTEMP3 =  WYJ(NY)*XZ
                      ZTEMP3 =  WZJ(NZ)*XY
                      DH(IP,1,JATOM)=DH(IP,1,JATOM)+XTEMP3
                      DH(IP,2,JATOM)=DH(IP,2,JATOM)+YTEMP3
                      DH(IP,3,JATOM)=DH(IP,3,JATOM)+ZTEMP3
 1200               CONTINUE
 1500             CONTINUE
                  DHF(1,IC)=DHF(1,IC) + HFDX
                  DHF(2,IC)=DHF(2,IC) + HFDY
                  DHF(3,IC)=DHF(3,IC) + HFDZ
 2000           CONTINUE
              END IF
 3000     CONTINUE
C
 5000 CONTINUE
C
      RETURN
      END
      SUBROUTINE MCDEN1(SHIZ,IJOFF,KLOFF,KLSIZ,RDMBF,IDMBF,IDMSZ,IDMR,
     1IOFF,ABDENS,LENBLK,ABTEMP,MAXSHL,IMOSHL,KLOC,KMIN,KMAX)
C
C
      IMPLICIT REAL*8 (A-H,O-Z)
C
C    #,              IMOSHL,KLOC,KMIN,KMAX,RDMBF
C
      REAL*8 RDMBF(IDMR),ABDENS(LENBLK)
      REAL*8 ABTEMP(MAXSHL,MAXSHL,MAXSHL,MAXSHL)
      INTEGER KLOC(NSHELL),KMIN(NSHELL),KMAX(NSHELL),IDMBF(IDMSZ)
      INTEGER SHIZ(NNP),IJOFF(NNP),KLOFF(NNP),KLSIZ(NNP),IOFF(NNP)
      LOGICAL OPEN
      LOGICAL OUT,IANDJ,KANDL,SAME
      CHARACTER*5 CALTYP
      CHARACTER*6 SCFTYP
C
      COMMON /TOLER/  F00TOL,FTOL
      COMMON /DSHLT/  TOL,CUTOFF,OUT
      COMMON /OUTPUT/ NPRINT,ITOL,ICUT,NORMF,NORMP,NOPK
      COMMON /INFOA/  NAT,NUM,NNP,NSHELL,NIRRED,NT,NPRIM,MXT,NISO
      COMMON /DMISC/  IANDJ,KANDL,SAME
      COMMON /SHELLD/ XIDER,YIDER,ZIDER,XJDER,YJDER,ZJDER
     1,               XKDER,YKDER,ZKDER,NATOM(4),NPASS
      COMMON /DSHLNO/ LIT,LJT,LKT,LLT,LOCI,LOCJ,LOCK,LOCL
     1,               MINI,MINJ,MINK,MINL,MAXI,MAXJ,MAXK,MAXL
     2,               NIJ,IJD,KLD,IJ,KL
      COMMON /CNTRL/  IPRINT,NDERIV,INTOUT,INFOUT,OPEN,SCFTYP,CALTYP
      COMMON /TAPES/  IOUT,ICHECK,INPUT,ITAP42,ITAP49
C
      DIMENSION IMOSHL(NUM)
C
      DO 160 I = 1,NSHELL
        I1 = KLOC(I)
        I2 = I1 + KMAX(I)-KMIN(I)
        DO 160 J = I1,I2
  160 IMOSHL(J) = I
      NST = NSHELL*(NSHELL+1)/2
C
C
      IT55=55
      CALL RFILE(IT55)
      CALL WREADW(IT55,SHIZ,NSHELL,1,JUNK)
      CALL WREADW(IT55,IJOFF,NST,JUNK,JUNK)
      CALL WREADW(IT55,KLOFF,NST,JUNK,JUNK)
      CALL WREADW(IT55,KLSIZ,NST,JUNK,JUNK)
      IOFSET = I2SEC(JUNK) + 1
      CALL RSETSA(IT55,IOFSET)
      CALL RGETSA(IT55,IX)
      CALL SREAD(IT55,IDMBF,IDMSZ)
C
      IADD=0
      RETURN
C
C----------------------------------------------MCDENS-----
C
      ENTRY MCDENS(II,JJ,KK,LL,Q4,SHIZ,IJOFF,KLOFF,KLSIZ,RDMBF,IDMBF,
     #IDMSZ,IDMR,IOFF,ABDENS,LENBLK,ABTEMP,MAXSHL,IMOSHL,KLOC,KMIN,KMAX)
C
C       READ DENSITY MATRIX FROM  FILE 55
C
      NN=0
      DMAX=0.0D+00
      II2=II
      JJ2=JJ
      KK2=KK
      LL2=LL
      IJS=IOFF(II)+JJ
      KLS=IOFF(KK)+LL
      ISTRT=IJOFF(IJS)+KLOFF(KLS)*KLSIZ(IJS)-IADD
      IF (ISTRT.LT.0) THEN
        CALL RGETSA(IT55,IADDR)
        IADDR=IADDR-I2SEC(IDMSZ)
   53   CONTINUE
        IADDR=IADDR-I2SEC(IDMSZ)
        IADD=IADD-IDMR
        ISTRT=ISTRT+IDMR
        IF (ISTRT.LT.0) GO TO 53
        CALL RREAD(IT55,IDMBF,IDMSZ,IADDR)
      END IF
      INEXT=ISTRT
      DO 5 ISH=1,SHIZ(II)
        DO 4 JSH=1,SHIZ(JJ)
          DO 3 KSH=1,SHIZ(KK)
            DO 2 LSH=1,SHIZ(LL)
              INEXT=INEXT+1
  11          CONTINUE
              IF (INEXT .GT. IDMR) THEN
                IADD=IADD+IDMR
                INEXT=INEXT-IDMR
                CALL SREAD(IT55,IDMBF,IDMSZ)
                GOTO 11
              END IF
              ABTEMP(ISH,JSH,KSH,LSH)=RDMBF(INEXT)
    2       CONTINUE
    3     CONTINUE
    4   CONTINUE
    5 CONTINUE
C
      DO 1700 I=MINI,MAXI
        DO 1600 J=MINJ,MAXJ
          LMAX=MAXL
          DO 1500 K=MINK,MAXK
            IF (KANDL) LMAX=K
            DO 1400 L=MINL,LMAX
              NN=NN+1
              I1=LOCI+I
              I2=LOCJ+J
              I3=LOCK+K
              I4=LOCL+L
              IF(I1.GE.I2) GO TO 700
              N=I1
              I1=I2
              I2=N
  700         IF(I3.GE.I4) GO TO 800
              N=I3
              I3=I4
              I4=N
  800         IF(I1-I3) 900,1000,1100
  900         N=I1
              I1=I3
              I3=N
              N=I2
              I2=I4
              I4=N
              GO TO 1100
 1000         IF(I2.LT.I4) GO TO 900
 1100         CONTINUE
C
              IIS = IMOSHL(I1)
              JJS = IMOSHL(I2)
              KKS = IMOSHL(I3)
              LLS = IMOSHL(I4)
              IF ( (IOFF(IIS)+JJS).GE.(IOFF(KKS)+LLS) ) GO TO 1110
              N=I1
              I1=I3
              I3=N
              N=I2
              I2=I4
              I4=N
 1110         J1 = I1 - KLOC(II ) + 1
              J2 = I2 - KLOC(JJ ) + 1
              J3 = I3 - KLOC(KK ) + 1
              J4 = I4 - KLOC(LL ) + 1
              DFAC=ABTEMP(J1,J2,J3,J4)*8.0
C
              IF(I1.EQ.I2) DFAC=DFAC*0.5
              IF(I3.EQ.I4) DFAC=DFAC*0.5
              DFAC=DFAC*Q4
C
C     ----- THIS FACTOR OF TWO IS NEEDED BECAUSE ONLY GENERATE
C               ONE OF TWO POSSIBLE DERIVATIVES OF [II,KL]     -----
C
              IF (IANDJ.AND.I.EQ.J) DFAC=DFAC*2.0
C
              IF (ABS(DFAC).GT.DMAX) DMAX=ABS(DFAC)
              ABDENS(NN)=DFAC
C GF  WRITE(16,'(2X,8I5,G18.8)') II,JJ,KK,LL,J1,J2,J3,J4,DFAC
 1400       CONTINUE
 1500     CONTINUE
 1600   CONTINUE
 1700 CONTINUE
C     IF (ABS(DMAX).GT.1.0E-15) THEN
C     F00TOL=FTOL/DMAX
C     ELSE
C     F00TOL=1.0E+10
C     END IF
      F00TOL=-1.0E+10
C
      RETURN
      END
      SUBROUTINE NUCONE(DNUC,ZAN,C)
C
C     ----- CALCULATE NUCLEAR REPULSION AND DERIVATIVES -----
C
C     MODIFIED 24 AUGUST 1983 AT BRL FOR VARIABLE DIMENSION ARRAYS
C                                                           PWS
C
      IMPLICIT REAL*8 (A-H,O-Z)
C
C     EXTENDED DUMMY DNUC,ZAN,C
C
      REAL*8 DNUC(3,NAT),ZAN(NAT),C(3,NAT)
C
      COMMON /INFOA/  NAT,NUM,NNP,NSHELL,NIRRED,NT,NPRIM,MXT,NISO
      COMMON /TAPES/  IOUT,ICHECK,INPUT,ITAP42,ITAP49
C
C
    1 FORMAT (//,' INFINITE REPULSION, CENTRES',I3,' AND',I3)
C
      DO 11 I=1,NAT
        DO 10 J=1,3
          DNUC(J,I)=0.0D+00
   10   CONTINUE
   11 CONTINUE
C
C
      DO 120 I=2,NAT
        CHGI=ZAN(I)
        IF (ABS(CHGI).GT.1.0E-7) THEN
          XI=C(1,I)
          YI=C(2,I)
          ZI=C(3,I)
          DO 110 J=1,I-1
            CHGJ=ZAN(J)
            IF (ABS(CHGJ).GT.1.0E-7) THEN
              XJ=C(1,J)
              YJ=C(2,J)
              ZJ=C(3,J)
              RR=(XI-XJ)**2+(YI-YJ)**2+(ZI-ZJ)**2
              IF (RR.EQ.0.0D+00) THEN
                IF (IOUT .GT.0) WRITE (IOUT ,1) I,J
                IF (IFLAG.GT.0) WRITE (IFLAG,1) I,J
                CALL EXIT
              END IF
              R=DSQRT(RR)
              REP = CHGI*CHGJ/R
              ENERGY=ENERGY + REP
C
              REP3S2=REP/RR
              DNUC(1,I)=DNUC(1,I) - (XI-XJ)*REP3S2
              DNUC(2,I)=DNUC(2,I) - (YI-YJ)*REP3S2
              DNUC(3,I)=DNUC(3,I) - (ZI-ZJ)*REP3S2
              DNUC(1,J)=DNUC(1,J) + (XI-XJ)*REP3S2
              DNUC(2,J)=DNUC(2,J) + (YI-YJ)*REP3S2
              DNUC(3,J)=DNUC(3,J) + (ZI-ZJ)*REP3S2
C
            END IF
  110     CONTINUE
        END IF
  120 CONTINUE
      RETURN
      END
      SUBROUTINE NUCTWO(DN,D2N,ZAN,C)
C
C     ----- CALCULATE NUCLEAR REPULSION , DERIVATIVES AND FORCES -----
C
      IMPLICIT REAL*8 (A-H,O-Z)
C
C     EXTENDED DUMMY DN,D2N,ZAN,C
C
      REAL*8 C(3,NAT),ZAN(NAT),DN(3,NAT),D2N(NAT3,NAT3)
C
      COMMON /SECOND/ NAT3
      COMMON /INFOA/  NAT,NUM,NNP,NSHELL,NIRRED,NT,NPRIM,MXT,NISO
      COMMON /TAPES/  IOUT,ICHECK,INPUT,ITAP42,ITAP49
C
      CALL ZERO(DN,NAT3)
      CALL ZERO(D2N,NAT3**2)
      DO 120 I=2,NAT
         CHGI=ZAN(I)
         IF (ABS(CHGI).GT.1.0E-7) THEN
            XI=C(1,I)
            YI=C(2,I)
            ZI=C(3,I)
            DO 110 J=1,I-1
               CHGJ=ZAN(J)
               IF (ABS(CHGJ).GT.1.0E-7) THEN
                  XJ=C(1,J)
                  YJ=C(2,J)
                  ZJ=C(3,J)
                  RR=(XI-XJ)**2+(YI-YJ)**2+(ZI-ZJ)**2
                  IF (RR.EQ.0.0) THEN
                     IF (IOUT .GT.0) WRITE (IOUT ,1) I,J
                     IF (IFLAG.GT.0) WRITE (IFLAG,1) I,J
    1                FORMAT (//,' INFINITE REPULSION, CENTRES',I3,' AND'
     *               ,I3)
                     CALL EXIT
                  END IF
                  R=DSQRT(RR)
                  REP = CHGI*CHGJ/R
                  ENERGY=ENERGY + REP
C
                  REP3S2=REP/RR
                  DN(1,I)=DN(1,I) - (XI-XJ)*REP3S2
                  DN(2,I)=DN(2,I) - (YI-YJ)*REP3S2
                  DN(3,I)=DN(3,I) - (ZI-ZJ)*REP3S2
                  DN(1,J)=DN(1,J) + (XI-XJ)*REP3S2
                  DN(2,J)=DN(2,J) + (YI-YJ)*REP3S2
                  DN(3,J)=DN(3,J) + (ZI-ZJ)*REP3S2
C
                  REP5S2=REP3S2/RR
                  IPT=(I-1)*3 + 1
                  JPT=(J-1)*3 + 1
                  DRDXDX=-REP3S2+3.0*REP5S2*(XI-XJ)**2
                  DRDXDY=        3.0*REP5S2*(XI-XJ)*(YI-YJ)
                  DRDXDZ=        3.0*REP5S2*(XI-XJ)*(ZI-ZJ)
                  DRDYDY=-REP3S2+3.0*REP5S2*(YI-YJ)**2
                  DRDYDZ=        3.0*REP5S2*(YI-YJ)*(ZI-ZJ)
                  DRDZDZ=-REP3S2+3.0*REP5S2*(ZI-ZJ)**2
                  D2N(IPT  ,IPT  ) = D2N(IPT  ,IPT  ) + DRDXDX
                  D2N(IPT  ,IPT+1) = D2N(IPT  ,IPT+1) + DRDXDY
                  D2N(IPT  ,IPT+2) = D2N(IPT  ,IPT+2) + DRDXDZ
                  D2N(IPT+1,IPT+1) = D2N(IPT+1,IPT+1) + DRDYDY
                  D2N(IPT+1,IPT+2) = D2N(IPT+1,IPT+2) + DRDYDZ
                  D2N(IPT+2,IPT+2) = D2N(IPT+2,IPT+2) + DRDZDZ
                  D2N(IPT  ,JPT  ) = D2N(IPT  ,JPT  ) - DRDXDX
                  D2N(IPT  ,JPT+1) = D2N(IPT  ,JPT+1) - DRDXDY
                  D2N(IPT  ,JPT+2) = D2N(IPT  ,JPT+2) - DRDXDZ
                  D2N(IPT+1,JPT  ) = D2N(IPT+1,JPT  ) - DRDXDY
                  D2N(IPT+1,JPT+1) = D2N(IPT+1,JPT+1) - DRDYDY
                  D2N(IPT+1,JPT+2) = D2N(IPT+1,JPT+2) - DRDYDZ
                  D2N(IPT+2,JPT  ) = D2N(IPT+2,JPT  ) - DRDXDZ
                  D2N(IPT+2,JPT+1) = D2N(IPT+2,JPT+1) - DRDYDZ
                  D2N(IPT+2,JPT+2) = D2N(IPT+2,JPT+2) - DRDZDZ
                  D2N(JPT  ,JPT  ) = D2N(JPT  ,JPT  ) + DRDXDX
                  D2N(JPT  ,JPT+1) = D2N(JPT  ,JPT+1) + DRDXDY
                  D2N(JPT  ,JPT+2) = D2N(JPT  ,JPT+2) + DRDXDZ
                  D2N(JPT+1,JPT+1) = D2N(JPT+1,JPT+1) + DRDYDY
                  D2N(JPT+1,JPT+2) = D2N(JPT+1,JPT+2) + DRDYDZ
                  D2N(JPT+2,JPT+2) = D2N(JPT+2,JPT+2) + DRDZDZ
               END IF
  110       CONTINUE
         END IF
  120 CONTINUE
      RETURN
      END
      SUBROUTINE ONEONE(W,DE,DHF,DW,C,ZAN,EX,CS,
     #katom,kstart,kng,ktype,kmin,kmax,kloc,ia,dt)
C
C  CALCULATE DERIVATIVE CONTRIBUTIONS FROM ONE-ELECTRON AND OVERLAP
C     TERMS. TOTAL DENSITY MATRIX IS DT, LAGRANGIAN (OR ENERGY W
C     WEIGHTED DENSITY MATRIX) IS W.
C
C     MODIFIED 24 AUGUST 1983 AT BRL FOR VARIABLE DIMENSIONS OF
C        HONDO ARRAYS                                    PWS
C
      IMPLICIT REAL*8 (A-H,O-Z)
C
C     EXTENDED DUMMY W,DE,DHF,DW,C,ZAN,EX,CS
C
      REAL*8 C(3,NAT),ZAN(NAT),EX(NPRIM),CS(NPRIM),dt(nnp)
      LOGICAL DIAG,OPEN
      integer katom(nshell),kstart(nshell),kng(nshell),ktype(nshell)
      integer kmin(nshell),kmax(nshell),kloc(nshell),ia(nnp)
      CHARACTER*5 CALTYP,SCFTYP*6
C
      COMMON /CNTRL/  IPRINT,NDERIV,INTOUT,INFOUT,OPEN,SCFTYP,CALTYP
      COMMON /TAPES/  IOUT,ICHECK,INPUT,ITAP42,ITAP49
      COMMON /OUTPUT/ NPRINT,ITOL,ICUT,NORMF,NORMP,NOPK
      COMMON /INDEX/  DENS(100),IJ,IJX(100),IJY(100),IJZ(100)
     #,               IPOINT(100)
      COMMON /ISHELL/  II,IATOM,XI,YI,ZI,IGMIN,IGMAX,LIT,MINI,MAXI,LOCI
      COMMON /JSHELL/  JJ,JATOM,XJ,YJ,ZJ,JGMIN,JGMAX,LJT,MINJ,MAXJ,LOCJ
     #,                RR
      COMMON /DSTVP/  T,X0,Y0,Z0,NI,NJ,CX,CY,CZ,D0DI,D0DJ,VX,VY,VZ,UU
     #,               D0DC,DVX,DVY,DVZ,               WIVX,WIVY,WIVZ
     #,                                    WJVX,WJVY,WJVZ
     #,               WIXDVX,WIYDVY,WIZDVZ
     #,               DEXDXI,DEXDYI,DEXDZI,DEXDXJ,DEXDYJ,DEXDZJ
     #,               DEXDII,DEXDIJ,DEXDJJ,DEXDIC,DEXDJC
     #,               TAI,TAJ,TAA,ICATOM
      COMMON /INFOA/  NAT,NUM,NNP,NSHELL,NIRRED,NT,NPRIM,MXT,NISO
      COMMON /ROOT/   XX,U(9),WT(9),NROOTS
C
      DIMENSION XIN(16),YIN(16),ZIN(16),DXC(16),DYC(16),DZC(16)
      DIMENSION WXI(16),WYI(16),WZI(16),WXJ(16),WYJ(16),WZJ(16)
      DIMENSION WXIDXC(16),WYIDYC(16),WZIDZC(16)
      DIMENSION W(NNP)
      DIMENSION DE(3,NAT),DW(3,NAT),DHF(3,NAT)
C
      DATA PI212 /1.1283791670955D+0/
C
C
C
      DO 2 I=1,NAT
        DO 1 J=1,3
          DE(J,I)=0.0D+00
          DHF(J,I)=0.0D+00
          DW(J,I)=0.0D+00
    1   CONTINUE
    2 CONTINUE
C
C
C----------------------------------------------------------------
      ITOL=20
C THIS IS TOLERANCE (10**-ICUT) ON PREXPONENTIAL
C----------------------------------------------------------------
      TOL=ITOL*2.30258D+00
C
C     ----- I SHELL -----
C
      DO 5000 II=1,NSHELL
C
C     ----- J SHELL -----
C
        DO 5000 JJ=1,II
C
C     ----- PREPARE INDICES FOR PAIRS OF (I,J) FUNCTIONS -----
C
          CALL INDEXX(c,katom,kstart,kng,ktype,kmin,kmax,kloc,ia,dt)
          IPONT= (IATOM-1)*NNP
          JPONT= (JATOM-1)*NNP
C
          IAPT = (IATOM-1)*3+1
          JAPT = (JATOM-1)*3+1
          IAPTT= IAPT*(IAPT+1)/2
          JAPTT= JAPT*(JAPT+1)/2
          MAPT = MAX(IAPT,JAPT)
          NAPT = MIN(IAPT,JAPT)
          IJAPT= MAPT*(MAPT-1)/2+NAPT
C
          XIMXJ=XI-XJ
          YIMYJ=YI-YJ
          ZIMZJ=ZI-ZJ
C
C     ----- CALCULATE CORRECT NUMBER OF ROOTS TO USE FOR RYS QUAD. -
C
          NROOTS=(LIT+LJT+NDERIV)/2
C
C     ----- ZERO TEMPORARY VARIABLES -----
C
          DVDXI=0.0D+00
          DVDYI=0.0D+00
          DVDZI=0.0D+00
          DVDXJ=0.0D+00
          DVDYJ=0.0D+00
          DVDZJ=0.0D+00
          DTDX  =0.0D+00
          DTDY  =0.0D+00
          DTDZ  =0.0D+00
          DSDX  =0.0D+00
          DSDY  =0.0D+00
          DSDZ  =0.0D+00
C
C     ----- I PRIMITIVE -----
C
          DO 3000 IG=IGMIN,IGMAX
            CI=CS(IG)
            AI=EX(IG)
            TAI=AI*2.0D+00
            ARRI=AI*RR
            AXI=AI*XI
            AYI=AI*YI
            AZI=AI*ZI
C
C     ----- J PRIMITIVE -----
C
            IF (II.EQ.JJ) JGMAX=IG
            DO 3000 JG=JGMIN,JGMAX
              AJ=EX(JG)
              TAJ=AJ*2.0D+00
              AA=AI+AJ
              TAA=TAI+TAJ
              RHO2=AI*AJ*2.0D+00/AA
              TEMP=AJ*ARRI/AA
C
C     ----- IGNORE INTEGRAL IF PRE-EXPONENTIAL TOO SMALL -----
C
              IF (TEMP.LE.TOL) THEN
C
C     ----- DENSITY FACTOR -----
C
                DIJ=CI*CS(JG)*DEXP(-TEMP)
                IF (II.EQ.JJ.AND.IG.NE.JG) DIJ=DIJ*2.0D+00
                DIJPI=DIJ*PI212/AA
                DIJ=-DIJ
C
                AAX=AXI+AJ*XJ
                AAY=AYI+AJ*YJ
                AAZ=AZI+AJ*ZJ
                AX=AAX/AA
                AY=AAY/AA
                AZ=AAZ/AA
C
C     ----- CALCULATE DERIVATIVE CONTRIBUTIONS FROM -----
C                KINETIC AND OVERLAP INTEGRALS
C
                IF (IATOM.NE.JATOM) THEN
                  X0=AX
                  Y0=AY
                  Z0=AZ
                  T=DSQRT(AA)
                  ST=1.0/T
                  IN=-4
                  DO 1010 NI=1,LIT
                    IN=IN+4
                    DO 1010 NJ=1,LJT
                      JN=IN+NJ
                      CALL TDER
                      XIN(JN)=VX             * ST
                      YIN(JN)=VY             * ST
                      ZIN(JN)=VZ*DIJ         * ST
                      WXI(JN)=WIVX           * ST
                      WYI(JN)=WIVY           * ST
                      WZI(JN)=WIVZ*DIJ       * ST
                      DXC(JN)=DVX            * ST
                      DYC(JN)=DVY            * ST
                      DZC(JN)=DVZ*DIJ        * ST
                      WXIDXC(JN)=WIXDVX      * ST
                      WYIDYC(JN)=WIYDVY      * ST
                      WZIDZC(JN)=WIZDVZ*DIJ  * ST
 1010             CONTINUE
C
C     ----- COMBINE TWO-DIMENSIONAL INTEGRALS TO FORM INTEGRALS -----
C
                  DO 1050 I=1,IJ
                    NX=IJX(I)
                    NY=IJY(I)
                    NZ=IJZ(I)
                    D=DENS(I)*0.5
                    X = XIN(NX)
                    Y = YIN(NY)
                    Z = ZIN(NZ)
                    XY = X*Y
                    XZ = X*Z
                    YZ = Y*Z
                    DX = DXC(NX)
                    DY = DYC(NY)
                    DZ = DZC(NZ)
                    WX = WXI(NX)
                    WY = WYI(NY)
                    WZ = WZI(NZ)
                    WDX = WXIDXC(NX)
                    WDY = WYIDYC(NY)
                    WDZ = WZIDZC(NZ)
                    IP=IPOINT(I)
                    WDENS=-W(IP) * 2.0D+00
                    XTEMP=WX*YZ
                    YTEMP=WY*XZ
                    ZTEMP=WZ*XY
                    DSDX=DSDX+XTEMP*WDENS
                    DSDY=DSDY+YTEMP*WDENS
                    DSDZ=DSDZ+ZTEMP*WDENS
                    XTEMPT = WDX*YZ + WX * (DY*Z + Y*DZ)
                    YTEMPT = WDY*XZ + WY * (DX*Z + X*DZ)
                    ZTEMPT = WDZ*XY + WZ * (DX*Y + X*DY)
                    DTDX = DTDX + XTEMPT*D
                    DTDY = DTDY + YTEMPT*D
                    DTDZ = DTDZ + ZTEMPT*D
 1050             CONTINUE
                END IF
C
C     ----- LOOP OVER ATOMS IN POTENTIAL TERM -----
C
                DO 2000 IC=1,NAT
                  ICATOM=IC
C
                  KAPT = (ICATOM-1)*3+1
                  KAPTT= KAPT*(KAPT+1)/2
                  MMAPT=MAX(IAPT,KAPT)
                  NNAPT=MIN(IAPT,KAPT)
                  IKAPT=MMAPT*(MMAPT-1)/2+NNAPT
                  MMAPT=MAX(JAPT,KAPT)
                  NNAPT=MIN(JAPT,KAPT)
                  JKAPT=MMAPT*(MMAPT-1)/2+NNAPT
C
                  ZNUC=-ZAN(IC)*DIJPI
                  CX=C(1,IC)
                  CY=C(2,IC)
                  CZ=C(3,IC)
                  XX=AA*((AX-CX)**2+(AY-CY)**2+(AZ-CZ)**2)
                  IF (NROOTS.LE.3) THEN
                    CALL RT123
                  ELSE IF (NROOTS.EQ.4) THEN
                    CALL ROOT4
                  ELSE IF (NROOTS.EQ.5) THEN
                    CALL ROOT5
                  ELSE
                    STOP 'NOT ENOUGH ROOTS IN VDERIV'
                  END IF
                  HFDX=0.0
                  HFDY=0.0
                  HFDZ=0.0
                  DO 1500 IROOT=1,NROOTS
                    UU=AA*U(IROOT)
                    WW=WT(IROOT)*ZNUC
                    TT=AA+UU
                    T=DSQRT(TT)
                    X0=(AAX+UU*CX)/TT
                    Y0=(AAY+UU*CY)/TT
                    Z0=(AAZ+UU*CZ)/TT
C
C     ----- CALCULATE TWO-DIMENSIONAL INTEGRALS -----
C
                    IN=-4
                    DO 1100 NI=1,LIT
                      IN=IN+4
                      DO 1100 NJ=1,LJT
                        JN=IN+NJ
                        CALL VDER
                        XIN(JN)=VX
                        YIN(JN)=VY
                        ZIN(JN)=VZ*WW
                        DXC(JN)=DVX
                        DYC(JN)=DVY
                        DZC(JN)=DVZ*WW
                        WXI(JN)=WIVX
                        WYI(JN)=WIVY
                        WZI(JN)=WIVZ*WW
                        WXJ(JN)=WJVX
                        WYJ(JN)=WJVY
                        WZJ(JN)=WJVZ*WW
 1100               CONTINUE
C
C     ----- COMBINE TWO-DIMENSIONAL INTEGRALS TO FORM INTEGRALS -----
C
                    ICPONT = (IC-1)*NNP
                    IDIAG=2
                    DO 1200 I=1,IJ
                      NX=IJX(I)
                      NY=IJY(I)
                      NZ=IJZ(I)
                      DENSTY=DENS(I)
                      X = XIN(NX)
                      Y = YIN(NY)
                      Z = ZIN(NZ)
                      XY = X*Y
                      XZ = X*Z
                      YZ = Y*Z
                      XTEMP1 = DXC(NX)*YZ
                      YTEMP1 = DYC(NY)*XZ
                      ZTEMP1 = DZC(NZ)*XY
                      HFDX  = HFDX + XTEMP1*DENSTY
                      HFDY  = HFDY + YTEMP1*DENSTY
                      HFDZ  = HFDZ + ZTEMP1*DENSTY
                      XTEMP2 =  WXI(NX)*YZ
                      YTEMP2 =  WYI(NY)*XZ
                      ZTEMP2 =  WZI(NZ)*XY
                      DVDXI = DVDXI + XTEMP2*DENSTY
                      DVDYI = DVDYI + YTEMP2*DENSTY
                      DVDZI = DVDZI + ZTEMP2*DENSTY
                      XTEMP3 =  WXJ(NX)*YZ
                      YTEMP3 =  WYJ(NY)*XZ
                      ZTEMP3 =  WZJ(NZ)*XY
                      DVDXJ = DVDXJ + XTEMP3*DENSTY
                      DVDYJ = DVDYJ + YTEMP3*DENSTY
                      DVDZJ = DVDZJ + ZTEMP3*DENSTY
 1200               CONTINUE
 1500             CONTINUE
                  DHF(1,IC)=DHF(1,IC) + HFDX
                  DHF(2,IC)=DHF(2,IC) + HFDY
                  DHF(3,IC)=DHF(3,IC) + HFDZ
 2000           CONTINUE
              END IF
 3000     CONTINUE
C
          DE(1,IATOM)=DE(1,IATOM) + DVDXI + DTDX
          DE(2,IATOM)=DE(2,IATOM) + DVDYI + DTDY
          DE(3,IATOM)=DE(3,IATOM) + DVDZI + DTDZ
          DE(1,JATOM)=DE(1,JATOM) + DVDXJ - DTDX
          DE(2,JATOM)=DE(2,JATOM) + DVDYJ - DTDY
          DE(3,JATOM)=DE(3,JATOM) + DVDZJ - DTDZ
          DW(1,IATOM)=DW(1,IATOM) + DSDX
          DW(2,IATOM)=DW(2,IATOM) + DSDY
          DW(3,IATOM)=DW(3,IATOM) + DSDZ
          DW(1,JATOM)=DW(1,JATOM) - DSDX
          DW(2,JATOM)=DW(2,JATOM) - DSDY
          DW(3,JATOM)=DW(3,JATOM) - DSDZ
 5000 CONTINUE
C
      RETURN
      END
      SUBROUTINE PRN11(TITLE,DER1,ZAN,GEOM)
C
C
      IMPLICIT REAL*8 (A-H,O-Z)
C
      REAL*8 DER1(3,NAT),ZAN(NAT),GEOM(3,NAT),A30(100)
      CHARACTER*52 TITLE
      CHARACTER*8  SCFTYP,CALTYP
C
      LOGICAL OPEN
      COMMON /CNTRL/  IPRINT,NDERIV,INTOUT,INFOUT,OPEN,SCFTYP,CALTYP
      COMMON /ITAP30/ I10(200),ITAP30,IEND,MPOINT,MCONST,MCALCS,NCALCS
      COMMON /TAPES/  IOUT,ICHECK,INPUT,ITAP42,ITAP49
      COMMON /HOLL/   ESCF,FMTER(13),JL
      COMMON /LABELS/ IALBEL(20),IBLBEL(20)
      COMMON /INFOA/  NAT,NUM,NNP,NSHELL,NIRRED,NT,NPRIM,MXT,NISO
      COMMON /SECOND/ NAT3
C
C
    1 FORMAT (20A4,/)
    2 FORMAT (I5,F20.10)
    3 FORMAT (4F20.10)
    4 FORMAT (20X,3F20.10)
C
      WRITE (11,1) (IALBEL(I),I=1,20)
      WRITE (11,2) NAT,ESCF
      DO 100  NG = 1,NAT
        WRITE (11,3)  ZAN(NG),GEOM(1,NG),GEOM(2,NG),GEOM(3,NG)
  100 CONTINUE
      DO 200  ND = 1,NAT
        WRITE (11,4)  DER1(1,ND),DER1(2,ND),DER1(3,ND)
  200 CONTINUE
      RETURN
      END
      SUBROUTINE PRNONE(TITLE,DE)
C
C
C
      IMPLICIT REAL*8 (A-H,O-Z)
C
      REAL*8 DE(3,NAT)
      CHARACTER*50 TITLE,LET(3)*1,SCFTYP*6,CALTYP*5
C
      LOGICAL OPEN
      COMMON /CNTRL/  IPRINT,NDERIV,INTOUT,INFOUT,OPEN,SCFTYP,CALTYP
      COMMON /TAPES/  IOUT,ICHECK,INPUT,ITAP42,ITAP49
      COMMON /INFOA/  NAT,NUM,NNP,NSHELL,NIRRED,NT,NPRIM,MXT,NISO
      COMMON /SECOND/ NAT3
C
C
      DATA LET /'X','Y','Z'/
C
      WRITE (IOUT,1) TITLE
    1 FORMAT (//,T10,A50,//,' CENTER',T15,'X',T35,'Y',T55,'Z')
      DO 3 IC=1,NAT
        WRITE (IOUT,2) IC,DE(1,IC),DE(2,IC),DE(3,IC)
    2   FORMAT (/,1X,I4,3F20.12)
    3 CONTINUE
      RETURN
      END
      SUBROUTINE PRNTWO(TITLE,D2E)
C
C
C
      IMPLICIT REAL*8 (A-H,O-Z)
C
C
      REAL*8 D2E(NAT3,NAT3)
      CHARACTER*50 TITLE,LET(3)*1,SCFTYP*6,CALTYP*5
C
      LOGICAL OPEN
      COMMON /CNTRL/  IPRINT,NDERIV,INTOUT,INFOUT,OPEN,SCFTYP,CALTYP
      COMMON /TAPES/  IOUT,ICHECK,INPUT,ITAP42,ITAP49
      COMMON /INFOA/  NAT,NUM,NNP,NSHELL,NIRRED,NT,NPRIM,MXT,NISO
      COMMON /SECOND/ NAT3
C
C
      DATA LET /'X','Y','Z'/
C
      WRITE (IOUT,4) TITLE,(IC,IC=1,NAT)
    4 FORMAT (//,T10,A50,//,(I26,3I30))
      WRITE (IOUT,5) ((LET(I),I=1,3),IC=1,NAT)
    5 FORMAT (/,T7,12(9X,A1))
      DO 8 IC=1,NAT
        DO 7 I=1,3
          IT=3*(IC-1)+I
          WRITE (IOUT,6) IC,LET(I),(D2E(IT,IDQ),IDQ=1,NAT3)
    6     FORMAT (/,I5,A1,4X,(12F10.6))
    7   CONTINUE
    8 CONTINUE
      RETURN
      END
      SUBROUTINE RDFR(T,MINK,MAXK,LKT,MINL,MAXL,LLT,NTR,PTR,DTR)
C
C
C
      IMPLICIT REAL*8 (A-H,O-Z)
C
C     EXTENDED DUMMY T,PTR,DTR
C
      REAL*8 V(10),T(10,10),PTR(3,3,NT),DTR(6,6,NT)
C
      COMMON /INFOA/  NAT,NUM,NNP,NSHELL,NIRRED,NT,NPRIM,MXT,NISO
C
      DATA ZERO/0.0D+00/
C
C     RIGHT MULTIPLY T BY R
C     RESULT BACK IN T
C
      GO TO (260,180,100),LLT
C
C     D SHELL
C
100   CONTINUE
      DO 160 K=MINK,MAXK
         DO 140 L=5,10
            DUM=ZERO
            DO 120 N=5,10
120         DUM=DUM+T(K,N)*DTR(N-4,L-4,NTR)
140      V(L)=DUM
         DO 160 L=5,10
160   T(K,L)=V(L)
      GO TO 260
C
C     P SHELL
C
180   CONTINUE
      DO 240 K=MINK,MAXK
         DO 220 L=2,4
            DUM=ZERO
            DO 200 N=2,4
200         DUM=DUM+T(K,N)*PTR(N-1,L-1,NTR)
220      V(L)=DUM
         DO 240 L=2,4
240   T(K,L)=V(L)
260   CONTINUE
C
C     LEFT MULTIPLY T BY R
C     RESULT BACK IN T
C
      GO TO (440,360,280), LKT
C
C     D SHELL
C
  280 CONTINUE
      DO 340 L=MINL,MAXL
         DO 320 K=5,10
            DUM=ZERO
            DO 300 N=5,10
               DUM=DUM+T(N,L)*DTR(N-4,K-4,NTR)
  300       CONTINUE
            V(K)=DUM
  320    CONTINUE
         DO 340 K=5,10
            T(K,L)=V(K)
  340 CONTINUE
      GO TO 440
C
C     P SHELL
C
  360 CONTINUE
      DO 420 L=MINL,MAXL
         DO 400 K=2,4
            DUM=ZERO
            DO 380 N=2,4
               DUM=DUM+T(N,L)*PTR(N-1,K-1,NTR)
  380       CONTINUE
            V(K)=DUM
  400    CONTINUE
         DO 420 K=2,4
            T(K,L)=V(K)
  420 CONTINUE
  440 CONTINUE
      RETURN
      END
      SUBROUTINE REDUN2(II,JJ,KK,LL,Q4,KATOM)
C
C     ----- THIS VERSION HALVES Q4 TO ACCOUNT FOR DUPLICATION -----
C                     OF [II,JJ] OR [IJ,IJ]
C
      IMPLICIT REAL*8 (A-H,O-Z)
C
C     EXTENDED DUMMY KATOM
C
      INTEGER KATOM(NSHELL)
      LOGICAL OUT
      LOGICAL IANDJ,IANDK,IANDL,JANDK,JANDL,KANDL
C
      COMMON /TAPES/  IOUT,ICHECK,INPUT,ITAP42,ITAP49
      COMMON /DSHLT/  TOL,CUTOFF,OUT
CIBM  COMMON /SHELLD/ NATOM(4),NPASS
      COMMON /SHELLD/ XIDER,YIDER,ZIDER,XJDER,YJDER,ZJDER
     2,               XKDER,YKDER,ZKDER,NATOM(4),NPASS
      COMMON /INFOA/  NAT,NUM,NNP,NSHELL,NIRRED,NT,NPRIM,MXT,NISO
      COMMON /SHELL/  ISH,JSH,KSH,LSH
C
      DO 50 I=1,4
   50 NATOM(I)=0
      IAT=KATOM(II)
      JAT=KATOM(JJ)
      KAT=KATOM(KK)
      LAT=KATOM(LL)
      IANDJ=IAT.EQ.JAT
      IANDK=IAT.EQ.KAT
      IANDL=IAT.EQ.LAT
      JANDK=JAT.EQ.KAT
      JANDL=JAT.EQ.LAT
      KANDL=KAT.EQ.LAT
      IF(.NOT.IANDJ) GO TO 300
      IF(.NOT.IANDK) GO TO 200
      IF(.NOT.IANDL) GO TO 100
C
C     ----- IAT = JAT = KAT = LAT -----
C
      NPASS=0
      GO TO 1000
  100 CONTINUE
C
C     ----- IAT = JAT = KAT _ LAT ----
C
      NATOM(1)=LAT
      NATOM(2)=IAT
      ISH=LL
      JSH=KK
      KSH=JJ
      LSH=II
      NPASS=4
      GO TO 1000
  200 IF(.NOT.KANDL) GO TO 250
C
C     ----- IAT = JAT _ KAT = LAT ----
C
      IF (KK.EQ.LL) Q4=Q4*0.5
      NATOM(1)=KAT
      NATOM(2)=LAT
      NATOM(3)=IAT
      ISH=KK
      JSH=LL
      KSH=II
      LSH=JJ
      NPASS=2
      GO TO 1000
  250 CONTINUE
C
C     ----- IAT = JAT _ KAT _ LAT -----
C
      NATOM(1)=KAT
      NATOM(2)=LAT
      NATOM(3)=IAT
      ISH=KK
      JSH=LL
      KSH=II
      LSH=JJ
      NPASS=2
      GO TO 1000
  300 IF(.NOT.IANDK) GO TO 500
      IF(.NOT.IANDL) GO TO 400
C
C     ----- IAT = KAT = LAT _ JAT -----
C
      NATOM(1)=JAT
      NATOM(2)=IAT
      ISH=JJ
      JSH=II
      KSH=KK
      LSH=LL
      NPASS=4
      GO TO 1000
  400 CONTINUE
C
C     ----- IAT = KAT _ JAT = LAT -----
C     ----- IAT = KAT _ JAT _ LAT -----
C
      IF (II.EQ.KK.AND.JJ.EQ.LL) Q4=Q4*0.5
      NATOM(1)=JAT
      NATOM(2)=LAT
      NATOM(3)=IAT
      ISH=JJ
      JSH=II
      KSH=LL
      LSH=KK
      NPASS=3
      GO TO 1000
  500 IF(.NOT.JANDK) GO TO 700
      IF(.NOT.JANDL) GO TO 600
C
C     ----- JAT = KAT = LAT _ IAT -----
C
      NATOM(1)=IAT
      NATOM(2)=JAT
      ISH=II
      JSH=JJ
      KSH=KK
      LSH=LL
      NPASS=4
      GO TO 1000
  600 CONTINUE
C
C     ----- JAT = KAT _ IAT _ LAT -----
C
      NATOM(1)=IAT
      NATOM(2)=LAT
      NATOM(3)=JAT
      ISH=II
      JSH=JJ
      KSH=LL
      LSH=KK
      NPASS=3
      GO TO 1000
  700 IF(.NOT.JANDL) GO TO 800
C
C     ----- JAT = LAT _ IAT _ KAT -----
C
      NATOM(1)=IAT
      NATOM(2)=KAT
      NATOM(3)=JAT
      ISH=II
      JSH=JJ
      KSH=KK
      LSH=LL
      NPASS=3
      GO TO 1000
  800 IF(.NOT.KANDL) GO TO 900
C
C     ----- KAT = LAT _ IAT _ JAT ----
C
      NATOM(1)=IAT
      NATOM(2)=JAT
      NATOM(3)=KAT
      ISH=II
      JSH=JJ
      KSH=KK
      LSH=LL
      NPASS=2
      GO TO 1000
  900 CONTINUE
C
C     ----- IAT _ JAT _ KAT _ LAT ----
C
      NATOM(1)=IAT
      NATOM(2)=JAT
      NATOM(3)=KAT
      NATOM(4)=LAT
      ISH=II
      JSH=JJ
      KSH=KK
      LSH=LL
      NPASS=1
C
C     -----
C
 1000 CONTINUE
      RETURN
      END
      SUBROUTINE SCF1(A,Z,NEED,MAXCOR,EX,CX,KATOM,KTYPE,KSTART,KLOC,
     #KMIN,KMAX,KNG,ZAN,C,T,INVT,ISO,LBLAT,ICT,
     #PTR,DTR)
C
C DRIVER ROUTINE FOR SCF FIRST DERIVATIVES  10 MAY 1983 PWS
C
C     MODIFIED 24 AUGUST 1983 AT BRL TO VARIABLY DIMENSION HONDO
C     ARRAYS                                           PWS
C
C
      IMPLICIT INTEGER (A-Z)
C
C    #KMIN,KMAX,KNG,ZAN,C,T,INVT,ISO,LBLAT,ICT,
C    #PTR,DTR
C
      REAL*8 EX(NPRIM),CX(NPRIM),ZAN(NAT),C(3,NAT),T(MXT)
      REAL*8 PTR(3,3,NT),DTR(6,6,NT),Z(MAXCOR)
      INTEGER KATOM(NSHELL),KTYPE(NSHELL),KSTART(NSHELL)
      INTEGER KLOC(NSHELL),KMIN(NSHELL),KMAX(NSHELL),KNG(NSHELL)
      INTEGER INVT(NT),ISO(NSHELL,NISO),LBLAT(2,NAT)
      INTEGER A(1),ICT(NAT,NT),IDATA(4)
CCC   INTEGER  ALABEL,BLABEL
CIBM  INTEGER*8 ONEL,TWOEL
C
      INTEGER FCB49(16),FCB18(16),FCB19(16)
      LOGICAL FOPEN,FEXIST,OPEN
      CHARACTER*5 CALTYP
      CHARACTER*6 CITYP,DERTYP,SCFTYP
      CHARACTER*11 NAME
      CHARACTER*20 FD
      CHARACTER*50 TITLE
      REAL*8 ESCF,FOCC,ALP,BET,FMTER
C
      COMMON /TYPES/ DERTYP,CITYP
      COMMON /CNTRL/  IPRINT,NDERIV,INTOUT,INFOUT,OPEN,SCFTYP,CALTYP
      COMMON /INFOA/  NAT,NUM,NNP,NSHELL,NIRRED,NT,NPRIM,MXT,NISO
      COMMON /ITAP30/ I10(200),ITAP30,IEND,MPOINT,MCONST,MCALCS,
     #NCALCS
      COMMON /COUPLC/ FOCC(5),ALP(5,5),BET(5,5),NTYPES
      COMMON /TAPES/  IOUT,ICHECK,INPUT,ITAP42,ITAP49
      COMMON /NAME/   INAME,NAME
      COMMON /HOLL/   ESCF,FMTER(13),JL
      COMMON /LABELS/ IALBEL(20),IBLBEL(20)
      COMMON /SECOND/ NAT3
C
CIBM  DATA ONEL /'D11E'/, TWOEL /'D12E'/
C
      NAT3 = 3*NAT
      NNP=NUM*(NUM+1)/2
C
C     ----- ALLOCATE MEMORY FOR GRADIENT STORAGE -----
C
      MXANGM=3
      MXSPDF=WPADTI(NEED)
      MINSH=MXSPDF+NAT
      MAXSH=MINSH+NAT*MXANGM
      DNUC=IADTWP(MAXSH+NAT*MXANGM)
      DONE=DNUC+NAT*3
      DHF=DONE+NAT*3
      DOVL=DHF+NAT*3
      DTWO=DOVL+NAT*3
      DTOT=DTWO+NAT*3
      IA=WPADTI(DTOT+NAT*3)
      NEED=IADTWP(IA+NNP)
C
C     ----- FIND LIMITS OF SHELLS, ETC -----
C
      CALL LIMITS(A(MXSPDF),A(MINSH),A(MAXSH),NAT,NSHELL,KATOM,
     #KTYPE,MXANGM)
C
C
C
C
      CALL RFILE(ITAP49)
CTJLRRCALL SREW(ITAP49)  THIS IS DONE IN RFILE
CTEMP READ (ITAP49) SCFTYP,CITYP,DERTYP,NTYPES,NBFAO,NNP,ESCF
C     SCFTYP='CLSCF '
C     CITYP='SCF   '
C     DERTYP='FIRST '
C     NTYPES=1
      CALL SREAD(ITAP49,IDATA,4)
      NTYPES=IDATA(1)
      IF (IDATA(2) .EQ. 1) SCFTYP='CLSCF '
      IF (IDATA(2) .EQ. 2) SCFTYP='HSOP  '
      IF (IDATA(2) .EQ. 3) SCFTYP='GRSCF '
      IF (IDATA(2) .EQ. 4) SCFTYP='TCSCF '
      IF (IDATA(3) .EQ. 1) DERTYP='FIRST '
      IF (IDATA(3) .EQ. 2) DERTYP='SECOND'
      IF (IDATA(4) .EQ. 1) CITYP='SCF   '
      IF (IDATA(4) .EQ. 2) CITYP='CI    '
      IF (IDATA(4) .EQ. 3) CITYP='MCSCF '
      IF (IDATA(4) .EQ. 4) CITYP='GVBCI '
      WRITE(IOUT,301) NTYPES,SCFTYP,DERTYP,CITYP
      WRITE(ICHECK,301) NTYPES,SCFTYP,DERTYP,CITYP
 301  FORMAT(/,'  NTYPES: ',I4,'  SCFTYP: ',A6,'  DERTYP: ',A6,
     1'  CITYP: ',A6)
      IF (IDATA(3).NE.1) THEN
        WRITE(IOUT,302)
 302    FORMAT(/'  INCOMPATABLE SCFTYP FOR FIRST DERIVATIVE!')
        STOP
      END IF
      NBFAO=NUM
CTJL  NNP=NUM*(NUM+1)/2
CRBR ?????????? BELOW STATEMENT ?????????
CTEMPEND
      NBSET=NTYPES
      IF (SCFTYP .EQ. 'TCSCF ') NBSET=6
      IF (CITYP .EQ. 'CI    '.OR.CITYP.EQ.'GVBCI ') NBSET=NBSET+1
C
      IF (NBFAO.NE.NUM) THEN
        WRITE (IOUT,900)
  900   FORMAT (//,' # DERIV  ERROR: MATRIX TAPE49 DOES NOT MATCH'
     #  ,          ' INTEGRAL INFORMATION',//)
        CALL EXIT(20)
      END IF
C
C
C      ----- ALLOCATE CORE FOR DENSITY MATRICES -----
C
      DENMAT=NEED
      IF (CALTYP.EQ.'MCSCF') THEN
        DENT=NEED
      ELSE
        DENT=DENMAT+NNP*NTYPES
      END IF
      DENW=DENT+NNP
      NEED=DENW+NNP
      DEN1=DENT
      IF (CALTYP.EQ.'CI   '.OR.CALTYP.EQ.'GVBCI') THEN
         DEN1=NEED
         NEED=DEN1+NNP
      END IF
C
      CALL SCFMAT(Z(DENMAT),Z(DENT),Z(DENW),Z(DEN1))
C
CTJL  CLOSE (ITAP49)
C
C     ----- LOAD OVERLAY FOR ONE-ELECTRON FIRST DERIVATIVES -----
C
CJ    CALL M:LOAD(ONEL,JUNK)
C
C      THIS OVERLAY STRUCTURE DID NOT WORK FOR CI FIRST NOSYM
C
C     ----- CALCULATE DERIVATIVE OF NUCLEAR REPULSION -----
C
      CALL NUCONE(Z(DNUC),ZAN,C)
C
      TITLE='NUCLEAR REPULSION CONTRIBUTION TO FIRST DERIVATIVES'
      IF (IAND(IPRINT,2) .NE. 0) CALL PRNONE(TITLE,Z(DNUC))
C
C     ----- PASS ARRAY LOCATIONS TO INDEX FOR ONE-ELECTRON TERMS ---
C
      CALL ININDX(C,KATOM,KSTART,KNG,KTYPE,KMIN,KMAX,KLOC,A(IA),
     #Z(DEN1))
C
C     ----- CALCULATE DERIVATIVE OF ONE-ELECTRON AND OVERLAP TERMS --
C
      IF (INTOUT.EQ.0.AND.INFOUT.EQ.0) THEN
        CALL ONEONE(Z(DENW),Z(DONE),Z(DHF),Z(DOVL),C,ZAN,EX,CX,
     #katom,kstart,kng,ktype,kmin,kmax,kloc,a(ia),z(den1))
      ELSE
        DH=NEED
        DS=DH+NNP*3*NAT
        IBF2AT=WPADTI(DS+NNP*3)
        NEED=IADTWP(IBF2AT+NUM)
        IF (NEED.GT.MAXCOR) THEN
          WRITE (IOUT,901) NEED*8,MAXCOR*8
  901     FORMAT (//,' # DERIV  ERROR: NOT ENOUGH CORE FOR DERIVATIVE'
     #    ,             ' ONE-ELECTRON INTEGRALS',2I8,//)
          CALL EXIT(25)
        END IF
C
        CALL BFTOAT(A(IBF2AT),KATOM,KLOC,KMIN,KMAX)
        CALL MAKONE(Z(DHF),Z(DH),Z(DS),C,ZAN,EX,CX,
     #katom,kstart,kng,ktype,kmin,kmax,kloc,a(ia),z(den1))
        CALL MAKD1E(Z(DEN1),Z(DONE),Z(DH),NAT,NUM,NNP,Z(DENW),
     #  Z(DOVL),A(IBF2AT),Z(DS))
        CALL VSUB(Z(DONE),Z(DONE),Z(DHF),3*NAT)
C
C        ----- WRITE DERIVATIVE ONE-ELECTRON INTEGRALS TO FILE19 ---
C
      LENBUF = 1
      LENIBF = 1
        IF (INTOUT.NE.0) THEN
          ITAP18=78
          ITAP19=79
          CALL RFILE(ITAP19)
CTJL      CALL SREW(ITAP19)   THIS IS DONE IN RFILE.
C
          IF (IAND(INTOUT,1).NE.0) THEN
            CALL SWRIT(ITAP19,Z(DS),INTOWP(NNP*3))
          END IF
          IF (IAND(INTOUT,2).NE.0) THEN
            CALL SWRIT(ITAP19,Z(DH),INTOWP(NNP*3*NAT))
          END IF
C
C           ----- SET BUFFER SIZES FOR WRITING DERIVATIVE TWO-
C                 ELECTRON INTEGRALS, AND WRITE HEADER ON 18    -----
C
          LENIBF=SEC2I(20)
          LENBUF=SEC2I(50)/INTOWP(1)
          CALL RFILE(ITAP18)
CTJL      CALL SREW(ITAP18)  THIS IS DONE IN RFILE.
C
CTJL        WRITE (ITAP18) LENIBF,LENBUF,NAT,NUM,NNP
          CALL WWRITW(ITAP18,LENIBF,1,1,IEND)
          CALL WWRITW(ITAP18,LENBUF,1,IEND,IEND)
          CALL WWRITW(ITAP18,NAT,1,IEND,IEND)
          CALL WWRITW(ITAP18,NUM,1,IEND,IEND)
          CALL WWRITW(ITAP18,NNP,1,IEND,IEND)
C
          CALL SWRIT(ITAP18,A(IBF2AT),NUM)
        END IF
C
        IF (INFOUT.NE.0) CALL WR22A(A(IBF2AT),Z(DS),Z(DS),Z(DH),nbset)
C
C
C
      END IF
C
      NEED=DENW
C
C     ----- ADD HELLMAN-FEYNMAN TERM AND NUCLEAR REPULSION -----
C                 TO GIVE HELLMAN-FEYNMAN GRADIENT
C
      CALL VADD(Z(DHF),Z(DHF),Z(DNUC),3*NAT)
C
      TITLE='       HELLMAN-FEYNMAN FIRST DERIVATIVES           '
      IF (IAND(IPRINT,8) .NE. 0) CALL PRNONE(TITLE,Z(DHF))
      TITLE='ONE-ELECTRON CONTRIBUTION TO FIRST DERIVATIVES     '
      IF (IAND(IPRINT,8) .NE. 0) CALL PRNONE(TITLE,Z(DONE))
      IF(CALTYP.NE.'CI   '.AND.CALTYP.NE.'GVBCI') THEN
      TITLE='OVERLAP CONTRIBUTION TO FIRST DERIVATIVES          '
      IF (IAND(IPRINT,8) .NE. 0) CALL PRNONE(TITLE,Z(DOVL))
      END IF
C
C     ----- CALCULATE DERIVATIVE OF TWO-ELECTRON TERMS -----
C
      MAXSHL=MXANGM*(MXANGM+1)/2
CTJL  THE 16 ADDED TO AVOID CACHE MEMORY CONFLICT ON THE IBM 4381
      LEN2D=256+256*((4*(MXANGM-1)+3)/2)+16
      LENBLK=MAXSHL**4
      XIN=NEED
      YIN=XIN+LEN2D
      ZIN=YIN+LEN2D
      DXI=ZIN+LEN2D
      DYI=DXI+LEN2D
      DZI=DYI+LEN2D
      DXJ=DZI+LEN2D
      DYJ=DXJ+LEN2D
      DZJ=DYJ+LEN2D
      DXK=DZJ+LEN2D
      DYK=DXK+LEN2D
      DZK=DYK+LEN2D
      ABDENS=DZK+LEN2D
      IF (INTOUT.NE.0.OR.INFOUT.NE.0) THEN
        LENINT=LENBLK
      ELSE
        LENINT=1
        LENIBF=1
        LENBUF=1
      END IF
      DERINT=ABDENS+LENBLK
      IBUF=WPADTI(DERINT+LENINT*9)
      BUF=IADTWP(IBUF+LENIBF)
      NEED=BUF+LENBUF
C
      IF (CALTYP.EQ.'MCSCF'.OR.CALTYP.EQ.'CI   '.OR.CALTYP.EQ.
     #  'GVBCI') THEN
        IDMSZ=SEC2I(200)
CTJL    IDMSZ=SEC2I(20)
        IDMR=IDMSZ/INTOWP(1)
C
        IMOSHL=WPADTI(NEED)
        SHIZ=IMOSHL+NUM
        IJOFF=SHIZ+NNP
        KLOFF=IJOFF+NNP
        KLSIZ=KLOFF+NNP
CTJL    IOFFX=KLSIZ+NNP
CTJL    ABTEMP=IOFFX+NNP
        ABTEMP=KLSIZ+NNP
        IF (ABTEMP .NE. (ABTEMP/2)*2) ABTEMP=ABTEMP+1
        ABTEMP=IADTWP(ABTEMP)
        RDMBF=ABTEMP+LENBLK
        IDMBF=WPADTI(RDMBF)
        NEED=RDMBF+IDMR
      END IF
C
C
      IBMAT=1
      IF (INFOUT.NE.0) THEN
        IBMAT=NEED
        NEED=IBMAT+NNP*3*NAT*NBSET
      END IF
C
C
      IF (NEED.GT.MAXCOR) THEN
        WRITE (IOUT,902)
  902   FORMAT (//,' # DERIV  ERROR: NOT ENOUGH CORE FOR TWO-ELECTRON'
     #  ,          ' FIRST DERIVATIVES',//)
        CALL EXIT(24)
      END IF
      WRITE (ICHECK,904) NEED*8,MAXCOR*8
  904 FORMAT (/,/,' USING A TOTAL OF ',I8,' OF ',I8,' BYTES OF CORE')
C
      IF (CALTYP.EQ.'MCSCF'.OR.CALTYP.EQ.'CI   '.OR.CALTYP.EQ.
     #  'GVBCI') THEN
C
        CALL MCDEN1(A(SHIZ),A(IJOFF),A(KLOFF),A(KLSIZ),
     #  Z(RDMBF),A(IDMBF),IDMSZ,IDMR,A(IA),
     #  Z(ABDENS),LENBLK,Z(ABTEMP),MAXSHL,
     #  A(IMOSHL),KLOC,KMIN,KMAX)
      END IF
C
C     ----- LOAD OVERLAY FOR TWO-ELECTRON FIRST DERIVATIVES -----
C
C
      CALL JK1DER(A(IA),Z(DENT),Z(DENMAT),Z(DTWO),Z(XIN),Z(YIN),
     #Z(ZIN),Z(DXI),Z(DYI),Z(DZI),Z(DXJ),Z(DYJ),Z(DZJ),
     #Z(DXK),Z(DYK),Z(DZK),LEN2D,Z(ABDENS),LENBLK,
     #Z(DERINT),LENINT,A(IBUF),LENIBF,Z(BUF),LENBUF,
     #ITAP18,ITAP19,A(MXSPDF),A(MINSH),A(MAXSH),MXANGM,
     #KATOM,C,KSTART,KNG,KTYPE,KMIN,KMAX,KLOC,EX,CX,ISO,
     #Z(IBMAT),NBSET,
     #  A(SHIZ),A(IJOFF),A(KLOFF),A(KLSIZ),
     #  Z(RDMBF),A(IDMBF),IDMSZ,IDMR,A(IA),
     #  Z(ABTEMP),MAXSHL,
     #  A(IMOSHL))
C
C
C
      CALL SYMD(Z(DTWO),ICT,PTR,INVT)
C
      IF (INFOUT.NE.0) THEN
        IDIM=10
        MI=WPADTI(XIN)
        MJ=MI+NT
        MIAT=MJ+NT
        MOP=MIAT+NT
        VX=MOP+NT
        IF(VX .NE. (VX/2)*2) VX=VX+1
        VX=IADTWP(VX)
        VY=VX+IDIM**2
        VZ=VY+IDIM**2
        UX=VZ+IDIM**2
        UY=UX+IDIM**2
        UZ=UY+IDIM**2
        TX=UZ+IDIM**2
        TY=TX+IDIM**2
        TZ=TY+IDIM**2
        LAST=TZ+IDIM**2
        IF (LAST.GT.BUF) STOP ' SCF1: LAST.GT.BUF'
      DO 211 III=XIN,LAST
      Z(III)=0.0D0
  211 CONTINUE
C
        CALL SYMF(Z(IBMAT),NBSET,ICT,PTR,DTR,INVT,A(MI),A(MJ),
     #  KTYPE,KMIN,KMAX,KLOC,A(MIAT),A(MOP),Z(VX),Z(VY),
     #  Z(VZ),Z(UX),Z(UY),Z(UZ),Z(TX),Z(TY),Z(TZ),IDIM,
     #  ISO)
C
      END IF
C
C
      TITLE='TWO-ELECTRON CONTRIBUTION TO FIRST DERIVATIVES     '
      IF (IAND(IPRINT,64) .NE. 0) CALL PRNONE(TITLE,Z(DTWO))
C
C     ----- ADD ALL CONTRIBUTIONS TO THE GRADIENT -----
C
      CALL VADD(Z(DTOT),Z(DHF),Z(DONE),3*NAT)
      IF (CALTYP.NE.'CI   '.AND.CALTYP.NE.'GVBCI') THEN
         CALL VADD(Z(DTOT),Z(DTOT),Z(DOVL),3*NAT)
      END IF
      CALL VADD(Z(DTOT),Z(DTOT),Z(DTWO),3*NAT)
C
      TITLE='---------------- TOTAL SCF DERIVATIVES ------------'
      IF (CALTYP.EQ.'MCSCF') THEN
        TITLE='----------------TOTAL MCSCF DERIVATIVES -----------'
      END IF
      IF (CALTYP.EQ.'CI   '.OR.CALTYP.EQ.'GVBCI') THEN
        TITLE='----- CI GRADIENTS LESS CPHF TERMS ----------------'
      END IF
      IF (IAND(IPRINT,512) .NE. 0) CALL PRNONE(TITLE,Z(DTOT))
C
      IF (CITYP.NE.'CI    '.AND.CITYP.NE.'GVBCI'.AND.DERTYP.EQ.
     #  'FIRST ') THEN
        CALL PRN11(TITLE,Z(DTOT),ZAN,C)
      END IF
C
      IF (INFOUT.NE.0) CALL WR22B(Z(IBMAT),Z(DTOT),JUNK,nbset)
C
      CALL DTOTEN(Z(DTOT),NAT)
C
C
          IF (IAND(INTOUT,2).NE.0) THEN
             CALL RCLOSE(ITAP18,3)
             CALL RCLOSE(ITAP19,3)
          END IF
C
C
      RETURN
      END
      SUBROUTINE SCF2(A,Z,NEED,MAXCOR,EX,CX,KATOM,KTYPE,KSTART,KLOC,
     #KMIN,KMAX,KNG,ZAN,C,T,INVT,ISO,LBLAT,ICT,
     #PTR,DTR)
C
C DRIVER ROUTINE FOR SCF SECOND DERIVATIVES  26 AUGUST 1983 PWS
C
C
      IMPLICIT INTEGER (A-Z)
C
C    #,              ZAN,C,T,INVT,ISO,LBLAT,ICT,PTR,DTR
C
      REAL*8 EX(NPRIM),CX(NPRIM),ZAN(NAT),C(3,NAT),T(MXT)
      REAL*8 PTR(3,3,NT),DTR(6,6,NT),Z(MAXCOR)
      INTEGER KATOM(NSHELL),KTYPE(NSHELL),KSTART(NSHELL)
      INTEGER KLOC(NSHELL),KMIN(NSHELL),KMAX(NSHELL),KNG(NSHELL)
      INTEGER INVT(NT),ISO(NSHELL,NISO),LBLAT(2,NAT)
      INTEGER A(1),ICT(NAT,NT),IDATA(4)
      INTEGER FCB49(16),FCB18(16),FCB19(16)
CCCC  INTEGER  IALBEL,IBLBEL
CIBM  INTEGER*8 ONEL,TWOEL
C
      LOGICAL FOPEN,FEXIST,OPEN,LBSTAT,LFSTAT
      CHARACTER*5 CALTYP
      CHARACTER*6 CITYP,DERTYP,SCFTYP
      CHARACTER*11 NAME
      CHARACTER*20 FD
      CHARACTER*50 TITLE
      REAL*8 ESCF,FOCC,ALP,BET,FMTER
C
      COMMON /CNTRL/  IPRINT,NDERIV,INTOUT,INFOUT,OPEN,SCFTYP,CALTYP
      COMMON /TYPES/ DERTYP,CITYP
      COMMON /INFOA/  NAT,NUM,NNP,NSHELL,NIRRED,NT,NPRIM,MXT,NISO
      COMMON /ITAP30/ I10(200),ITAP30,IEND,MPOINT,MCONST,MCALCS,
     #NCALCS
      COMMON /COUPLC/ FOCC(5),ALP(5,5),BET(5,5),NTYPES
      COMMON /TAPES/  IOUT,ICHECK,INPUT,ITAP42,ITAP49
      COMMON /NAME/   INAME,NAME
      COMMON /HOLL/   ESCF,FMTER(13),JL
      COMMON /LABELS/ IALBEL(20),IBLBEL(20)
      COMMON /SECOND/ NAT3
C
CIBM  DATA ONEL /'D21E'/, TWOEL /'D22E'/
C
C
C
      WRITE(ICHECK,1100)
 1100 FORMAT(/'  IN SCF2')
      NAT3=NAT*3
      NNP=NUM*(NUM+1)/2
C
C
C     ----- ALLOCATE MEMORY FOR GRADIENT STORAGE -----
C
      MXANGM=3
      MXSPDF=WPADTI(NEED)
      MINSH=MXSPDF+NAT
      MAXSH=MINSH+NAT*MXANGM
      DNUC=IADTWP(MAXSH+NAT*MXANGM)
      DONE=DNUC+NAT*3
      DHF=DONE+NAT*3
      DOVL=DHF+NAT*3
      DTWO=DOVL+NAT*3
      DTOT=DTWO+NAT*3
      DELC = DTOT + NAT*3
CTJL  IA=WPADTI(DTOT+NAT*3)
      IA=WPADTI(DELC+NAT*3)
      FNUC=IADTWP(IA+NNP)
      WRITE(*,*) ' DELC,IA,FNUC',DELC,IA,FNUC
      WRITE(*,*) ' NAT3,NNP,NAT3*NAT3',NAT*3,NNP,NAT*3*NAT*3
      FONE=FNUC+3*NAT*3*NAT
      FHF=FONE+3*NAT*3*NAT
      FOVL=FHF+3*NAT*3*NAT
      FTWO=FOVL+3*NAT*3*NAT
      FTOT=FTWO+3*NAT*3*NAT
      NEED=FTOT+3*NAT*3*NAT
C
C     ----- FIND LIMITS OF SHELLS, ETC -----
C
      WRITE(ICHECK,1101)
 1101 FORMAT(/'  CALLING LIMITS')
      CALL LIMITS(A(MXSPDF),A(MINSH),A(MAXSH),NAT,NSHELL,KATOM,
     #KTYPE,MXANGM)
C
C
C
C
      WRITE(ICHECK,1102) ITAP49
 1102 FORMAT(/'  SFILE ON ITAP49=',I5)
      CALL RFILE(ITAP49)
      WRITE(ICHECK,1103)
 1103 FORMAT(/'  CALLING SREW')
CTJL  CALL SREW(ITAP49)  THIS IS DONE IN RFILE
CTEMP READ (ITAP49) SCFTYP,CITYP,DERTYP,NTYPES,NBFAO,NNP,ESCF
C     SCFTYP='CLSCF '
C     CITYP='SCF   '
C     DERTYP='FIRST '
C     NTYPES=1
      WRITE(ICHECK,1104)
 1104 FORMAT(/'  CALLING SREAD')
      CALL SREAD(ITAP49,IDATA,4)
      WRITE(ICHECK,1105) (IDATA(II), II=1,4)
 1105 FORMAT(/'  IDATA:',4I5)
      NTYPES=IDATA(1)
      IF (IDATA(2) .EQ. 1) SCFTYP='CLSCF '
      IF (IDATA(2) .EQ. 2) SCFTYP='HSOP  '
      IF (IDATA(2) .EQ. 3) SCFTYP='GRSCF '
      IF (IDATA(2) .EQ. 4) SCFTYP='TCSCF '
      IF (IDATA(3) .EQ. 1) DERTYP='FIRST '
      IF (IDATA(3) .EQ. 2) DERTYP='SECOND'
      IF (IDATA(4) .EQ. 1) CITYP='SCF   '
      IF (IDATA(4) .EQ. 2) CITYP='CI    '
      IF (IDATA(4) .EQ. 3) CITYP='MCSCF '
      WRITE(IOUT,301) NTYPES,SCFTYP,DERTYP,CITYP
 301  FORMAT(/,'  NTYPES: ',I4,'  SCFTYP: ',A6,'  DERTYP: ',A6,
     1'  CITYP: ',A6)
      IF (IDATA(3) .NE. 2) THEN
        WRITE(IOUT,302)
 302    FORMAT(/'  INCOMPATABLE DERTYP FOR SECOND DERIVATIVES!')
        STOP
      END IF
      NBFAO=NUM
CTJL  NNP=NUM*(NUM+1)/2
CTEMPEND
      NBSET=NTYPES
      IF (SCFTYP .EQ. 'TCSCF ') NBSET=6
      IF (CITYP .EQ. 'CI    ') NBSET=NBSET+1
C
      IF (NBFAO.NE.NUM) THEN
        WRITE (IOUT,900)
  900   FORMAT (//,' # DERIV  ERROR: MATRIX TAPE49 DOES NOT MATCH'
     #  ,          ' INTEGRAL INFORMATION',//)
        CALL EXIT(20)
      END IF
C
C
C      ----- ALLOCATE CORE FOR DENSITY MATRICES -----
C
      DENMAT=NEED
      IF (CALTYP.EQ.'MCSCF') THEN
        DENT=NEED
      ELSE
        DENT=DENMAT+NNP*NTYPES
      END IF
      DENW=DENT+NNP
      NEED=DENW+NNP
      DEN1=DENT
      IF (CALTYP.EQ.'CI   ') THEN
        DEN1=NEED
CACS    NEED=DEN1+INTOWP(NNP)
        NEED=DEN1+NNP
      END IF
C
      CALL SCFMAT(Z(DENMAT),Z(DENT),Z(DENW),Z(DEN1))
C
CTJL  CLOSE (ITAP49)
C
C     ----- LOAD OVERLAY FOR ONE-ELECTRON SECOND DERIVATIVES -----
C
C     CALL M:LOAD(ONEL,JUNK)
C
C     THIS OVERLAY STRUCTURE DID NOT WORK FOR CI FIRST
C
C     ----- CALCULATE DERIVATIVE OF NUCLEAR REPULSION -----
C
      CALL NUCTWO(Z(DNUC),Z(FNUC),ZAN,C)
C
      CALL FOLD(Z(FNUC),NAT3)
C
      TITLE='NUCLEAR REPULSION CONTRIBUTION TO FIRST DERIVATIVES'
      IF (IAND(IPRINT,2) .NE. 0) CALL PRNONE(TITLE,Z(DNUC))
      TITLE='NUCLEAR REPULSION CONTRIBUTION TO FORCE CONSTANTS  '
      IF (IAND(IPRINT,4) .NE. 0) CALL PRNTWO(TITLE,Z(FNUC))
C
C     ----- PASS ARRAY LOCATIONS TO INDEX FOR ONE-ELECTRON TERMS ---
C
      CALL ININDX(C,KATOM,KSTART,KNG,KTYPE,KMIN,KMAX,KLOC,A(IA),
     #Z(DEN1))
C
C     ----- CALCULATE DERIVATIVE OF ONE-ELECTRON AND OVERLAP TERMS --
C
      DH=NEED
      DS=DH+NNP*3*NAT
      D2S=DS+NNP*3
      IBF2AT=WPADTI(D2S)
      IF (IAND(INFOUT,2).NE.0) IBF2AT=WPADTI(D2S+NNP*6)
      NEED=IADTWP(IBF2AT+NUM)
      IF (NEED.GT.MAXCOR) THEN
        WRITE (IOUT,901) NEED*8,MAXCOR*8
  901   FORMAT (//,' # DERIV  ERROR: NOT ENOUGH CORE FOR DERIVATIVE'
     #  ,             ' ONE-ELECTRON INTEGRALS',2I8,//)
        CALL EXIT(25)
      END IF
C
      CALL BFTOAT(A(IBF2AT),KATOM,KLOC,KMIN,KMAX)
      CALL TWOONE(Z(DHF),Z(FHF),Z(FONE),Z(FOVL),Z(DH),Z(DS),C,ZAN,
     #EX,CX,Z(DENW),Z(D2S),katom,kstart,kng,ktype,kmin,kmax,kloc,
     #a(ia),z(den1))
      CALL MAKD1E(Z(DEN1),Z(DONE),Z(DH),NAT,NUM,NNP,Z(DENW),
     #Z(DOVL),A(IBF2AT),Z(DS))
      CALL VSUB(Z(DONE),Z(DONE),Z(DHF),3*NAT)
C
      CALL FOLD(Z(FHF),NAT3)
      CALL FOLD(Z(FONE),NAT3)
      CALL FOLD(Z(FOVL),NAT3)
C
C
C     ----- WRITE DERIVATIVE ONE-ELECTRON INTEGRALS TO FILE19 ---
C
      IF (IAND(INTOUT,1).NE.0) THEN
        ITAP18=78
        ITAP19=79
        CALL RFILE(ITAP19)
CTJL    CALL SREW(ITAP19)  THIS IS DONE IN RFILE.
C
CTJL    DO 1210 ITJL = 1,NAT
C       DO 1210 ITJ = 1,3
C       WRITE(*,*) '   DERIVATIVE H FOR DEGREE ',(3*(ITJL-1)+ITJ)
C       CALL PRINT(Z(DH+((ITJL-1)*3+ITJ-1)*NNP),NNP,NUM,6)
C1210 CONTINUE
CTJL
        CALL SWRIT(ITAP19,Z(DS),INTOWP(NNP*3))
        CALL SWRIT(ITAP19,Z(DH),INTOWP(NNP*3*NAT))
C
C     ----- SET BUFFER SIZES FOR WRITING DERIVATIVE TWO-
C           ELECTRON INTEGRALS, AND WRITE HEADER ON 18    -----
C
        LENIBF=SEC2I(20)
        LENBUF=SEC2I(50)/INTOWP(1)
        CALL RFILE(ITAP18)
CTJL     CALL SREW(ITAP18)  THIS IS DONE IN RFILE.
C
CTJL     WRITE (ITAP18) LENIBF,LENBUF,NAT,NUM,NNP
        CALL WWRITW(ITAP18,LENIBF,1,1,IEND)
        CALL WWRITW(ITAP18,LENBUF,1,IEND,IEND)
        CALL WWRITW(ITAP18,NAT,1,IEND,IEND)
        CALL WWRITW(ITAP18,NUM,1,IEND,IEND)
        CALL WWRITW(ITAP18,NNP,1,IEND,IEND)
C
        CALL SWRIT(ITAP18,A(IBF2AT),NUM)
      END IF
      IF (INFOUT.NE.0) CALL WR22A(A(IBF2AT),Z(DS),Z(D2S),Z(DH),nbset)
C
C
C
      NEED=DENW
C
C   ADD UP THE HELLMAN-FEYNMAN, OVERLAP, ONE ELECTRON AND TWO ELECTRON
C   CONTRIBUTIONS TO THE CI GRADIENT IN ORDER TO EVALUATE THE CPCI.
C   (NEED THE ELECTRONIC CONTRIBUTION TO THE GRADIENT.)
C                                                    TJL
C
 
      CALL VADD(Z(DELC),Z(DHF),Z(DONE),3*NAT)
      CALL VADD(Z(DELC),Z(DELC),Z(DOVL),3*NAT)
C
C     ----- ADD HELLMAN-FEYNMAN TERM AND NUCLEAR REPULSION -----
C                 TO GIVE HELLMAN-FEYNMAN GRADIENT
C
      CALL VADD(Z(DHF),Z(DHF),Z(DNUC),3*NAT)
C
      CALL VADD(Z(FHF),Z(FHF),Z(FNUC),NAT3**2)
      TITLE='       HELLMAN-FEYNMAN FIRST DERIVATIVES           '
      IF (IAND(IPRINT,8) .NE. 0) CALL PRNONE(TITLE,Z(DHF))
      TITLE='        HELLMAN-FEYNMAN FORCE CONSTANTS            '
      IF (IAND(IPRINT,16).NE. 0) CALL PRNTWO(TITLE,Z(FHF))
      TITLE='ONE-ELECTRON CONTRIBUTION TO FIRST DERIVATIVES     '
      IF (IAND(IPRINT,8) .NE. 0) CALL PRNONE(TITLE,Z(DONE))
      TITLE='ONE-ELECTRON CONTRIBUTION TO FORCE CONSTANTS       '
      IF (IAND(IPRINT,16).NE. 0) CALL PRNTWO(TITLE,Z(FONE))
CACS
CACS  IF(CALTYP.NE.'CI   '.AND.CALTYP.NE.'GVBCI') THEN
        TITLE='OVERLAP CONTRIBUTION TO FIRST DERIVATIVES          '
        IF (IAND(IPRINT,8) .NE. 0) CALL PRNONE(TITLE,Z(DOVL))
        TITLE='OVERLAP CONTRIBUTION TO FORCE CONSTANTS            '
        IF (IAND(IPRINT,16).NE. 0) CALL PRNTWO(TITLE,Z(FOVL))
CACS  END IF
CACS
C
C     ----- CALCULATE DERIVATIVE OF TWO-ELECTRON TERMS -----
C
      MAXSHL=MXANGM*(MXANGM+1)/2
      LEN2D=512
      LENBLK=MAXSHL**4
      XIN=NEED
      YIN=XIN+LEN2D
      ZIN=YIN+LEN2D
      DXI=ZIN+LEN2D
      DYI=DXI+LEN2D
      DZI=DYI+LEN2D
      DXJ=DZI+LEN2D
      DYJ=DXJ+LEN2D
      DZJ=DYJ+LEN2D
      DXK=DZJ+LEN2D
      DYK=DXK+LEN2D
      DZK=DYK+LEN2D
      DD2D=DZK+LEN2D
      ABDENS=DD2D+LEN2D*18
      LENINT=LENBLK
      DERINT=ABDENS+INTOWP(LENBLK)
      IBUF=WPADTI(DERINT+LENINT*9)
      BUF=IADTWP(IBUF+LENIBF)
      NEED=BUF+LENBUF
C
CTJL  IF (CALTYP.EQ.'MCSCF') THEN
      IF (CALTYP.EQ.'MCSCF'.OR.CALTYP.EQ.'CI   ') THEN
        IDMSZ=SEC2I(100)
        IDMR=IDMSZ/INTOWP(1)
C
        IMOSHL=WPADTI(NEED)
        SHIZ=IMOSHL+NUM
        IJOFF=SHIZ+NNP
        KLOFF=IJOFF+NNP
        KLSIZ=KLOFF+NNP
        ABTEMP=IADTWP(KLSIZ+NNP)
        RDMBF=ABTEMP+LENBLK
        IDMBF=WPADTI(RDMBF)
        NEED=RDMBF+IDMR
      END IF
C
C
      IF (INFOUT.NE.0) THEN
        IBMAT=NEED
        NEED=IBMAT+NNP*3*NAT*NBSET
      END IF
C
C
C
C
      IF (NEED.GT.MAXCOR) THEN
        WRITE (IOUT,902)
  902   FORMAT (//,' # DERIV  ERROR: NOT ENOUGH CORE FOR TWO-ELECTRON'
     #  ,          ' FIRST DERIVATIVES',//)
        CALL EXIT(24)
      END IF
      WRITE (IOUT,904) NEED*8,MAXCOR*8
  904 FORMAT (/,' USING A TOTAL OF ',I8,' OF ',I8,' BYTES OF CORE',/)
C
      IF (CALTYP.EQ.'MCSCF'.OR.CALTYP.EQ.'CI   ') THEN
        CALL MCDEN1(A(SHIZ),A(IJOFF),A(KLOFF),A(KLSIZ),
     #  Z(RDMBF),A(IDMBF),IDMSZ,IDMR,A(IA),
     #  Z(ABDENS),LENBLK,Z(ABTEMP),MAXSHL,
     #  A(IMOSHL),KLOC,KMIN,KMAX)
      END IF
C
C     ----- LOAD OVERLAY FOR TWO-ELECTRON SECOND DERIVATIVES -----
C
C     CALL M:LOAD(TWOEL,JUNK)
C
C     THIS OVERLAY STRUCTURE DID NOT WORK FOR CI FIRST
C
         LBSTAT = .TRUE.
         LFSTAT = .TRUE.
CTJL  WRITE(*,*) '1IN DERIV87; LENIBF =',LENIBF,' LENBUF =',LENBUF
      IF(LENIBF .EQ. 0) THEN
         LBSTAT = .FALSE.
         LENIBF = 1
      END IF
      IF(LENBUF .EQ. 0) THEN
         LFSTAT = .FALSE.
         LENBUF = 1
      END IF
C
      CALL JK2DER(A(IA),Z(DENT),Z(DENMAT),Z(DTWO),Z(XIN),Z(YIN),
     #Z(ZIN),Z(DXI),Z(DYI),Z(DZI),Z(DXJ),Z(DYJ),Z(DZJ),
     #Z(DXK),Z(DYK),Z(DZK),Z(DD2D),LEN2D,Z(ABDENS),LENBLK,
     #Z(DERINT),LENINT,A(IBUF),LENIBF,Z(BUF),LENBUF,
     #ITAP18,ITAP19,A(MXSPDF),A(MINSH),A(MAXSH),MXANGM,
     #KATOM,C,KSTART,KNG,KTYPE,KMIN,KMAX,KLOC,EX,CX,ISO,
     #Z(FTWO),Z(IBMAT),ICT,PTR,DTR,INVT,NBSET,
     # A(SHIZ),A(IJOFF),A(KLOFF),A(KLSIZ),
     #  Z(RDMBF),A(IDMBF),IDMSZ,IDMR,A(IA),
     #  Z(ABTEMP),MAXSHL,
     #  A(IMOSHL))
C
      IF(.NOT. LBSTAT)  THEN
         LENIBF = 0
      END IF
      IF(.NOT. LFSTAT)  THEN
         LENBUF = 0
      END IF
C
      CALL FOLD(Z(FTWO),NAT3)
C
      CALL SYMD(Z(DTWO),ICT,PTR,INVT)
      CALL SYMH(Z(FTWO),ICT,PTR,INVT)
      IF (INFOUT.NE.0) THEN
        IDIM=10
        MI=WPADTI(XIN)
        MJ=MI+NT
        MIAT=MJ+NT
        MOP=MIAT+NT
        VX=IADTWP(MOP+NT)
        VY=VX+IDIM**2
        VZ=VY+IDIM**2
        UX=VZ+IDIM**2
        UY=UX+IDIM**2
        UZ=UY+IDIM**2
        TX=UZ+IDIM**2
        TY=TX+IDIM**2
        TZ=TY+IDIM**2
        LAST=TZ+IDIM**2
        IF (LAST.GT.BUF) STOP ' SCF2::LAST.GT.BUF'
C
        CALL SYMF(Z(IBMAT),NBSET,ICT,PTR,DTR,INVT,
     #  A(MI),A(MJ),KTYPE,KMIN,KMAX,KLOC,
     #  A(MIAT),A(MOP),Z(VX),Z(VY),Z(VZ),
     #  Z(UX),Z(UY),Z(UZ),Z(TX),Z(TY),
     #  Z(TZ),IDIM,ISO)
C
      END IF
C
      TITLE='TWO-ELECTRON CONTRIBUTION TO FIRST DERIVATIVES     '
      IF (IAND(IPRINT,64) .NE. 0) CALL PRNONE(TITLE,Z(DTWO))
      TITLE='TWO-ELECTRON CONTRIBUTION TO FORCE CONSTANTS       '
      IF (IAND(IPRINT,64) .NE. 0) CALL PRNTWO(TITLE,Z(FTWO))
C
C  ADD IN THE TWO ELECTRON CONTRIBUTION TO THE ELECTRONIC GRADIENT,
C  THEN WRITE IT TO FILE 47.
C
      CALL VADD(Z(DELC),Z(DELC),Z(DTWO),3*NAT)
      CALL WT47(Z(DELC),30)
        TITLE='---- CI GRADIENTS LESS NUCLEAR CONTRIBUTION ---------'
      CALL PRNONE(TITLE,Z(DELC))
C
C
C     ----- ADD ALL CONTRIBUTIONS TO THE GRADIENT -----
C
      CALL VADD(Z(DTOT),Z(DHF),Z(DONE),3*NAT)
CACS
CACS  IF(CALTYP.NE.'CI   '.AND.CALTYP.NE.'GVBCI') THEN
        CALL VADD(Z(DTOT),Z(DTOT),Z(DOVL),3*NAT)
CACS  END IF
CACS
      CALL VADD(Z(DTOT),Z(DTOT),Z(DTWO),3*NAT)
      CALL VADD(Z(FTOT),Z(FHF),Z(FONE),NAT3**2)
      CALL VADD(Z(FTOT),Z(FTOT),Z(FTWO),NAT3**2)
CACS
CACS  IF(CALTYP.NE.'CI   '.AND.CALTYP.NE.'GVBCI') THEN
        CALL VADD(Z(FTOT),Z(FTOT),Z(FOVL),NAT3**2)
CACS  END IF
CACS
C
      TITLE='---------------- TOTAL SCF DERIVATIVES ------------'
      IF (CALTYP.EQ.'MCSCF') THEN
      TITLE='--------------- TOTAL MCSCF DERIVATIVES -----------'
      END IF
      IF (CALTYP.EQ.'CI   ') THEN
      TITLE='---------------- TOTAL CI DERIVATIVES -------------'
      END IF
      IF (IAND(IPRINT,512) .NE. 0) CALL PRNONE(TITLE,Z(DTOT))
      TITLE='--- SCF FORCE CONSTANTS LESS CPHF CONTRIBUTION ----'
      IF (CALTYP.EQ.'MCSCF') THEN
      TITLE='- MCSCF FORCE CONSTANTS LESS CPMCHF CONTRIBUTION --'
      END IF
      IF (CALTYP.EQ.'CI   ') THEN
      TITLE='-- DERIVATIVE INTEGRAL CONTRIBUTION TO CI FORCES --'
C
C  WRITE DERIVATIVE INTEGRAL CONTRIBUTION TO FILE 47
C
      CALL WT47(Z(FTOT),26)
      END IF
      IF (IAND(IPRINT,1024).NE.0) CALL PRNTWO(TITLE,Z(FTOT))
C
C
      IF (INFOUT.NE.0) CALL WR22B(Z(IBMAT),Z(DTOT),Z(FTOT),nbset)
C
C     ----- WRITE GRADIENT TO TAPE30 -----
C
      CALL DTOTEN(Z(DTOT),NAT)
C
          IF (IAND(INTOUT,1).NE.0) THEN
             CALL RCLOSE(ITAP18,3)
             CALL RCLOSE(ITAP19,3)
          END IF
C
      RETURN
      END
      SUBROUTINE SCFMAT(D,DENT,DENW,DEN1)
C
C
C     READ (NTYPES) DENSITY MATRICES FROM TAPE49: CLOSED SHELL
C                                                 ALPHA OPEN SHELL
C                                                 BETA OPEN SHELL
C                                                 ENERGY WEIGHTED
C
C
      IMPLICIT REAL*8 (A-H,O-Z)
C
C
      CHARACTER*5 CALTYP
      CHARACTER*6 SCFTYP,CITYP,DERTYP
      LOGICAL OPEN,CIONE
      INTEGER IDUM(4),IA47(192),FCB47(16)
C
      COMMON /INFOA/  NAT,NUM,NNP,NSHELL,NIRRED,NT,NPRIM,MXT,NISO
      COMMON /COUPLC/ FOCC(5),ALP(5,5),BET(5,5),NTYPES
      COMMON /HOLL/   ESCF,FMTER(13),JL
      COMMON /LABELS/ IALBEL(20),IBLBEL(20)
      COMMON /CNTRL/  IPRINT,NDERIV,INTOUT,INFOUT,OPEN,SCFTYP,CALTYP
      COMMON /TAPES/  IOUT,ICHECK,INPUT,ITAP42,ITAP49
C
      DIMENSION D(NNP,NTYPES),DENT(NNP),DENW(NNP),DEN1(NNP)
      DIMENSION ALPC(21),BETC(21)
C
      MAXTYP=5
      CIONE=.FALSE.
      IF(CALTYP.EQ.'CI   ' .AND. NDERIV.EQ.1) CIONE=.TRUE.
      IF(CALTYP.EQ.'GVBCI' .AND. NDERIV.EQ.1) CIONE=.TRUE.
C
      NBFAO=NUM
      NIJ=NNP
CTEMPEND
CSEL  CALL RSETSA(ITAP49,1)
      WRITE (ICHECK,1) CALTYP,CITYP,DERTYP
    1 FORMAT (//,' READING 49 FILE FOR DENSITY MATRICES',/
     #,       '  CALCULATION TYPE IS ',A5,1X,2A6,'.')
      WRITE (ICHECK,2) NTYPES,NBFAO,NIJ,ESCF
    2 FORMAT (/'   THERE ARE',I2,' DENSITY MATRICES.'/
     #,        '   NUMBER OF AOS:',I4,' SIZE OF MATRICES:',I5/
     #,        '   TOTAL ENERGY  =',F14.8)
      IERR = 0
      IF (NBFAO.EQ.NUM.AND.NIJ.EQ.(NUM+1)*NUM/2) GO TO 91
      IERR = IERR + 1
      WRITE (IOUT,80) NUM,NBFAO,NNP,NUM*(NUM+1)/2
   80 FORMAT (//,' **** ERROR READING TAPE49 FOR DENSITY MATRICES'
     #,       /,' NUM AOS IS',I4,' ON 49 IS ',I4,' MATRIX SIZE SHOULD'
     #,       ' BE',I5,' IS',I5,//)
   91 IF (NTYPES.LE.MAXTYP) GO TO 92
      IERR = IERR + 1
      WRITE(ICHECK,81) NTYPES,MAXTYP
   81 FORMAT (// ' XXXXX TOO MANY NTYPES',I4,' XXXXX MAX=',I4)
C
C
   92 CONTINUE
C     IF (CITYP .EQ.'CI    '.AND.CIONE ) GO TO 93
C     IF (CITYP .EQ.'SCF   '.AND..NOT.CIONE) GO TO 93
CC    IERR = IERR + 1
C     WRITE(ICHECK,82)
C  82 FORMAT(//' XXXXXX CITYP IS INCONSISTENT XXXXXXXX')
C  93 IF (DERTYP.EQ.'SECOND'.AND.TWODER) GO TO 100
C     IF (DERTYP.EQ.'FIRST '.AND..NOT.TWODER) GO TO 100
CC    IERR = IERR + 1
C     WRITE(ICHECK,83)
C  83 FORMAT(//' XXXXXX DERTYP IS INCONSISTENT XXXXXXXX')
CYO
C 100 CONTINUE
      IF (IERR.NE.0) STOP ' WHAT DO YOU WANT TO CALCULATE ?'
C
C     ----- READ EITHER SCF OR MCSCF DENSITY MATRICES -----
C
      IF (CALTYP.EQ.'MCSCF') THEN
        CALL ZERO(DENT,NNP)
        CALL ZERO(DENW,NNP)
        CALL RGETSA(ITAP49,ISECT)
        ISECT=ISECT+(NTYPES+1)*I2SEC(INTOWP(NNP))
        IF (SCFTYP(1:5).EQ.'GRSCF'.OR.SCFTYP(1:5).EQ.'TCSCF') THEN
          ISECT=ISECT+I2SEC(INTOWP(NTYPES))+2*I2SEC(INTOWP(NTYPES*
     #    (NTYPES+1)/2))
        END IF
        CALL RREAD(ITAP49,DENT,INTOWP(NNP),ISECT)
        CALL SREAD(ITAP49,DENW,INTOWP(NNP))
C
C        ----- TEMPORARY FIX FOR COMPATIBILITY -----
C
        DO 9 I=1,NNP
          DENW(I)=-DENW(I)*0.5D+00
    9   CONTINUE
C
      ELSE
C
C     ----- SCF PART -----
C
        CALL ZERO(DEN1,NNP)
        CALL ZERO(DENT,NNP)
        CALL ZERO(DENW,NNP)
        CALL ZERO(D,NNP*NTYPES)
        FOCC(1)=2.0D0
        DO 102 I=2,5
  102   FOCC(I)=0.0D0
        DO 103 I=1,5
          DO 103 J=1,5
            ALP(I,J)=0.0D0
  103   BET(I,J)=0.0D0
C
        IF (SCFTYP(1:5).NE.'HSOP ') GO TO 178
        FOCC(2)=1.0D0
        IF (NTYPES.NE.2) STOP ' ERROR IN HSOP NTYPES'
  178   CONTINUE
C
        CALL SREW(ITAP49)
        CALL SREAD(ITAP49,IDUM,4)
        DO 104 ITYP=1,NTYPES
          CALL SREAD(ITAP49,D(1,ITYP),INTOWP(NNP))
CTJL  WRITE(*,*) ' ITYP AND D '
CTJL    CALL PRINT(D(1,ITYP),NNP,NUM,6)
  104   CONTINUE
        CALL SREAD(ITAP49,DENW,INTOWP(NNP))
        IF (SCFTYP(1:5).NE.'GRSCF'.AND.SCFTYP(1:5).NE.'TCSCF') GO TO
     *  110
        NNPTY=NTYPES*(NTYPES+1)/2
        CALL SREAD(ITAP49,FOCC,INTOWP(NTYPES))
        CALL SREAD(ITAP49,ALPC,INTOWP(NNPTY))
        CALL SREAD(ITAP49,BETC,INTOWP(NNPTY))
CTJL
CTJL    WRITE(*,*) ' THE ALPHA AND BETA MATRICES FROM TAPE 49 ',NTYPES
CTJL    CALL PRINT(ALPC,NTYPES,NNPTY,6)
CTJL    CALL PRINT(BETC,NTYPES,NNPTY,6)
CTJL
        IJ=0
        DO 106 I=1,NTYPES
          DO 106 J=1,I
            IJ=IJ+1
            ALP(I,J) =  (1.0D0-ALPC(IJ))*0.50D0*FOCC(I)*FOCC(J)
            BET(I,J) = -(1.0D0-BETC(IJ))*0.25D0*FOCC(I)*FOCC(J)
            ALP(J,I)=ALP(I,J)
            BET(J,I)=BET(I,J)
  106   CONTINUE
C
CTJL
C       ALP(2,2) = 0.0D0
C       ALP(3,3) = 0.0D0
C       BET(2,2) = 0.0D0
C       BET(3,3) = 0.0D0
CTJL    WRITE(*,*) ' THE ALPHA AND BETA MATRICES ; AFTER'
CTJL    CALL MATOUT(ALP,5,5,5,5,6)
CTJL    CALL MATOUT(BET,5,5,5,5,6)
CTJL
CYO
        WRITE(ICHECK,11)
        DO 111 I=1,NTYPES
  111   WRITE(ICHECK,12) I,FOCC(I),(ALP(I,J),J=1,NTYPES)
        WRITE(ICHECK,13)
        DO 112 I=1,NTYPES
  112   WRITE(ICHECK,14) I,        (BET(I,J),J=1,NTYPES)
   11   FORMAT(//7X,' FOCC  &  ALPHA COUPLING CONSTANTS')
   12   FORMAT(1X,I5,F8.5,2X,5F12.7)
   13   FORMAT(//7X,'           BETA COUPLING CONSTANTS')
   14   FORMAT(1X,I5,10X,5F12.7)
C
  110   IF (CALTYP.NE.'MCSCF') GO TO 120
C
C     DO 115 I=1,NNP
C 115 DENT(I)=D(I,1)
C     GO TO 150
C
  120   CONTINUE
C
C     ----- GET CI ONE PARTICLE DENSITY MATRIX -----
C              AND CI LAGRANGIAN MATRIX
C
        IF (CALTYP.EQ.'CI   '.OR.CALTYP.EQ.'GVBCI') THEN
CCGF      CALL SREAD(ITAP49,DEN1,INTOWP(NNP))
CCGF      CALL SREAD(ITAP49,DENW,INTOWP(NNP))
CIBM      CALL SREW(IT47)
          CALL RT47(IA47,1)
          WRITE(ICHECK,1403)
 1403     FORMAT(/'  THE IA47 ARRAY:')
          WRITE(ICHECK,1404) (IA47(III), III=1,192)
 1404     FORMAT(10I7)
          CALL RT47(DENW,21)
CTJL      WRITE(ICHECK,1401)
 1401     FORMAT(/'  THE AO BASIS SYMMETRIZED CI LAGRANGIAN:')
CTJL      CALL PRINT(DENW,NNP,NUM,6)
CTJL      WRITE(*,*) ' IN DERTFK IA47(122),172 = ',IA47(122),IA47(172)
          CALL RT47(DEN1,22)
CTJL       WRITE(*,1402)
 1402     FORMAT(/'  THE CI 1PDM IN THE AO BASIS:')
CTJL      CALL PRINT(DEN1,NNP,NUM,6)
        END IF
        DO 125 ITYP=1,NTYPES
          DO 124 I=1,NNP
            DENT(I)=DENT(I)+D(I,ITYP)*FOCC(ITYP)
CTJL     WRITE(*,*) ' TYPE,FOCC ',ITYP,FOCC(ITYP)
  124     CONTINUE
  125   CONTINUE
C
C
C 150 CONTINUE
        DO 162 I=1,NNP
          DENW(I)=-DENW(I)
  162   CONTINUE
C
        IF (IAND(IPRINT,2048).EQ.0) RETURN
C
        WRITE (IOUT,4)
    4   FORMAT(/'  SCF TOTAL DENSITY MATRIX')
CTJL    CALL PRINT(DENT,NNP,NUM,IOUT)
        WRITE (IOUT,5)
    5   FORMAT(/'  ENERGY WEIGHTED DENSITY MATRIX')
CTJL    CALL PRINT(DENW,NNP,NUM,IOUT)
C       IF (CALTYP.NE.'CI   '.AND.CALTYP.NE.'GVBCI') RETURN
C
C       WRITE (IOUT,900)
C 900   FORMAT (/,'  CI ONE-PARTICLE DENSITY MATRIX ')
CTJL    CALL PRINT(DEN1,NNP,NUM,IOUT)
      END IF
C
      RETURN
      END
      SUBROUTINE SETNOS(NT,MXT,T,ISO,NISO,NSHELL)
C
C
C
C     EXTENDED DUMMY T,ISO
C
      REAL*8 T(MXT)
      INTEGER ISO(NSHELL,NISO)
C
      COMMON /ISOPAC/ INDIN(120),INDOUT(30)
      COMMON /TAPES/  IOUT,ICHECK,INPUT,ITAP42,ITAP49
C
C
C
C         FORCE THE NO-SYMMETRY CALCULATION FOR CI SECOND DERIVATIVE
C
    1 FORMAT(/'   $$$$$ SET NO-SYMMETRY FLAG $$$$$'/
     1,       '   VALUES BEFORE SETNOS    NTRANS=',I3)
    2 FORMAT( '  TRANS=',9F10.6)
    3 FORMAT( '   ISO =',10I10)
    5 FORMAT(/'   %%%%%%%%%% AFTER SETNO  NTRANS=',I3)
C
      WRITE(ICHECK,1) NT
      WRITE(ICHECK,2) (T(I),I=1,MXT)
      WRITE(ICHECK,3) ((ISO(I,J),I=1,NSHELL),J=1,NISO)
C
      NT = 1
      MXT=9
      DO 101 I=1,9
  101 T(I)=0.0
      T(1)=1.0
      T(5)=1.0
      T(9)=1.0
      DO 105 I=1,NSHELL
        INDIN(1)=I
        CALL ISOIN
        ISO(I,1)=INDOUT(1)
  105 CONTINUE
      WRITE(ICHECK,5) NT
      WRITE(ICHECK,2) (T(I),I=1,MXT)
      WRITE(ICHECK,3) (ISO(I,1),I=1,NSHELL)
C
      RETURN
      END
      SUBROUTINE SYMD (DE,ICT,PTR,INVT)
C
C
C MODIFIED 25 AUGUST 1983 AT BRL TO HANDLE VARIABLE DIMENSIONED
C HONDO ARRAYS                                           PWS
C
      IMPLICIT REAL*8 (A-H,O-Z)
C
C     EXTENDED DUMMY DE,ICT,PTR,INVT
C
      REAL*8 DE(3,NAT),PTR(3,3,NT)
      INTEGER ICT(NAT,NT),INVT(NT)
      LOGICAL IANDJ
      LOGICAL OPEN
      CHARACTER*5 CALTYP
      CHARACTER*6 SCFTYP
      character*50 title
C
      COMMON /TAPES/  IOUT,ICHECK,INPUT,ITAP42,ITAP49
      COMMON /CNTRL/  IPRINT,NDERIV,INTOUT,INFOUT,OPEN,SCFTYP,CALTYP
      COMMON /INFOA/  NAT,NUM,NNP,NSHELL,NIRRED,NT,NPRIM,MXT,NISO
      COMMON /OUTPUT/ NPRINT,ITOL,ICUT,NORMF,NORMP,NOPK
C
C
C
C
CTEMP IF(NPRINT.EQ.0) GO TO 9
      WRITE(ICHECK,6010)
 6010 FORMAT(//,' GRADIENT BEFORE SYMDE')
      WRITE(ICHECK,6011) ((DE(I,J),I=1,3),J=1,NAT)
 6011 FORMAT(3F16.7)
      WRITE(ICHECK,6012) ICT
 6012 FORMAT (/,' ICT:',(15I4))
      WRITE(ICHECK,6013) INVT
 6013 FORMAT (/,' INVT:',(15I4))
      WRITE(ICHECK,6014) (((PTR(IQ,JQ,KQ),IQ=1,3),JQ=1,3),KQ=1,NT)
 6014 FORMAT (//,' TRANSFORMATION MATRICES:',/,(3(/,1X,3F15.6),//))
    9 IF (NT.EQ.1) RETURN
C
C     ----- SYMMETRYZE GRADIENT VECTOR -----
C
      ZERO=0.0D+00
      DO 2500 IC=1,NAT
        DO 2100 IT=1,NT
          IF(ICT(IC,IT).GT.IC) GO TO 2500
 2100   CONTINUE
        DEDX=ZERO
        DEDY=ZERO
        DEDZ=ZERO
        DO 2200 IT=1,NT
          ICNU=ICT(IC,IT)
          DEDXP=DE(1,ICNU)
          DEDYP=DE(2,ICNU)
          DEDZP=DE(3,ICNU)
          DEDX=DEDX+DEDXP*PTR(1,1,IT)+DEDYP*PTR(2,1,IT)+DEDZP*PTR(3,1,
     *    IT)
          DEDY=DEDY+DEDXP*PTR(1,2,IT)+DEDYP*PTR(2,2,IT)+DEDZP*PTR(3,2,
     *    IT)
          DEDZ=DEDZ+DEDXP*PTR(1,3,IT)+DEDYP*PTR(2,3,IT)+DEDZP*PTR(3,3,
     *    IT)
 2200   CONTINUE
        DE(1,IC)=DEDX
        DE(2,IC)=DEDY
        DE(3,IC)=DEDZ
        DO 2400 IT=1,NT
          ICNU=ICT(IC,IT)
          IF(ICNU.EQ.IC) GO TO 2400
          IF(IT.EQ.NT) GO TO 2350
          IT1=IT+1
          DO 2300 JT=IT1,NT
            IF(ICT(IC,JT).EQ.ICNU) GO TO 2400
 2300     CONTINUE
 2350     CONTINUE
          JT=INVT(IT)
          DE(1,ICNU)=DE(1,IC)*PTR(1,1,JT)+DE(2,IC)*PTR(2,1,JT)
     1    +DE(3,IC)*PTR(3,1,JT)
          DE(2,ICNU)=DE(1,IC)*PTR(1,2,JT)+DE(2,IC)*PTR(2,2,JT)
     1    +DE(3,IC)*PTR(3,2,JT)
          DE(3,ICNU)=DE(1,IC)*PTR(1,3,JT)+DE(2,IC)*PTR(2,3,JT)
     1    +DE(3,IC)*PTR(3,3,JT)
 2400   CONTINUE
 2500 CONTINUE
      DUM=DBLE(NT)
      DO 2600 N=1,NAT
        DO 2600 I=1,3
 2600 DE(I,N)=DE(I,N)/DUM
CC
      RETURN
      END
      SUBROUTINE SYMF(B,NBSET,ICT,PTR,DTR,INVT,MI,MJ,KTYPE,KMIN,
     #KMAX,KLOC,MIAT,MOP,VX,VY,VZ,UX,UY,UZ,TX,TY,
     #TZ,IDIM,ISO)
C
C
C
      IMPLICIT REAL*8 (A-H,O-Z)
C
C     EXTENDED DUMMY B,ICT,PTR,DTR,INVT,MI,MJ,KTYPE,KMIN,KMAX,KLOC,MIAT
C    #,              MOP,VX,VY,VZ,UX,UY,UZ,TX,TY,TZ,ISO
C
      REAL*4 DUMM
      REAL*8 TJL(28)
      REAL*8 B(NNP,3,NAT,NBSET),PTR(3,3,NT),DTR(6,6,NT)
      REAL*8 VX(IDIM,IDIM),VY(IDIM,IDIM),VZ(IDIM,IDIM)
      REAL*8 UX(IDIM,IDIM),UY(IDIM,IDIM),UZ(IDIM,IDIM)
      REAL*8 TX(IDIM,IDIM),TY(IDIM,IDIM),TZ(IDIM,IDIM)
      INTEGER INVT(NT),ICT(NAT,NT),MI(NT),MJ(NT),KTYPE(NSHELL)
      INTEGER KMIN(NSHELL),KMAX(NSHELL),KLOC(NSHELL),MIAT(NT)
      INTEGER MOP(NT),ISO(NSHELL,NISO)
      LOGICAL IANDJ
C
C     COMMON /CNTRL/  IPRINT,ONEDER,TWODER,CIONE,OPEN,CITWO
      COMMON /INFOA/  NAT,NUM,NNP,NSHELL,NIRRED,NT,NPRIM,MXT,NISO
      COMMON /OUTPUT/ NPRINT,ITOL,ICUT,NORMF,NORMP,NOPK
      COMMON /SECOND/ NAT3
      COMMON /ISOPAC/ INDIN(120),INDOUT(30)
C
C
C
CTJL
C     DO 9999 ITJL = 1,28
C     TJL(ITJL) = B(ITJL,3,3,7)
C9999 CONTINUE
C     WRITE(*,*) ' THE SKBMAT ARRAY FOR PERT 9 '
C     CALL PRINT(TJL,28,7,6)
CTJL
      IF (NT.EQ.1) RETURN
      DUMM=FLOAT(NT)
      DUMT=DBLE(DUMM)
      DO 1000 IBSET=1,NBSET
C
C     ----- FIND A BLOCK (I,J) -----
C
         DO 520 II=1,NSHELL
            DO 129 ITR=1,NISO
129         INDOUT(ITR)=ISO(II,ITR)
            CALL ySOOUT
      JJJI=ITR+3
CTJL  DO JJJJ=ITR,JJJI   ????????? WHAT IS THIS FOR ????????????????
CTJL  END DO             ???????????????????????????????????????????
            DO 140 ITR=1,NT
               ISH = INDIN(ITR)
               IF (ISH.GT.II) GO TO 520
140         MI(ITR)=ISH
            LIT=KTYPE(II)
            MINI=KMIN(II)
            MAXI=KMAX(II)
            LOCI=KLOC(II)-MINI
            DO 500 JJ=1,II
               DO 160 ITR=1,NISO
160            INDOUT(ITR)=ISO(JJ,ITR)
               CALL ySOOUT
               DO 217 ITR=1,NT
                  JSH=INDIN(ITR)
                  MJ(ITR)=JSH
                  IF (JSH.GT.II) GO TO 500
                  ISH=MI(ITR)
                  IF (ISH.GT.JSH) GO TO 187
                  N=ISH
                  ISH=JSH
                  JSH=N
187               IF (ISH.EQ.II.AND.JSH.GT.JJ) GO TO 500
217            CONTINUE
               LJT=KTYPE(JJ)
               MINJ=KMIN(JJ)
               MAXJ=KMAX(JJ)
               LOCJ=KLOC(JJ)-MINJ
               IANDJ=II.EQ.JJ
               JMAX=MAXJ
C
C     FIND THEM THERE EQUIVALENT BLOCKS
C     TRANSFER THE EQUIVALENT BLOCK INTO T-MATRIX
C     COMPUTE R T R
C     PUT RESULT BACK INTO THE (I,J) BLOCK OF H-MATRIX
C
               DO 310 IAT=1,NAT
                  DO 29 ITR=1,NT
 29               MIAT(ITR)=ICT(IAT,ITR)
                  DO 30 I=1,10
                     DO 30 J=1,10
                        VX(J,I)=0.0D+00
                        VY(J,I)=0.0D+00
                        VZ(J,I)=0.0D+00
30                CONTINUE
                  DO 35 ITR=1,NT
                     MOP(ITR)=0
                     MII=MI(ITR)
                     MJJ=MJ(ITR)
                     MOI=1
                     IF (MII.GE.MJJ) GO TO 210
                     MII=MJJ
                     MJJ=MI(ITR)
                     MOI=-1
210                  IF (MII.NE.II.OR.MJJ.NE.JJ) GO TO 35
                     MOP(ITR)=MOI
                     IF (IAT.LT.MIAT(ITR)) GO TO 310
35                CONTINUE
                  DO 300 ITR=1,NT
                     NTR=ITR
                     NIAT=MIAT(NTR)
                     KK=MI(ITR)
                     LL=MJ(ITR)
                     LOCK=KLOC(KK)-KMIN(KK)
                     LOCL=KLOC(LL)-KMIN(LL)
                     DO 260 K=MINI,MAXI
                        LCK=LOCK+K
                        IF (IANDJ) JMAX=K
                        DO 260 L=MINJ,JMAX
                           LCL=LOCL+L
                           IF (LCK.GE.LCL) THEN
 220                       LCKL=LCK*(LCK-1)/2+LCL
                           ELSE
                           LCKL=LCL*(LCL-1)/2+LCK
                           END IF
 240                       TX (K,L)=B(LCKL,1,NIAT,IBSET)
                           TY(K,L)=B(LCKL,2,NIAT,IBSET)
                           TZ(K,L)=B(LCKL,3,NIAT,IBSET)
                           IF (IANDJ) THEN
                           TX(L,K)=B(LCKL,1,NIAT,IBSET)
                           TY(L,K)=B(LCKL,2,NIAT,IBSET)
                           TZ(L,K)=B(LCKL,3,NIAT,IBSET)
                           END IF
260                  CONTINUE
                     CALL RDFR(TX,MINI,MAXI,LIT,MINJ,MAXJ,LJT,NTR,PTR,
     *               DTR)
                     CALL RDFR(TY,MINI,MAXI,LIT,MINJ,MAXJ,LJT,NTR,PTR,
     *               DTR)
                     CALL RDFR(TZ,MINI,MAXI,LIT,MINJ,MAXJ,LJT,NTR,PTR,
     *               DTR)
                     DO 280 I=MINI,MAXI
                        DO 280 J=MINJ,MAXJ
                           VX(I,J)=VX(I,J) + PTR(1,1,NTR)*TX(I,J)
     1                     + PTR(2,1,NTR)*TY(I,J)
     2                     + PTR(3,1,NTR)*TZ(I,J)
                           VY(I,J) = VY(I,J) + PTR(1,2,NTR)*TX(I,J)
     1                     + PTR(2,2,NTR)*TY(I,J)
     2                     + PTR(3,2,NTR)*TZ(I,J)
                           VZ(I,J)=VZ(I,J)   + PTR(1,3,NTR)*TX(I,J)
     1                     + PTR(2,3,NTR)*TY(I,J)
     2                     + PTR(3,3,NTR)*TZ(I,J)
280                  CONTINUE
300               CONTINUE
                  DO 55 ITR=1,NT
                     IF (MOP(ITR).EQ.0) GO TO 55
                     MOI=MOP(ITR)
                     NTR=INVT(ITR)
                     JAT=MIAT(NTR)
                     IF (MOI.LT.0) GO TO 290
                     MINX=MINI
                     MAXX=MAXI
                     LXT=LIT
                     MINY=MINJ
                     MAXY=MAXJ
                     LYT=LJT
                     DO 52 I=1,10
                        DO 52 J=1,10
                           TX(J,I)=0.0D+00
                           TY(J,I)=0.0D+00
                           TZ(J,I)=0.0D+00
                           UX(J,I)=VX(J,I)
                           UY(J,I)=VY(J,I)
                           UZ(J,I)=VZ(J,I)
52                   CONTINUE
                     GO TO 292
290                  MINX=MINJ
                     MAXX=MAXJ
                     LXT=LJT
                     MINY=MINI
                     MAXY=MAXI
                     LYT=LIT
                     DO 56 I=1,10
                        DO 56 J=1,10
                           TX(J,I)=0.0D+00
                           TY(J,I)=0.0D+00
                           TZ(J,I)=0.0D+00
                           UX(J,I)=VX(I,J)
                           UY(J,I)=VY(I,J)
                           UZ(J,I)=VZ(I,J)
56                   CONTINUE
292                  CONTINUE
                     CALL RDFR(UX,MINX,MAXX,LXT,MINY,MAXY,LYT,NTR,PTR,
     *               DTR)
                     CALL RDFR(UY,MINX,MAXX,LXT,MINY,MAXY,LYT,NTR,PTR,
     *               DTR)
                     CALL RDFR(UZ,MINX,MAXX,LXT,MINY,MAXY,LYT,NTR,PTR,
     *               DTR)
                     DO 54 I=MINI,MAXI
                        DO 54 J=MINJ,MAXJ
                           TX(I,J)=TX(I,J) + PTR(1,1,NTR)*UX(I,J)
     1                     + PTR(2,1,NTR)*UY(I,J)
     2                     + PTR(3,1,NTR)*UZ(I,J)
                           TY(I,J) = TY(I,J) + PTR(1,2,NTR)*UX(I,J)
     1                     + PTR(2,2,NTR)*UY(I,J)
     2                     + PTR(3,2,NTR)*UZ(I,J)
                           TZ(I,J)=TZ(I,J)   + PTR(1,3,NTR)*UX(I,J)
     1                     + PTR(2,3,NTR)*UY(I,J)
     2                     + PTR(3,3,NTR)*UZ(I,J)
54                   CONTINUE
                     DO 50 I=MINI,MAXI
                        LCI=LOCI+I
CCC
                        JMAX=MAXJ
                        IF (IANDJ) JMAX=I
                        DO 50 J=MINJ,JMAX
                           LCJ=LOCJ+J
                           IF (LCI.GE.LCJ) GO TO 302
                           LCIJ=LCJ*(LCJ-1)/2 + LCI
                           GO TO 304
302                        LCIJ=LCI*(LCI-1)/2 + LCJ
304                        B(LCIJ,1,JAT,IBSET)=TX(I,J)/DUMT
                           B(LCIJ,2,JAT,IBSET)=TY(I,J)/DUMT
                           B(LCIJ,3,JAT,IBSET)=TZ(I,J)/DUMT
50                   CONTINUE
55                CONTINUE
310            CONTINUE
C
C     FOR EACH BLOCK(K,L) EQUIVALENT TO (I,J)
C     FIND THE TRANSFORMATION THAT MAPS (K,L) TO (I,J)
C     COMPUTE (R)T(R)
C     PUT THE RESULT BACK INTO THE (K,L) BLOCK OF THE H-MATRIX
C
               DO 480 ITR=1,NT
                  IF (ITR.EQ.1) GO TO 480
                  KK=MI(ITR)
                  LL=MJ(ITR)
                  IF (KK.GE.LL) GO TO 320
                  K=LL
                  L=KK
                  GO TO 340
320               K=KK
                  L=LL
340               IF (K.EQ.II.AND.L.EQ.JJ) GO TO 480
                  NTR=ITR+1
                  IF (NTR.GT.NT) GO TO 400
                  DO 380 IT=NTR,NT
                     I=MI(IT)
                     J=MJ(IT)
                     IF (I.GE.J) GO TO 360
                     IJ=I
                     I=J
                     J=IJ
360                  IF (I.EQ.K.AND.J.EQ.L) GO TO 480
380               CONTINUE
400               CONTINUE
                  NTR=INVT(ITR)
                  DO 470 IAT=1,NAT
                     DO 43 I=1,10
                        DO 43 J=1,10
                           TX(J,I)=0.0D+00
                           TY(J,I)=0.0D+00
                           TZ(J,I)=0.0D+00
43                   CONTINUE
                     DO 64 JTR=1,NT
64                   MIAT(JTR)=ICT(IAT,JTR)
                     NIAT=MIAT(NTR)
                     DO 80 K=MINI,MAXI
                        LCK=LOCI+K
                        IF (IANDJ) JMAX=K
                        DO 80 L=MINJ,JMAX
                           LCL=LOCJ+L
                           IF (LCK.GE.LCL) GO TO 410
                           LCKL=LCL*(LCL-1)/2 +LCK
                           GO TO 415
410                        LCKL=LCK*(LCK-1)/2+LCL
415                        VX(K,L)=B(LCKL,1,NIAT,IBSET)
                           VY(K,L)=B(LCKL,2,NIAT,IBSET)
                           VZ(K,L)=B(LCKL,3,NIAT,IBSET)
                           IF (.NOT.IANDJ) GO TO 80
                           VX(L,K)=B(LCKL,1,NIAT,IBSET)
                           VY(L,K)=B(LCKL,2,NIAT,IBSET)
                           VZ(L,K)=B(LCKL,3,NIAT,IBSET)
80                   CONTINUE
                     CALL RDFR(VX,MINI,MAXI,LIT,MINJ,MAXJ,LJT,NTR,PTR,
     *               DTR)
                     CALL RDFR(VY,MINI,MAXI,LIT,MINJ,MAXJ,LJT,NTR,PTR,
     *               DTR)
                     CALL RDFR(VZ,MINI,MAXI,LIT,MINJ,MAXJ,LJT,NTR,PTR,
     *               DTR)
                     DO 420I=MINI,MAXI
                        DO 420J=MINJ,MAXJ
                           TX(I,J)=TX(I,J) + PTR(1,1,NTR)*VX(I,J)
     1                     + PTR(2,1,NTR)*VY(I,J)
     2                     + PTR(3,1,NTR)*VZ(I,J)
                           TY(I,J) = TY(I,J) + PTR(1,2,NTR)*VX(I,J)
     1                     + PTR(2,2,NTR)*VY(I,J)
     2                     + PTR(3,2,NTR)*VZ(I,J)
                           TZ(I,J)=TZ(I,J)   + PTR(1,3,NTR)*VX(I,J)
     1                     + PTR(2,3,NTR)*VY(I,J)
     2                     + PTR(3,3,NTR)*VZ(I,J)
420                  CONTINUE
                     LOCK=KLOC(KK)-KMIN(KK)
                     LOCL=KLOC(LL)-KMIN(LL)
                     NIAT=IAT
                     DO 460 K=MINI,MAXI
                        LCK=LOCK+K
                        IF (IANDJ) JMAX=K
                        DO 460 L=MINJ,JMAX
                           LCL=LOCL+L
                           IF (LCK.GE.LCL) GO TO 440
                           LCKL=LCL*(LCL-1)/2 + LCK
                           GO TO 450
440                        LCKL=LCK*(LCK-1)/2 + LCL
450                        B(LCKL,1,NIAT,IBSET)=TX(K,L)
                           B(LCKL,2,NIAT,IBSET)=TY(K,L)
                           B(LCKL,3,NIAT,IBSET)=TZ(K,L)
460                  CONTINUE
470               CONTINUE
480            CONTINUE
500         CONTINUE
520      CONTINUE
 1000 CONTINUE
C
C     ----- I DONT UNDERSTAND A FACTOR OF TWO INTRODUCED HERE -----
C
C     CALL VEWS(B,B,0.5D+00,NNP*3*NAT*NBSET)
C
C
C
CTJL
C     DO 9998 ITJL = 1,28
C     TJL(ITJL) = B(ITJL,3,3,7)
C9998 CONTINUE
C     WRITE(*,*) ' THE SKBMAT ARRAY FOR PERT 9 '
C     CALL PRINT(TJL,28,7,6)
CTJL
      RETURN
      END
      SUBROUTINE SYMH(FTWO,ICT,PTR,INVT)
C
C
C
      IMPLICIT REAL*8 (A-H,O-Z)
C
C     EXTENDED DUMMY FTWO,ICT,PTR,INVT
C
      REAL*8 FTWO(NAT3,NAT3),PTR(3,3,NT)
      REAL*8 TH(3,3),WH(3,3),RH(3,3),WK(3,3)
      INTEGER INVT(NT),ICT(NAT,NT)
C
C     COMMON /CNTRL/  IPRINT,ONEDER,TWODER,CIONE,OPEN,CITWO
      COMMON /INFOA/  NAT,NUM,NNP,NSHELL,NIRRED,NT,NPRIM,MXT,NISO
      COMMON /OUTPUT/ NPRINT,ITOL,ICUT,NORMF,NORMP,NOPK
      COMMON /SECOND/ NAT3
C
C
C
C
      DATA ZERO,ONE /0.0D+00,1.0D+00/
CD    NPRINT=-1
C
C
C     ----- SUBROUTINE SYMEH FROM HONDO, M. DUPUIS AND TAKADA -----
C
      IF (NT.EQ.1) RETURN
C
C     ----- SYMMETRIZE FORCE-CONSTANT MATRIX -----
C
      DO 2501 IC=1,NAT
         DO 10 IT=1,NT
            ICNEW=ICT(IC,IT)
            IF (ICNEW.GT.IC) GO TO 2501
10       CONTINUE
         DO 2000 JC=1,IC
            DO 20   IT=1,NT
               ICNEW=MAX0(ICT(IC,IT),ICT(JC,IT))
               JCNEW=MIN0(ICT(IC,IT),ICT(JC,IT))
               IF (ICNEW.GT.IC) GO TO 2000
               IF (ICNEW.EQ.IC.AND.JCNEW.GT.JC) GO TO 2000
20          CONTINUE
            IJPR1=IC*(IC-1)/2 + JC
C
C     --SUMMATION OF ALL PARTIAL CONTRIBUTION TO--
C     --CORRECT MATRIX
C
            DO 39 I=1,3
               DO 39 J=1,3
39          WH(J,I)=ZERO
            DO 40 IT=1,NT
               ICNEW=MAX0(ICT(IC,IT),ICT(JC,IT))
               JCNEW=MIN0(ICT(IC,IT),ICT(JC,IT))
               IJPR2=ICNEW*(ICNEW-1)/2 + JCNEW
               IINDX=(ICNEW-1)*3
               JINDX=(JCNEW-1)*3
               IF (ICT(JC,IT).GT.ICT(IC,IT))GO TO 150
               N=0
               DO 41 I=1,3
                  DO 41 J=1,3
                     N=N+1
41             TH(J,I)=FTWO(IINDX+J,JINDX+I)
               GO TO 180
150            N=0
               DO 49 I=1,3
                  DO 49 J=1,3
                     N=N+1
49             TH(I,J)=FTWO(IINDX+J,JINDX+I)
180            CONTINUE
               DO 42 I=1,3
                  DO 42 J=1,3
42             RH(J,I)=PTR(J,I,IT)
               DO 45 I=1,3
                  DO 45 J=1,3
                     SUM=ZERO
                     DO 46 K=1,3
46                   SUM=SUM+TH(J,K)*RH(K,I)
45             WK(J,I)=SUM
               DO 47 I=1,3
                  DO 47 J=1,3
                     SUM=ZERO
                     DO 48 K=1,3
48                   SUM=SUM+RH(K,J)*WK(K,I)
47             WH(J,I)=WH(J,I)+SUM
40          CONTINUE
            N=0
            IINDX=(IC-1)*3
            JINDX=(JC-1)*3
            DO 53 I=1,3
               DO 53 J=1,3
                  N=N+1
53          FTWO(IINDX+J,JINDX+I)=WH(J,I)
C
C     ----- TRANSFER CORRECT BLOCK INTO EQUIVALENT BLOCKS -----
C
            DO 60 IT=1,NT
               ICNEW=MAX0(ICT(IC,IT),ICT(JC,IT))
               JCNEW=MIN0(ICT(IC,IT),ICT(JC,IT))
               IJPR2=ICNEW*(ICNEW-1)/2+JCNEW
               IF (IJPR2.EQ.IJPR1) GO TO 60
               IF (IT.EQ.NT) GO TO 200
               IT1=IT+1
               DO 61 JT=IT1,NT
                  ICSAM=MAX0(ICT(IC,JT),ICT(JC,JT))
                  JCSAM=MIN0(ICT(IC,JT),ICT(JC,JT))
                  IJPR3=ICSAM*(ICSAM-1)/2 + JCSAM
                  IF (IJPR3.EQ.IJPR2) GO TO 60
61             CONTINUE
200            CONTINUE
               N=INVT(IT)
               DO 62 I=1,3
                  DO 62 J=1,3
62             RH(J,I)=PTR(J,I,N)
               DO 65 I=1,3
                  DO 65 J=1,3
                     SUM=ZERO
                     DO 66 K=1,3
66                   SUM=SUM+WH(J,K)*RH(K,I)
65             WK(J,I)=SUM
               DO 67 I=1,3
                  DO 67 J=1,3
                     SUM=ZERO
                     DO 68 K=1,3
68                   SUM=SUM+RH(K,J)*WK(K,I)
67             TH(J,I)=SUM
               IINDX=(ICNEW-1)*3
               JINDX=(JCNEW-1)*3
               IF (ICT(JC,IT).GT.ICT(IC,IT)) GO TO 250
               N=0
               DO 63 I=1,3
                  DO 63 J=1,3
                     N=N+1
63             FTWO(IINDX+J,JINDX+I)=TH(J,I)
               GO TO 60
250            N=0
               DO 69 I=1,3
                  DO 69 J=1,3
                     N=N+1
69             FTWO(IINDX+J,JINDX+I)=TH(I,J)
60          CONTINUE
2000     CONTINUE
2501  CONTINUE
      DUM=ONE/FLOAT(NT)
      N=0
      ITSN=NAT*3
      DO 70 IC=1,ITSN
         DO 70 JC=1,ITSN
   70 FTWO(IC,JC)=FTWO(IC,JC)*DUM
      DO 71 I=1,3*NAT
         DO 71 J=1,I
   71 FTWO(J,I)=FTWO(I,J)
C
C
C
      RETURN
      END
      SUBROUTINE TWOONE(DHF,FHF,FONE,FOVL,DH,DS,C,ZAN,EX,CS,W,D2S,
     #katom,kstart,kng,ktype,kmin,kmax,kloc,ia,dt)
C
C
C
      IMPLICIT REAL*8 (A-H,O-Z)
C
C     EXTENDED DUMMY DHF,FHF,FONE,FOVL,DH,DS,C,ZAN,EX,CS,W,D2S
C
      REAL*8 FHF(NAT3,NAT3),FONE(NAT3,NAT3),DH(NNP,3,NAT),DS(NNP,3)
      REAL*8 C(3,NAT),ZAN(NAT),EX(NPRIM),CS(NPRIM),FOVL(NAT3,NAT3)
      REAL*8 DHF(3,NAT),W(NNP),D2S(NNP,6),dt(nnp)
      integer katom(nshell),kstart(nshell),kng(nshell),ktype(nshell)
      integer kmin(nshell),kmax(nshell),kloc(nshell),ia(nnp)
      LOGICAL DIAG,MAKD2E
      LOGICAL OPEN
      CHARACTER*5 CALTYP
      CHARACTER*6 SCFTYP
C
C     COMMON /DIMENS/ NATNNP,NATNNP3,NEED,NATRI
      COMMON /CNTRL/  IPRINT,NDERIV,INTOUT,INFOUT,OPEN,SCFTYP,CALTYP
      COMMON /TAPES/  IOUT,ICHECK,INPUT,ITAP42,ITAP49
      COMMON /OUTPUT/ NPRINT,ITOL,ICUT,NORMF,NORMP,NOPK
      COMMON /INDEX/  DENS(100),IJ,IJX(100),IJY(100),IJZ(100)
     #,               IPOINT(100)
      COMMON /ISHELL/  II,IATOM,XI,YI,ZI,IGMIN,IGMAX,LIT,MINI,MAXI,LOCI
      COMMON /JSHELL/  JJ,JATOM,XJ,YJ,ZJ,JGMIN,JGMAX,LJT,MINJ,MAXJ,LOCJ
     #,                RR
      COMMON /DSTVP/  T,X0,Y0,Z0,NI,NJ,CX,CY,CZ,D0DI,D0DJ,VX,VY,VZ,UU
     #,               D0DC,DVX,DVY,DVZ,DDVX,DDVY,DDVZ,WIVX,WIVY,WIVZ
     #,               WIWIVX,WIWIVY,WIWIVZ,WIWJVX,WIWJVY,WIWJVZ
     #,               WJWJVX,WJWJVY,WJWJVZ,WJVX,WJVY,WJVZ
     #,               WIXDVX,WIYDVY,WIZDVZ,WJXDVX,WJYDVY,WJZDVZ
     #,               DEXDXI,DEXDYI,DEXDZI,DEXDXJ,DEXDYJ,DEXDZJ
     #,               DEXDII,DEXDIJ,DEXDJJ,DEXDIC,DEXDJC
     #,               TAI,TAJ,TAA,ICATOM
      COMMON /INFOA/  NAT,NUM,NNP,NSHELL,NIRRED,NT,NPRIM,MXT,NISO
      COMMON /SECOND/ NAT3
      COMMON /ROOT/   XX,U(9),WT(9),NROOTS
C
      DIMENSION XIN(16),YIN(16),ZIN(16),DXC(16),DYC(16),DZC(16)
      DIMENSION WXI(16),WYI(16),WZI(16),WXJ(16),WYJ(16),WZJ(16)
      DIMENSION WXIWXI(16),WYIWYI(16),WZIWZI(16)
      DIMENSION WXIWXJ(16),WYIWYJ(16),WZIWZJ(16)
      DIMENSION WXJWXJ(16),WYJWYJ(16),WZJWZJ(16)
      DIMENSION WXIDXC(16),WYIDYC(16),WZIDZC(16)
      DIMENSION WXJDXC(16),WYJDYC(16),WZJDZC(16)
      DIMENSION  DXDXC(16), DYDYC(16), DZDZC(16)
C
      DATA PI212 /1.1283791670955D+0/
C
C
      MAKD2E=IAND(INFOUT,2).NE.0
C
C     ----- ZERO FORCE CONSTANT MATRICES AND DERIVATIVE INTEGRAL
C                                       STORAGE
C
      CALL ZERO(DHF,NAT3)
      CALL ZERO(FHF,NAT3**2)
      CALL ZERO(FONE,NAT3**2)
      CALL ZERO(FOVL,NAT3**2)
      CALL ZERO(DS,3*NNP)
      CALL ZERO(DH,3*NNP*NAT)
      IF (MAKD2E) CALL ZERO(D2S,NNP*6)
C
      ITOL=20
      TOL=ITOL*2.30258D+00
C
C     ----- I SHELL -----
C
      DO 5000 II=1,NSHELL
C
C     ----- J SHELL -----
C
         DO 5000 JJ=1,II
C
C     ----- PREPARE INDICES FOR PAIRS OF (I,J) FUNCTIONS -----
C
            CALL INDEXX(c,katom,kstart,kng,ktype,kmin,kmax,kloc,ia,dt)
            IPONT= (IATOM-1)*NNP
            JPONT= (JATOM-1)*NNP
C
            IAPT = (IATOM-1)*3+1
            JAPT = (JATOM-1)*3+1
            IAPTT= IAPT*(IAPT+1)/2
            JAPTT= JAPT*(JAPT+1)/2
            MAPT = MAX(IAPT,JAPT)
            NAPT = MIN(IAPT,JAPT)
            IJAPT= MAPT*(MAPT-1)/2+NAPT
C
            XIMXJ=XI-XJ
            YIMYJ=YI-YJ
            ZIMZJ=ZI-ZJ
C
C     ----- CALCULATE CORRECT NUMBER OF ROOTS TO USE FOR RYS QUAD. -----
C
            NROOTS=(LIT+LJT+NDERIV)/2
C
C     ----- ZERO TEMPORARY VARIABLES -----
C
            DVDXI=0.0D+00
            DVDYI=0.0D+00
            DVDZI=0.0D+00
            DVDXJ=0.0D+00
            DVDYJ=0.0D+00
            DVDZJ=0.0D+00
            DTDX  =0.0D+00
            DTDY  =0.0D+00
            DTDZ  =0.0D+00
            DSDX  =0.0D+00
            DSDY  =0.0D+00
            DSDZ  =0.0D+00
            DVXIXI=0.0D+00
            DVXIYI=0.0D+00
            DVXIZI=0.0D+00
            DVYIYI=0.0D+00
            DVYIZI=0.0D+00
            DVZIZI=0.0D+00
            DVXIXJ=0.0D+00
            DVXIYJ=0.0D+00
            DVXIZJ=0.0D+00
            DVYIXJ=0.0D+00
            DVYIYJ=0.0D+00
            DVYIZJ=0.0D+00
            DVZIXJ=0.0D+00
            DVZIYJ=0.0D+00
            DVZIZJ=0.0D+00
            DVXJXJ=0.0D+00
            DVXJYJ=0.0D+00
            DVXJZJ=0.0D+00
            DVYJYJ=0.0D+00
            DVYJZJ=0.0D+00
            DVZJZJ=0.0D+00
            DTDXDX=0.0D+00
            DTDXDY=0.0D+00
            DTDXDZ=0.0D+00
            DTDYDY=0.0D+00
            DTDYDZ=0.0D+00
            DTDZDZ=0.0D+00
            DSDXDX=0.0D+00
            DSDXDY=0.0D+00
            DSDXDZ=0.0D+00
            DSDYDY=0.0D+00
            DSDYDZ=0.0D+00
            DSDZDZ=0.0D+00
C
C     ----- I PRIMITIVE -----
C
            DO 3000 IG=IGMIN,IGMAX
               CI=CS(IG)
               AI=EX(IG)
               TAI=AI*2.0D+00
               ARRI=AI*RR
               AXI=AI*XI
               AYI=AI*YI
               AZI=AI*ZI
C
C     ----- J PRIMITIVE -----
C
               IF (II.EQ.JJ) JGMAX=IG
               DO 3000 JG=JGMIN,JGMAX
                  AJ=EX(JG)
                  TAJ=AJ*2.0D+00
                  AA=AI+AJ
                  TAA=TAI+TAJ
                  RHO2=AI*AJ*2.0D+00/AA
                  TEMP=AJ*ARRI/AA
C
C     ----- IGNORE INTEGRAL IF PRE-EXPONENTIAL TOO SMALL -----
C
                  IF (TEMP.LE.TOL) THEN
C
C     ----- DENSITY FACTOR -----
C
                     DIJ=CI*CS(JG)*EXP(-TEMP)
                     IF (II.EQ.JJ.AND.IG.NE.JG) DIJ=DIJ*2.0D+00
                     DIJPI=DIJ*PI212/AA
                     DIJ=-DIJ
C
                     AAX=AXI+AJ*XJ
                     AAY=AYI+AJ*YJ
                     AAZ=AZI+AJ*ZJ
                     AX=AAX/AA
                     AY=AAY/AA
                     AZ=AAZ/AA
C
C     ----- CALCULATE DERIVATIVE CONTRIBUTIONS FROM -----
C                KINETIC AND OVERLAP INTEGRALS
C
                     IF (IATOM.NE.JATOM) THEN
                        X0=AX
                        Y0=AY
                        Z0=AZ
                        T=DSQRT(AA)
                        ST=1.0/T
                        IN=-4
                        DO 1010 NI=1,LIT
                           IN=IN+4
                           DO 1010 NJ=1,LJT
                              JN=IN+NJ
                              CALL TDER2
                              XIN(JN)=VX             * ST
                              YIN(JN)=VY             * ST
                              ZIN(JN)=VZ*DIJ         * ST
                              WXI(JN)=WIVX           * ST
                              WYI(JN)=WIVY           * ST
                              WZI(JN)=WIVZ*DIJ       * ST
                              DXC(JN)=DVX            * ST
                              DYC(JN)=DVY            * ST
                              DZC(JN)=DVZ*DIJ        * ST
                              WXIDXC(JN)=WIXDVX      * ST
                              WYIDYC(JN)=WIYDVY      * ST
                              WZIDZC(JN)=WIZDVZ*DIJ  * ST
                              WXIWXI(JN)=WIWIVX      * ST
                              WYIWYI(JN)=WIWIVY      * ST
                              WZIWZI(JN)=WIWIVZ*DIJ  * ST
                              DXDXC(JN)=DDVX         * ST
                              DYDYC(JN)=DDVY         * ST
                              DZDZC(JN)=DDVZ*DIJ     * ST
 1010                   CONTINUE
C
C     ----- COMBINE TWO-DIMENSIONAL INTEGRALS TO FORM INTEGRALS -----
C
                        DO 1050 I=1,IJ
                           NX=IJX(I)
                           NY=IJY(I)
                           NZ=IJZ(I)
                           D=DENS(I)*0.5
                           X = XIN(NX)
                           Y = YIN(NY)
                           Z = ZIN(NZ)
                           XY = X*Y
                           XZ = X*Z
                           YZ = Y*Z
                           DX = DXC(NX)
                           DY = DYC(NY)
                           DZ = DZC(NZ)
                           WX = WXI(NX)
                           WY = WYI(NY)
                           WZ = WZI(NZ)
                           WDX = WXIDXC(NX)
                           WDY = WYIDYC(NY)
                           WDZ = WZIDZC(NZ)
                           IP=IPOINT(I)
                           WDENS=-W(IP) * 2.0D+00
                           DS(IP,1)=DS(IP,1)-WX*YZ
                           DS(IP,2)=DS(IP,2)-WY*XZ
                           DS(IP,3)=DS(IP,3)-WZ*XY
                           XTEMPT = (WDX*YZ + WX * (DY*Z + Y*DZ)) * 0.5D
     *                     +00
                           YTEMPT = (WDY*XZ + WY * (DX*Z + X*DZ)) * 0.5D
     *                     +00
                           ZTEMPT = (WDZ*XY + WZ * (DX*Y + X*DY)) * 0.5D
     *                     +00
                           DH(IP,1,IATOM)=DH(IP,1,IATOM)+XTEMPT
                           DH(IP,1,JATOM)=DH(IP,1,JATOM)-XTEMPT
                           DH(IP,2,IATOM)=DH(IP,2,IATOM)+YTEMPT
                           DH(IP,2,JATOM)=DH(IP,2,JATOM)-YTEMPT
                           DH(IP,3,IATOM)=DH(IP,3,IATOM)+ZTEMPT
                           DH(IP,3,JATOM)=DH(IP,3,JATOM)-ZTEMPT
                           SSDXDX= WXIWXI(NX)*YZ
                           SSDXDY= WX*WY*Z
                           SSDXDZ= WX*WZ*Y
                           SSDYDY= WYIWYI(NY)*XZ
                           SSDYDZ= WY*WZ*X
                           SSDZDZ= WZIWZI(NZ)*XY
                           TTDXDX = DXDXC(NX)*YZ + WXIWXI(NX) * (DY*Z +
     *                     Y*DZ)
                           TTDXDY = (WDX*WY + WX*WDY) * Z + WX*WY*DZ
                           TTDXDZ = (WDX*WZ + WX*WDZ) * Y + WX*WZ*DY
                           TTDYDY = DYDYC(NY)*XZ + WYIWYI(NY) * (DX*Z +
     *                     X*DZ)
                           TTDYDZ = (WDY*WZ + WY*WDZ) * X + WY*WZ*DX
                           TTDZDZ = DZDZC(NZ)*XY + WZIWZI(NZ) * (DX*Y +
     *                     X*DY)
                           DSDXDX=DSDXDX + SSDXDX*WDENS
                           DSDXDY=DSDXDY + SSDXDY*WDENS
                           DSDXDZ=DSDXDZ + SSDXDZ*WDENS
                           DSDYDY=DSDYDY + SSDYDY*WDENS
                           DSDYDZ=DSDYDZ + SSDYDZ*WDENS
                           DSDZDZ=DSDZDZ + SSDZDZ*WDENS
                           DTDXDX = DTDXDX + TTDXDX * D
                           DTDXDY = DTDXDY + TTDXDY * D
                           DTDXDZ = DTDXDZ + TTDXDZ * D
                           DTDYDY = DTDYDY + TTDYDY * D
                           DTDYDZ = DTDYDZ + TTDYDZ * D
                           DTDZDZ = DTDZDZ + TTDZDZ * D
C
                           IF (MAKD2E) THEN
                              D2S(IP,1)=D2S(IP,1)-SSDXDX
                              D2S(IP,2)=D2S(IP,2)-SSDXDY
                              D2S(IP,3)=D2S(IP,3)-SSDXDZ
                              D2S(IP,4)=D2S(IP,4)-SSDYDY
                              D2S(IP,5)=D2S(IP,5)-SSDYDZ
                              D2S(IP,6)=D2S(IP,6)-SSDZDZ
                           END IF
C
CC
C     ICOUNT=IAPTT
C     JCOUNT=JAPTT
C     BB1(IP,ICOUNT) = BB1(IP,ICOUNT) + TTDXDX*0.5
C     BB1(IP,JCOUNT) = BB1(IP,JCOUNT) + TTDXDX*0.5
C     ICOUNT=ICOUNT+IAPT
C     JCOUNT=JCOUNT+JAPT
C     BB1(IP,ICOUNT) = BB1(IP,ICOUNT) + TTDXDY*0.5
C     BB1(IP,JCOUNT) = BB1(IP,JCOUNT) + TTDXDY*0.5
C     ICOUNT=ICOUNT+1
C     JCOUNT=JCOUNT+1
C     BB1(IP,ICOUNT) = BB1(IP,ICOUNT) + TTDYDY*0.5
C     BB1(IP,JCOUNT) = BB1(IP,JCOUNT) + TTDYDY*0.5
C     ICOUNT=ICOUNT+IAPT
C     JCOUNT=JCOUNT+JAPT
C     BB1(IP,ICOUNT) = BB1(IP,ICOUNT) + TTDXDZ*0.5
C     BB1(IP,JCOUNT) = BB1(IP,JCOUNT) + TTDXDZ*0.5
C     ICOUNT=ICOUNT+1
C     JCOUNT=JCOUNT+1
C     BB1(IP,ICOUNT) = BB1(IP,ICOUNT) + TTDYDZ*0.5
C     BB1(IP,JCOUNT) = BB1(IP,JCOUNT) + TTDYDZ*0.5
C     ICOUNT=ICOUNT+1
C     JCOUNT=JCOUNT+1
C     BB1(IP,ICOUNT) = BB1(IP,ICOUNT) + TTDZDZ*0.5
C     BB1(IP,JCOUNT) = BB1(IP,JCOUNT) + TTDZDZ*0.5
C     ICOUNT=IJAPT
C     BB1(IP,ICOUNT)   = BB1(IP,ICOUNT)   -TTDXDX*0.5
C     BB1(IP,ICOUNT+1) = BB1(IP,ICOUNT+1) -TTDXDY*0.5
C     BB1(IP,ICOUNT+2) = BB1(IP,ICOUNT+2) -TTDXDZ*0.5
C     ICOUNT=ICOUNT+MAPT
C     BB1(IP,ICOUNT)   = BB1(IP,ICOUNT)   -TTDXDY*0.5
C     BB1(IP,ICOUNT+1) = BB1(IP,ICOUNT+1) -TTDYDY*0.5
C     BB1(IP,ICOUNT+2) = BB1(IP,ICOUNT+2) -TTDYDZ*0.5
C     ICOUNT=ICOUNT+MAPT+1
C     BB1(IP,ICOUNT)   = BB1(IP,ICOUNT)   -TTDXDZ*0.5
C     BB1(IP,ICOUNT+1) = BB1(IP,ICOUNT+1) -TTDYDZ*0.5
C     BB1(IP,ICOUNT+2) = BB1(IP,ICOUNT+2) -TTDZDZ*0.5
C     END IF
C
C     END IF
 1050                   CONTINUE
                     END IF
C
C     ----- LOOP OVER ATOMS IN POTENTIAL TERM -----
C
                     DO 2000 IC=1,NAT
                        ICATOM=IC
C
                        KAPT = (ICATOM-1)*3+1
                        KAPTT= KAPT*(KAPT+1)/2
                        MMAPT=MAX(IAPT,KAPT)
                        NNAPT=MIN(IAPT,KAPT)
                        IKAPT=MMAPT*(MMAPT-1)/2+NNAPT
                        MMAPT=MAX(JAPT,KAPT)
                        NNAPT=MIN(JAPT,KAPT)
                        JKAPT=MMAPT*(MMAPT-1)/2+NNAPT
C
                        ZNUC=-ZAN(IC)*DIJPI
                        CX=C(1,IC)
                        CY=C(2,IC)
                        CZ=C(3,IC)
                        XX=AA*((AX-CX)**2+(AY-CY)**2+(AZ-CZ)**2)
                        IF (NROOTS.LE.3) THEN
                           CALL RT123
                        ELSE IF (NROOTS.EQ.4) THEN
                           CALL ROOT4
                        ELSE IF (NROOTS.EQ.5) THEN
                           CALL ROOT5
                        ELSE
                           STOP 'NOT ENOUGH ROOTS IN VDERIV'
                        END IF
                        HFDX=0.0
                        HFDY=0.0
                        HFDZ=0.0
                        HFDXX=0.0
                        HFDXY=0.0
                        HFDXZ=0.0
                        HFDYY=0.0
                        HFDYZ=0.0
                        HFDZZ=0.0
                        DVXIXC=0.0
                        DVXIYC=0.0
                        DVXIZC=0.0
                        DVYIXC=0.0
                        DVYIYC=0.0
                        DVYIZC=0.0
                        DVZIXC=0.0
                        DVZIYC=0.0
                        DVZIZC=0.0
                        DVXJXC=0.0
                        DVXJYC=0.0
                        DVXJZC=0.0
                        DVYJXC=0.0
                        DVYJYC=0.0
                        DVYJZC=0.0
                        DVZJXC=0.0
                        DVZJYC=0.0
                        DVZJZC=0.0
                        DO 1500 IROOT=1,NROOTS
                           UU=AA*U(IROOT)
                           WW=WT(IROOT)*ZNUC
                           TT=AA+UU
                           T=DSQRT(TT)
                           X0=(AAX+UU*CX)/TT
                           Y0=(AAY+UU*CY)/TT
                           Z0=(AAZ+UU*CZ)/TT
C
C     ----- CALCULATE TWO-DIMENSIONAL INTEGRALS -----
C
                           IN=-4
                           DO 1100 NI=1,LIT
                              IN=IN+4
                              DO 1100 NJ=1,LJT
                                 JN=IN+NJ
                                 CALL VDER2
                                 XIN(JN)=VX
                                 YIN(JN)=VY
                                 ZIN(JN)=VZ*WW
                                 DXC(JN)=DVX
                                 DYC(JN)=DVY
                                 DZC(JN)=DVZ*WW
                                 WXI(JN)=WIVX
                                 WYI(JN)=WIVY
                                 WZI(JN)=WIVZ*WW
                                 WXJ(JN)=WJVX
                                 WYJ(JN)=WJVY
                                 WZJ(JN)=WJVZ*WW
                                 WXIWXI(JN)=WIWIVX
                                 WYIWYI(JN)=WIWIVY
                                 WZIWZI(JN)=WIWIVZ*WW
                                 WXIWXJ(JN)=WIWJVX
                                 WYIWYJ(JN)=WIWJVY
                                 WZIWZJ(JN)=WIWJVZ*WW
                                 WXJWXJ(JN)=WJWJVX
                                 WYJWYJ(JN)=WJWJVY
                                 WZJWZJ(JN)=WJWJVZ*WW
                                 WXIDXC(JN)=WIXDVX
                                 WYIDYC(JN)=WIYDVY
                                 WZIDZC(JN)=WIZDVZ*WW
                                 WXJDXC(JN)=WJXDVX
                                 WYJDYC(JN)=WJYDVY
                                 WZJDZC(JN)=WJZDVZ*WW
                                 DXDXC(JN)=DDVX
                                 DYDYC(JN)=DDVY
                                 DZDZC(JN)=DDVZ*WW
 1100                      CONTINUE
C
C     ----- COMBINE TWO-DIMENSIONAL INTEGRALS TO FORM INTEGRALS -----
C
                           ICPONT = (IC-1)*NNP
                           IDIAG=2
                           DO 1200 I=1,IJ
                              NX=IJX(I)
                              NY=IJY(I)
                              NZ=IJZ(I)
                              DENSTY=DENS(I)
                              IP=IPOINT(I)
                              X = XIN(NX)
                              Y = YIN(NY)
                              Z = ZIN(NZ)
                              XY = X*Y
                              XZ = X*Z
                              YZ = Y*Z
                              XTEMP1 = DXC(NX)*YZ
                              YTEMP1 = DYC(NY)*XZ
                              ZTEMP1 = DZC(NZ)*XY
                              HFDX  = HFDX + XTEMP1*DENSTY
                              HFDY  = HFDY + YTEMP1*DENSTY
                              HFDZ  = HFDZ + ZTEMP1*DENSTY
                              DH(IP,1,IC)=DH(IP,1,IC)+XTEMP1
                              DH(IP,2,IC)=DH(IP,2,IC)+YTEMP1
                              DH(IP,3,IC)=DH(IP,3,IC)+ZTEMP1
                              DH(IP,1,IATOM) = DH(IP,1,IATOM) + WXI(NX)*
     *                        YZ
                              DH(IP,2,IATOM) = DH(IP,2,IATOM) + WYI(NY)*
     *                        XZ
                              DH(IP,3,IATOM) = DH(IP,3,IATOM) + WZI(NZ)*
     *                        XY
                              DH(IP,1,JATOM) = DH(IP,1,JATOM) + WXJ(NX)*
     *                        YZ
                              DH(IP,2,JATOM) = DH(IP,2,JATOM) + WYJ(NY)*
     *                        XZ
                              DH(IP,3,JATOM) = DH(IP,3,JATOM) + WZJ(NZ)*
     *                        XY
                              VHFDXX = DXDXC(NX)*YZ
                              VHFDXY = DXC(NX)*DYC(NY)*Z
                              VHFDXZ = DXC(NX)*Y*DZC(NZ)
                              VHFDYY = DYDYC(NY)*XZ
                              VHFDYZ = X*DYC(NY)*DZC(NZ)
                              VHFDZZ = XY*DZDZC(NZ)
                              VVXIXC= WXIDXC(NX)*YZ
                              VVXIYC= WXI(NX)*DYC(NY)*Z
                              VVXIZC= WXI(NX)*Y*DZC(NZ)
                              VVYIXC= DXC(NX)*WYI(NY)*Z
                              VVYIYC= WYIDYC(NY)*XZ
                              VVYIZC= X*WYI(NY)*DZC(NZ)
                              VVZIXC= DXC(NX)*Y*WZI(NZ)
                              VVZIYC= X*DYC(NY)*WZI(NZ)
                              VVZIZC= XY*WZIDZC(NZ)
                              VVXJXC= WXJDXC(NX)*YZ
                              VVXJYC= WXJ(NX)*DYC(NY)*Z
                              VVXJZC= WXJ(NX)*Y*DZC(NZ)
                              VVYJXC= DXC(NX)*WYJ(NY)*Z
                              VVYJYC= WYJDYC(NY)*XZ
                              VVYJZC= X*WYJ(NY)*DZC(NZ)
                              VVZJXC= DXC(NX)*Y*WZJ(NZ)
                              VVZJYC= X*DYC(NY)*WZJ(NZ)
                              VVZJZC= XY*WZJDZC(NZ)
                              VVXIXI= WXIWXI(NX)*YZ
                              VVXIYI= WXI(NX)*WYI(NY)*Z
                              VVXIZI= WXI(NX)*Y*WZI(NZ)
                              VVYIYI= WYIWYI(NY)*XZ
                              VVYIZI= X*WYI(NY)*WZI(NZ)
                              VVZIZI= XY*WZIWZI(NZ)
                              VVXIXJ= WXIWXJ(NX)*YZ
                              VVXIYJ= WXI(NX)*WYJ(NY)*Z
                              VVXIZJ= WXI(NX)*Y*WZJ(NZ)
                              VVYIXJ= WXJ(NX)*WYI(NY)*Z
                              VVYIYJ= WYIWYJ(NY)*XZ
                              VVYIZJ= X*WYI(NY)*WZJ(NZ)
                              VVZIXJ= WXJ(NX)*Y*WZI(NZ)
                              VVZIYJ= X*WYJ(NY)*WZI(NZ)
                              VVZIZJ= XY*WZIWZJ(NZ)
                              VVXJXJ= WXJWXJ(NX)*YZ
                              VVXJYJ= WXJ(NX)*WYJ(NY)*Z
                              VVXJZJ= WXJ(NX)*Y*WZJ(NZ)
                              VVYJYJ= WYJWYJ(NY)*XZ
                              VVYJZJ= X*WYJ(NY)*WZJ(NZ)
                              VVZJZJ= XY*WZJWZJ(NZ)
                              HFDXX = HFDXX + VHFDXX             *
     *                        DENSTY
                              HFDXY = HFDXY + VHFDXY             *
     *                        DENSTY
                              HFDXZ = HFDXZ + VHFDXZ             *
     *                        DENSTY
                              HFDYY = HFDYY + VHFDYY             *
     *                        DENSTY
                              HFDYZ = HFDYZ + VHFDYZ             *
     *                        DENSTY
                              HFDZZ = HFDZZ + VHFDZZ             *
     *                        DENSTY
                              DVXIXC=DVXIXC + VVXIXC            * DENSTY
                              DVXIYC=DVXIYC + VVXIYC            * DENSTY
                              DVXIZC=DVXIZC + VVXIZC            * DENSTY
                              DVYIXC=DVYIXC + VVYIXC            * DENSTY
                              DVYIYC=DVYIYC + VVYIYC            * DENSTY
                              DVYIZC=DVYIZC + VVYIZC            * DENSTY
                              DVZIXC=DVZIXC + VVZIXC            * DENSTY
                              DVZIYC=DVZIYC + VVZIYC            * DENSTY
                              DVZIZC=DVZIZC + VVZIZC            * DENSTY
                              DVXJXC=DVXJXC + VVXJXC            * DENSTY
                              DVXJYC=DVXJYC + VVXJYC            * DENSTY
                              DVXJZC=DVXJZC + VVXJZC            * DENSTY
                              DVYJXC=DVYJXC + VVYJXC            * DENSTY
                              DVYJYC=DVYJYC + VVYJYC            * DENSTY
                              DVYJZC=DVYJZC + VVYJZC            * DENSTY
                              DVZJXC=DVZJXC + VVZJXC            * DENSTY
                              DVZJYC=DVZJYC + VVZJYC            * DENSTY
                              DVZJZC=DVZJZC + VVZJZC            * DENSTY
                              DVXIXI=DVXIXI + VVXIXI            * DENSTY
                              DVXIYI=DVXIYI + VVXIYI            * DENSTY
                              DVXIZI=DVXIZI + VVXIZI            * DENSTY
                              DVYIYI=DVYIYI + VVYIYI            * DENSTY
                              DVYIZI=DVYIZI + VVYIZI            * DENSTY
                              DVZIZI=DVZIZI + VVZIZI            * DENSTY
                              DVXIXJ=DVXIXJ + VVXIXJ            * DENSTY
                              DVXIYJ=DVXIYJ + VVXIYJ            * DENSTY
                              DVXIZJ=DVXIZJ + VVXIZJ            * DENSTY
                              DVYIXJ=DVYIXJ + VVYIXJ            * DENSTY
                              DVYIYJ=DVYIYJ + VVYIYJ            * DENSTY
                              DVYIZJ=DVYIZJ + VVYIZJ            * DENSTY
                              DVZIXJ=DVZIXJ + VVZIXJ            * DENSTY
                              DVZIYJ=DVZIYJ + VVZIYJ            * DENSTY
                              DVZIZJ=DVZIZJ + VVZIZJ            * DENSTY
                              DVXJXJ=DVXJXJ + VVXJXJ            * DENSTY
                              DVXJYJ=DVXJYJ + VVXJYJ            * DENSTY
                              DVXJZJ=DVXJZJ + VVXJZJ            * DENSTY
                              DVYJYJ=DVYJYJ + VVYJYJ            * DENSTY
                              DVYJZJ=DVYJZJ + VVYJZJ            * DENSTY
                              DVZJZJ=DVZJZJ + VVZJZJ            * DENSTY
C
C     IF (.NOT.CITWO) GO TO 200
CC
C     IP = IPOINT(I)
C     ICOUNT = KAPTT
C     BB1(IP,ICOUNT) = BB1(IP,ICOUNT) + VHFDXX
C     ICOUNT = ICOUNT + KAPT
C     BB1(IP,ICOUNT) = BB1(IP,ICOUNT) + VHFDXY
C     ICOUNT = ICOUNT + 1
C     BB1(IP,ICOUNT) = BB1(IP,ICOUNT) + VHFDYY
C     ICOUNT = ICOUNT + KAPT
C     BB1(IP,ICOUNT) = BB1(IP,ICOUNT) + VHFDXZ
C     ICOUNT = ICOUNT + 1
C     BB1(IP,ICOUNT) = BB1(IP,ICOUNT) + VHFDYZ
C     ICOUNT = ICOUNT + 1
C     BB1(IP,ICOUNT) = BB1(IP,ICOUNT) + VHFDZZ
CC
C     IF (KAPT-IAPT) 110,120,130
CC
CC       WHEN IATOM > ICATOM
CC
C 110 ICOUNT = IKAPT
C     BB1(IP,ICOUNT  ) = BB1(IP,ICOUNT  ) + VVXIXC
C     BB1(IP,ICOUNT+1) = BB1(IP,ICOUNT+1) + VVXIYC
C     BB1(IP,ICOUNT+2) = BB1(IP,ICOUNT+2) + VVXIZC
C     ICOUNT = ICOUNT + IAPT
C     BB1(IP,ICOUNT  ) = BB1(IP,ICOUNT  ) + VVYIXC
C     BB1(IP,ICOUNT+1) = BB1(IP,ICOUNT+1) + VVYIYC
C     BB1(IP,ICOUNT+2) = BB1(IP,ICOUNT+2) + VVYIZC
C     ICOUNT = ICOUNT + IAPT + 1
C     BB1(IP,ICOUNT  ) = BB1(IP,ICOUNT  ) + VVZIXC
C     BB1(IP,ICOUNT+1) = BB1(IP,ICOUNT+1) + VVZIYC
C     BB1(IP,ICOUNT+2) = BB1(IP,ICOUNT+2) + VVZIZC
C     GO TO 135
CC
CC       WHEN IATOM = ICATOM
CC
C 120 ICOUNT = IKAPT
C     BB1(IP,ICOUNT) = BB1(IP,ICOUNT) + VVXIXC
C     ICOUNT = ICOUNT + IAPT
C     BB1(IP,ICOUNT) = BB1(IP,ICOUNT) + VVYIXC + VVXIYC
C     ICOUNT = ICOUNT + 1
C     BB1(IP,ICOUNT) = BB1(IP,ICOUNT) + VVYIYC
C     ICOUNT = ICOUNT + IAPT
C     BB1(IP,ICOUNT) = BB1(IP,ICOUNT) + VVZIXC + VVXIZC
C     ICOUNT = ICOUNT + 1
C     BB1(IP,ICOUNT) = BB1(IP,ICOUNT) + VVZIYC + VVYIZC
C     ICOUNT = ICOUNT + 1
C     BB1(IP,ICOUNT) = BB1(IP,ICOUNT) + VVZIZC
C     GO TO 135
CC
CC       WHEN IATOM < ICATOM
CC
C 130 ICOUNT = IKAPT
C     BB1(IP,ICOUNT  ) = BB1(IP,ICOUNT  ) + VVXIXC
C     BB1(IP,ICOUNT+1) = BB1(IP,ICOUNT+1) + VVYIXC
C     BB1(IP,ICOUNT+2) = BB1(IP,ICOUNT+2) + VVZIXC
C     ICOUNT = ICOUNT + KAPT
C     BB1(IP,ICOUNT  ) = BB1(IP,ICOUNT  ) + VVXIYC
C     BB1(IP,ICOUNT+1) = BB1(IP,ICOUNT+1) + VVYIYC
C     BB1(IP,ICOUNT+2) = BB1(IP,ICOUNT+2) + VVZIYC
C     ICOUNT = ICOUNT + KAPT + 1
C     BB1(IP,ICOUNT  ) = BB1(IP,ICOUNT  ) + VVXIZC
C     BB1(IP,ICOUNT+1) = BB1(IP,ICOUNT+1) + VVYIZC
C     BB1(IP,ICOUNT+2) = BB1(IP,ICOUNT+2) + VVZIZC
CC
C 135 IF (KAPT-JAPT) 140,150,160
CC
CC       WHEN JATOM > ICATOM
CC
C 140 ICOUNT = JKAPT
C     BB1(IP,ICOUNT  ) = BB1(IP,ICOUNT  ) + VVXJXC
C     BB1(IP,ICOUNT+1) = BB1(IP,ICOUNT+1) + VVXJYC
C     BB1(IP,ICOUNT+2) = BB1(IP,ICOUNT+2) + VVXJZC
C     ICOUNT = ICOUNT + JAPT
C     BB1(IP,ICOUNT  ) = BB1(IP,ICOUNT  ) + VVYJXC
C     BB1(IP,ICOUNT+1) = BB1(IP,ICOUNT+1) + VVYJYC
C     BB1(IP,ICOUNT+2) = BB1(IP,ICOUNT+2) + VVYJZC
C     ICOUNT = ICOUNT + JAPT + 1
C     BB1(IP,ICOUNT  ) = BB1(IP,ICOUNT  ) + VVZJXC
C     BB1(IP,ICOUNT+1) = BB1(IP,ICOUNT+1) + VVZJYC
C     BB1(IP,ICOUNT+2) = BB1(IP,ICOUNT+2) + VVZJZC
C     GO TO 165
CC
CC       WHEN JATOM = ICATOM
CC
C 150 ICOUNT = JKAPT
C     BB1(IP,ICOUNT) = BB1(IP,ICOUNT) + VVXJXC
C     ICOUNT = ICOUNT + JAPT
C     BB1(IP,ICOUNT) = BB1(IP,ICOUNT) + VVYJXC + VVXJYC
C     ICOUNT = ICOUNT + 1
C     BB1(IP,ICOUNT) = BB1(IP,ICOUNT) + VVYJYC
C     ICOUNT = ICOUNT + JAPT
C     BB1(IP,ICOUNT) = BB1(IP,ICOUNT) + VVZJXC + VVXJZC
C     ICOUNT = ICOUNT + 1
C     BB1(IP,ICOUNT) = BB1(IP,ICOUNT) + VVZJYC + VVYJZC
C     ICOUNT = ICOUNT + 1
C     BB1(IP,ICOUNT) = BB1(IP,ICOUNT) + VVZJZC
C     GO TO 165
CC
CC       WHEN JATOM < ICATOM
CC
C 160 ICOUNT = JKAPT
C     BB1(IP,ICOUNT  ) = BB1(IP,ICOUNT  ) + VVXJXC
C     BB1(IP,ICOUNT+1) = BB1(IP,ICOUNT+1) + VVYJXC
C     BB1(IP,ICOUNT+2) = BB1(IP,ICOUNT+2) + VVZJXC
C     ICOUNT = ICOUNT + KAPT
C     BB1(IP,ICOUNT  ) = BB1(IP,ICOUNT  ) + VVXJYC
C     BB1(IP,ICOUNT+1) = BB1(IP,ICOUNT+1) + VVYJYC
C     BB1(IP,ICOUNT+2) = BB1(IP,ICOUNT+2) + VVZJYC
C     ICOUNT = ICOUNT + KAPT + 1
C     BB1(IP,ICOUNT  ) = BB1(IP,ICOUNT  ) + VVXJZC
C     BB1(IP,ICOUNT+1) = BB1(IP,ICOUNT+1) + VVYJZC
C     BB1(IP,ICOUNT+2) = BB1(IP,ICOUNT+2) + VVZJZC
CC
CC      (IATOM,IATOM) & (JATOM,JATOM) PAIRS
CC
C 165 ICOUNT = IAPTT
C     JCOUNT = JAPTT
C     BB1(IP,ICOUNT) = BB1(IP,ICOUNT) + VVXIXI
C     BB1(IP,JCOUNT) = BB1(IP,JCOUNT) + VVXJXJ
C     ICOUNT = ICOUNT + IAPT
C     JCOUNT = JCOUNT + JAPT
C     BB1(IP,ICOUNT) = BB1(IP,ICOUNT) + VVXIYI
C     BB1(IP,JCOUNT) = BB1(IP,JCOUNT) + VVXJYJ
C     ICOUNT = ICOUNT + 1
C     JCOUNT = JCOUNT + 1
C     BB1(IP,ICOUNT) = BB1(IP,ICOUNT) + VVYIYI
C     BB1(IP,JCOUNT) = BB1(IP,JCOUNT) + VVYJYJ
C     ICOUNT = ICOUNT + IAPT
C     JCOUNT = JCOUNT + JAPT
C     BB1(IP,ICOUNT) = BB1(IP,ICOUNT) + VVXIZI
C     BB1(IP,JCOUNT) = BB1(IP,JCOUNT) + VVXJZJ
C     ICOUNT = ICOUNT + 1
C     JCOUNT = JCOUNT + 1
C     BB1(IP,ICOUNT) = BB1(IP,ICOUNT) + VVYIZI
C     BB1(IP,JCOUNT) = BB1(IP,JCOUNT) + VVYJZJ
C     ICOUNT = ICOUNT + 1
C     JCOUNT = JCOUNT + 1
C     BB1(IP,ICOUNT) = BB1(IP,ICOUNT) + VVZIZI
C     BB1(IP,JCOUNT) = BB1(IP,JCOUNT) + VVZJZJ
CC
C     IF (IATOM-JATOM) 180,190,170
CC
C 170 ICOUNT = IJAPT
C     BB1(IP,ICOUNT  ) = BB1(IP,ICOUNT  ) + VVXIXJ
C     BB1(IP,ICOUNT+1) = BB1(IP,ICOUNT+1) + VVXIYJ
C     BB1(IP,ICOUNT+2) = BB1(IP,ICOUNT+2) + VVXIZJ
C     ICOUNT = ICOUNT + IAPT
C     BB1(IP,ICOUNT  ) = BB1(IP,ICOUNT  ) + VVYIXJ
C     BB1(IP,ICOUNT+1) = BB1(IP,ICOUNT+1) + VVYIYJ
C     BB1(IP,ICOUNT+2) = BB1(IP,ICOUNT+2) + VVYIZJ
C     ICOUNT = ICOUNT + IAPT + 1
C     BB1(IP,ICOUNT  ) = BB1(IP,ICOUNT  ) + VVZIXJ
C     BB1(IP,ICOUNT+1) = BB1(IP,ICOUNT+1) + VVZIYJ
C     BB1(IP,ICOUNT+2) = BB1(IP,ICOUNT+2) + VVZIZJ
C     GO TO 200
C 180 ICOUNT = IJAPT
C     BB1(IP,ICOUNT  ) = BB1(IP,ICOUNT  ) + VVXIXJ
C     BB1(IP,ICOUNT+1) = BB1(IP,ICOUNT+1) + VVYIXJ
C     BB1(IP,ICOUNT+2) = BB1(IP,ICOUNT+2) + VVZIXJ
C     ICOUNT = ICOUNT + JAPT
C     BB1(IP,ICOUNT  ) = BB1(IP,ICOUNT  ) + VVXIYJ
C     BB1(IP,ICOUNT+1) = BB1(IP,ICOUNT+1) + VVYIYJ
C     BB1(IP,ICOUNT+2) = BB1(IP,ICOUNT+2) + VVZIYJ
C     ICOUNT = ICOUNT + JAPT + 1
C     BB1(IP,ICOUNT  ) = BB1(IP,ICOUNT  ) + VVXIZJ
C     BB1(IP,ICOUNT+1) = BB1(IP,ICOUNT+1) + VVYIZJ
C     BB1(IP,ICOUNT+2) = BB1(IP,ICOUNT+2) + VVZIZJ
C     GO TO 200
CC                     WHEN IATOM = JATOM
C 190 ICOUNT = IJAPT
C     BB1(IP,ICOUNT  ) = BB1(IP,ICOUNT  ) + VVXIXJ
C     ICOUNT = ICOUNT + IAPT
C     BB1(IP,ICOUNT  ) = BB1(IP,ICOUNT  ) + VVXIYJ
C     BB1(IP,ICOUNT+1) = BB1(IP,ICOUNT+1) + VVYIYJ
C     ICOUNT = ICOUNT + IAPT + 1
C     BB1(IP,ICOUNT  ) = BB1(IP,ICOUNT  ) + VVXIZJ
C     BB1(IP,ICOUNT+1) = BB1(IP,ICOUNT+1) + VVYIZJ
C     BB1(IP,ICOUNT+2) = BB1(IP,ICOUNT+2) + VVZIZJ
CC
C 200 CONTINUE
C
C     END IF
 1200                      CONTINUE
 1500                   CONTINUE
                        DHF(1,IC) = DHF(1,IC) + HFDX
                        DHF(2,IC) = DHF(2,IC) + HFDY
                        DHF(3,IC) = DHF(3,IC) + HFDZ
                        ICPT=KAPT
C     ICPT=(IC-1)*3+1
                        FHF(ICPT  ,ICPT  ) = FHF(ICPT  ,ICPT  ) + HFDXX
                        FHF(ICPT+1,ICPT  ) = FHF(ICPT+1,ICPT  ) + HFDXY
                        FHF(ICPT+2,ICPT  ) = FHF(ICPT+2,ICPT  ) + HFDXZ
                        FHF(ICPT+1,ICPT+1) = FHF(ICPT+1,ICPT+1) + HFDYY
                        FHF(ICPT+2,ICPT+1) = FHF(ICPT+2,ICPT+1) + HFDYZ
                        FHF(ICPT+2,ICPT+2) = FHF(ICPT+2,ICPT+2) + HFDZZ
                        IPT=IAPT
C     IPT=(IATOM-1)*3+1
                        FONE(IPT  ,ICPT  ) = FONE(IPT  ,ICPT  ) + DVXIXC
                        FONE(IPT  ,ICPT+1) = FONE(IPT  ,ICPT+1) + DVXIYC
                        FONE(IPT  ,ICPT+2) = FONE(IPT  ,ICPT+2) + DVXIZC
                        FONE(IPT+1,ICPT  ) = FONE(IPT+1,ICPT  ) + DVYIXC
                        FONE(IPT+1,ICPT+1) = FONE(IPT+1,ICPT+1) + DVYIYC
                        FONE(IPT+1,ICPT+2) = FONE(IPT+1,ICPT+2) + DVYIZC
                        FONE(IPT+2,ICPT  ) = FONE(IPT+2,ICPT  ) + DVZIXC
                        FONE(IPT+2,ICPT+1) = FONE(IPT+2,ICPT+1) + DVZIYC
                        FONE(IPT+2,ICPT+2) = FONE(IPT+2,ICPT+2) + DVZIZC
                        JPT=JAPT
C     JPT=(JATOM-1)*3+1
                        FONE(JPT  ,ICPT  ) = FONE(JPT  ,ICPT  ) + DVXJXC
                        FONE(JPT  ,ICPT+1) = FONE(JPT  ,ICPT+1) + DVXJYC
                        FONE(JPT  ,ICPT+2) = FONE(JPT  ,ICPT+2) + DVXJZC
                        FONE(JPT+1,ICPT  ) = FONE(JPT+1,ICPT  ) + DVYJXC
                        FONE(JPT+1,ICPT+1) = FONE(JPT+1,ICPT+1) + DVYJYC
                        FONE(JPT+1,ICPT+2) = FONE(JPT+1,ICPT+2) + DVYJZC
                        FONE(JPT+2,ICPT  ) = FONE(JPT+2,ICPT  ) + DVZJXC
                        FONE(JPT+2,ICPT+1) = FONE(JPT+2,ICPT+1) + DVZJYC
                        FONE(JPT+2,ICPT+2) = FONE(JPT+2,ICPT+2) + DVZJZC
 2000                CONTINUE
                  END IF
 3000       CONTINUE
C
C     IPT=(IATOM-1)*3+1
C     JPT=(JATOM-1)*3+1
            IPT=IAPT
            JPT=JAPT
            FONE(IPT  ,IPT  ) = FONE(IPT  ,IPT  ) + DVXIXI + DTDXDX
            FONE(IPT  ,IPT+1) = FONE(IPT  ,IPT+1) + DVXIYI + DTDXDY
            FONE(IPT  ,IPT+2) = FONE(IPT  ,IPT+2) + DVXIZI + DTDXDZ
            FONE(IPT+1,IPT+1) = FONE(IPT+1,IPT+1) + DVYIYI + DTDYDY
            FONE(IPT+1,IPT+2) = FONE(IPT+1,IPT+2) + DVYIZI + DTDYDZ
            FONE(IPT+2,IPT+2) = FONE(IPT+2,IPT+2) + DVZIZI + DTDZDZ
            FONE(IPT  ,JPT  ) = FONE(IPT  ,JPT  ) + DVXIXJ - DTDXDX
            FONE(IPT  ,JPT+1) = FONE(IPT  ,JPT+1) + DVXIYJ - DTDXDY
            FONE(IPT  ,JPT+2) = FONE(IPT  ,JPT+2) + DVXIZJ - DTDXDZ
            FOVL(IPT  ,IPT  ) = FOVL(IPT  ,IPT  ) + DSDXDX
            FOVL(IPT  ,IPT+1) = FOVL(IPT  ,IPT+1) + DSDXDY
            FOVL(IPT  ,IPT+2) = FOVL(IPT  ,IPT+2) + DSDXDZ
            FOVL(IPT+1,IPT+1) = FOVL(IPT+1,IPT+1) + DSDYDY
            FOVL(IPT+1,IPT+2) = FOVL(IPT+1,IPT+2) + DSDYDZ
            FOVL(IPT+2,IPT+2) = FOVL(IPT+2,IPT+2) + DSDZDZ
            FOVL(IPT  ,JPT  ) = FOVL(IPT  ,JPT  ) - DSDXDX
            FOVL(IPT  ,JPT+1) = FOVL(IPT  ,JPT+1) - DSDXDY
            FOVL(IPT  ,JPT+2) = FOVL(IPT  ,JPT+2) - DSDXDZ
            IF (IATOM.NE.JATOM) THEN
               FONE(IPT+1,JPT  ) = FONE(IPT+1,JPT  ) + DVYIXJ - DTDXDY
               FOVL(IPT+1,JPT  ) = FOVL(IPT+1,JPT  ) - DSDXDY
            END IF
            FONE(IPT+1,JPT+1) = FONE(IPT+1,JPT+1) + DVYIYJ - DTDYDY
            FONE(IPT+1,JPT+2) = FONE(IPT+1,JPT+2) + DVYIZJ - DTDYDZ
            FOVL(IPT+1,JPT+1) = FOVL(IPT+1,JPT+1) - DSDYDY
            FOVL(IPT+1,JPT+2) = FOVL(IPT+1,JPT+2) - DSDYDZ
            IF (IATOM.NE.JATOM) THEN
               FONE(IPT+2,JPT  ) = FONE(IPT+2,JPT  ) + DVZIXJ - DTDXDZ
               FONE(IPT+2,JPT+1) = FONE(IPT+2,JPT+1) + DVZIYJ - DTDYDZ
               FOVL(IPT+2,JPT  ) = FOVL(IPT+2,JPT  ) - DSDXDZ
               FOVL(IPT+2,JPT+1) = FOVL(IPT+2,JPT+1) - DSDYDZ
            END IF
            FONE(IPT+2,JPT+2) = FONE(IPT+2,JPT+2) + DVZIZJ - DTDZDZ
            FONE(JPT  ,JPT  ) = FONE(JPT  ,JPT  ) + DVXJXJ + DTDXDX
            FONE(JPT  ,JPT+1) = FONE(JPT  ,JPT+1) + DVXJYJ + DTDXDY
            FONE(JPT  ,JPT+2) = FONE(JPT  ,JPT+2) + DVXJZJ + DTDXDZ
            FONE(JPT+1,JPT+1) = FONE(JPT+1,JPT+1) + DVYJYJ + DTDYDY
            FONE(JPT+1,JPT+2) = FONE(JPT+1,JPT+2) + DVYJZJ + DTDYDZ
            FONE(JPT+2,JPT+2) = FONE(JPT+2,JPT+2) + DVZJZJ + DTDZDZ
            FOVL(IPT+2,JPT+2) = FOVL(IPT+2,JPT+2) - DSDZDZ
            FOVL(JPT  ,JPT  ) = FOVL(JPT  ,JPT  ) + DSDXDX
            FOVL(JPT  ,JPT+1) = FOVL(JPT  ,JPT+1) + DSDXDY
            FOVL(JPT  ,JPT+2) = FOVL(JPT  ,JPT+2) + DSDXDZ
            FOVL(JPT+1,JPT+1) = FOVL(JPT+1,JPT+1) + DSDYDY
            FOVL(JPT+1,JPT+2) = FOVL(JPT+1,JPT+2) + DSDYDZ
            FOVL(JPT+2,JPT+2) = FOVL(JPT+2,JPT+2) + DSDZDZ
 5000 CONTINUE
C
      RETURN
      END
      SUBROUTINE VADD(A,B,C,N)
C
      REAL*8 A(N),B(N),C(N)
C
C
      DO 1 I=1,N
        A(I)=B(I)+C(I)
    1 CONTINUE
C
      RETURN
      END
      SUBROUTINE VDER
C
C
C
C
      IMPLICIT REAL*8 (A-H,O-Z)
C
      LOGICAL OPEN
      CHARACTER*5 CALTYP
      CHARACTER*6 SCFTYP
C
      COMMON /CNTRL/  IPRINT,NDERIV,INTOUT,INFOUT,OPEN,SCFTYP,CALTYP
      COMMON /TAPES/  IOUT,ICHECK,INPUT,ITAP42,ITAP49
      COMMON /DSTVP/  T,X0,Y0,Z0,NI,NJ,CX,CY,CZ,D0DI,D0DJ,VX,VY,VZ,UU
     #,               D0DC,DVX,DVY,DVZ,               WIVX,WIVY,WIVZ
     #,                                    WJVX,WJVY,WJVZ
     #,               WIXDVX,WIYDVY,WIZDVZ
     #,               DEXDXI,DEXDYI,DEXDZI,DEXDXJ,DEXDYJ,DEXDZJ
     #,               DEXDII,DEXDIJ,DEXDJJ,DEXDIC,DEXDJC
     #,               TAI,TAJ,TAA,ICATOM
      COMMON /ISHELL/  II,IATOM,XI,YI,ZI,IGMIN,IGMAX,LIT,MINI,MAXI,LOCI
      COMMON /JSHELL/  JJ,JATOM,XJ,YJ,ZJ,JGMIN,JGMAX,LJT,MINJ,MAXJ,LOCJ
     #,                RR
C
      DIMENSION H(21),W(21),MIN(6),MAX(6),COORD0(3),COORDI(3)
      DIMENSION COORDJ(3),COORDC(3),V(3),DV(3),WIV(3)
      DIMENSION WIDV(3),DEXDI(3),DEXDJ(3),WJV(3)
C
      EQUIVALENCE (V,VX),(DV,DVX),(WIV,WIVX)
      EQUIVALENCE (WJV,WJVX)
      EQUIVALENCE (WIDV,WIXDVX)
      EQUIVALENCE (COORD0,X0),(COORDI,XI),(COORDJ,XJ),(COORDC,CX)
      EQUIVALENCE (DEXDI,DEXDXI),(DEXDJ,DEXDXJ)
C
      DATA MIN /1,  2,  4,  7, 11, 16/
      DATA MAX /1,  3,  6, 10, 15, 21/
      DATA H   /0.0D+00
     2,         -.707106781186548D+00,  0.707106781186548D+00
     3,         -1.22474487139159D+00,0.0D+00,1.22474487139159D+00
     4,         -1.65068012388578D+00, -0.524647623275290D+00
     4,          0.524647623275290D+00, 1.65068012388578D+00
     5,   -2.02018287045609D+00,-0.958572464613819D+00,0.0D+00
     5,          0.958572464613819D+00, 2.02018287045609D+00
     6,         -2.350604973674D+00  , -1.335849074014D+00
     6,         -0.436077411928D+00  ,  0.436077411928D+00
     6,          1.335849074014D+00  ,  2.350604973674D+00/
      DATA W   /1.77245385090552D+00
     2,         0.8862269254528D+00  ,  0.8862269254528D+00
     3,         0.2954089751509D+00  ,  1.181635900604D+00
     3,         0.2954089751509D+00
     4,         8.131283544725D-02   ,  8.049140900055D-01
     4,         8.049140900055D-01   ,  8.131283544725D-02
     5,         1.995324205905D-02   ,  3.936193231522D-01
     5,         9.453087204829D-01   ,  3.936193231522D-01
     5,         1.995324205905D-02
     6,         4.530009905509D-03   ,  1.570673203229D-01
     6,         7.246295952244D-01   ,  7.246295952244D-01
     6,         1.570673203229D-01   ,  4.530009905509D-03/
C
      TWOUU=2.0D+00*UU
      NPTS=(NI+NJ+NDERIV)/2 + 1
      IF (IATOM.EQ.JATOM) THEN
        IF (IATOM.EQ.ICATOM) THEN
          TWOAA  = TAA + 2.0D+00*UU
          TWOUU=0.0
        ELSE
          TWOAA  = TAA
        END IF
        NA=NI+NJ-2
        DO 110 IXYZ=1,3
          V(IXYZ)=0.0
          DV(IXYZ)=0.0
          WIV(IXYZ)=0.0
          WJV(IXYZ)=0.0
C
          DO 109 IPT=MIN(NPTS),MAX(NPTS)
            PT=H(IPT)/T+COORD0(IXYZ)
            A=PT-COORDI(IXYZ)
            C=(PT-COORDC(IXYZ))*TWOUU
            WT=W(IPT)
            WTC=WT*C
            WTCSQ=WTC*C
            IF (NA.GT.1) THEN
              ANAM1=A**(NA-1)
              ANA  =ANAM1*A
            ELSE IF (NA.EQ.1) THEN
              ANAM1=1.0
              ANA  =A
            ELSE IF (NA.EQ.0) THEN
              ANAM1=0.0
              ANA  =1.0
            ELSE
              STOP 'NEGATIVE VALUE OF NA, FOR I=J, IN VDER'
            END IF
            ANAP1=ANA*A
C
            V(IXYZ)=V(IXYZ) + ANA *WT
            DV(IXYZ)=DV(IXYZ) + ANA * WTC
            WIV(IXYZ) = WIV(IXYZ) + (TWOAA*ANAP1 - NA*ANAM1) * WT
  109     CONTINUE
  110   CONTINUE
      ELSE
        IF (IATOM.EQ.ICATOM) THEN
          TWOAI  = TAI + 2.0D+00*UU
          TWOUU  = 0.0
        ELSE
          TWOAI  = TAI
        END IF
        IF (JATOM.EQ.ICATOM) THEN
          TWOAJ  = TAJ + 2.0D+00*UU
          TWOUU  = 0.0
        ELSE
          TWOAJ  = TAJ
        END IF
        NA=NI-1
        NB=NJ-1
        DO 120 IXYZ=1,3
          V(IXYZ)=0.0
          DV(IXYZ)=0.0
          WIV(IXYZ)=0.0
          WJV(IXYZ)=0.0
C
          DO 119 IPT=MIN(NPTS),MAX(NPTS)
            PT=H(IPT)/T+COORD0(IXYZ)
            A=PT-COORDI(IXYZ)
            B=PT-COORDJ(IXYZ)
            C=(PT-COORDC(IXYZ))*TWOUU
            WT=W(IPT)
            WTC=WT*C
            WTCSQ=WTC*C
            IF (NA.GT.1) THEN
              ANAM1=A**(NA-1)
              ANA  =ANAM1*A
            ELSE IF (NA.EQ.1) THEN
              ANAM1=1.0
              ANA  =A
            ELSE IF (NA.EQ.0) THEN
              ANAM1=0.0
              ANA  =1.0
            ELSE
              STOP 'NEGATIVE VALUE OF NA IN VDER'
            END IF
            IF (NB.GT.1) THEN
              BNBM1=B**(NB-1)
              BNB  =BNBM1*B
            ELSE IF (NB.EQ.1) THEN
              BNBM1=1.0
              BNB  =B
            ELSE IF (NB.EQ.0) THEN
              BNBM1=0.0
              BNB  =1.0
            ELSE
              STOP 'NEGATIVE VALUE OF NB IN VDER'
            END IF
            ANAP1=ANA*A
            BNBP1=BNB*B
C
            ANABNB= ANA*BNB
            V(IXYZ)=V(IXYZ) + ANABNB * WT
            DV(IXYZ)=DV(IXYZ) + ANABNB * WTC
            WIV(IXYZ)=WIV(IXYZ)+(TWOAI*ANAP1-NA*ANAM1)*BNB*WT
            WJV(IXYZ)=WJV(IXYZ)+(TWOAJ*BNBP1-NB*BNBM1)*ANA*WT
  119     CONTINUE
  120   CONTINUE
      END IF
      RETURN
C
C------------------------------------------------------------TDER
C
      ENTRY TDER
C
      NPTS=(NI+NJ+NDERIV)/2 +1
      TWOAI=TAI
      TWOAJ=TAJ
      NA=NI-1
      NB=NJ-1
      DO 130 IXYZ=1,3
        V(IXYZ)=0.0
        DV(IXYZ)=0.0
        WIV(IXYZ)=0.0
        WIDV(IXYZ)=0.0
C
        DO 129 IPT=MIN(NPTS),MAX(NPTS)
          PT=H(IPT)/T+COORD0(IXYZ)
          A=PT-COORDI(IXYZ)
          B=PT-COORDJ(IXYZ)
          WT=W(IPT)
          IF (NA.GT.2) THEN
            ANAM2=A**(NA-2)
            ANAM1=ANAM2*A
            ANA  =ANAM1*A
          ELSE IF (NA.EQ.2) THEN
            ANAM2=1.0
            ANAM1=A
            ANA  =A**2
          ELSE IF (NA.EQ.1) THEN
            ANAM2=0.0
            ANAM1=1.0
            ANA  =A
          ELSE IF (NA.EQ.0) THEN
            ANAM2=0.0
            ANAM1=0.0
            ANA  =1.0
          ELSE
            STOP 'NEGATIVE VALUE OF NA IN TDER'
          END IF
          IF (NB.GT.2) THEN
            BNBM2=B**(NB-2)
            BNBM1=BNBM2*B
            BNB  =BNBM1*B
          ELSE IF (NB.EQ.2) THEN
            BNBM2=1.0
            BNBM1=B
            BNB  =B**2
          ELSE IF (NB.EQ.1) THEN
            BNBM2=0.0
            BNBM1=1.0
            BNB  =B
          ELSE IF (NB.EQ.0) THEN
            BNBM2=0.0
            BNBM1=0.0
            BNB  =1.0
          ELSE
            STOP 'NEGATIVE VALUE OF NB IN TDER'
          END IF
          ANAP1=ANA*A
          BNBP1=BNB*B
          ANAP2=ANAP1*A
          BNBP2=BNBP1*B
C
          DELSQB=NB*(NB-1)*BNBM2-TWOAJ*(2*NB+1)*BNB+TWOAJ**2*BNBP2
          V(IXYZ)=V(IXYZ) + ANA*BNB*WT
          DV(IXYZ)=DV(IXYZ) + ANA*DELSQB*WT
          WIV(IXYZ)=WIV(IXYZ) + (TWOAI*ANAP1-NA*ANAM1)*BNB*WT
          WIDV(IXYZ)=WIDV(IXYZ) + (TWOAI*ANAP1-NA*ANAM1)*DELSQB*WT
  129   CONTINUE
  130 CONTINUE
      RETURN
      END
      SUBROUTINE VDER2
C
C
C
C
      IMPLICIT REAL*8 (A-H,O-Z)
      LOGICAL OPEN
      CHARACTER*5 CALTYP
      CHARACTER*6 SCFTYP
C
      COMMON /CNTRL/  IPRINT,NDERIV,INTOUT,INFOUT,OPEN,SCFTYP,CALTYP
      COMMON /DSTVP/  T,X0,Y0,Z0,NI,NJ,CX,CY,CZ,D0DI,D0DJ,VX,VY,VZ,UU
     #,               D0DC,DVX,DVY,DVZ,DDVX,DDVY,DDVZ,WIVX,WIVY,WIVZ
     #,               WIWIVX,WIWIVY,WIWIVZ,WIWJVX,WIWJVY,WIWJVZ
     #,               WJWJVX,WJWJVY,WJWJVZ,WJVX,WJVY,WJVZ
     #,               WIXDVX,WIYDVY,WIZDVZ,WJXDVX,WJYDVY,WJZDVZ
     #,               DEXDXI,DEXDYI,DEXDZI,DEXDXJ,DEXDYJ,DEXDZJ
     #,               DEXDII,DEXDIJ,DEXDJJ,DEXDIC,DEXDJC
     #,               TAI,TAJ,TAA,ICATOM
      COMMON /ISHELL/  II,IATOM,XI,YI,ZI,IGMIN,IGMAX,LIT,MINI,MAXI,LOCI
      COMMON /JSHELL/  JJ,JATOM,XJ,YJ,ZJ,JGMIN,JGMAX,LJT,MINJ,MAXJ,LOCJ
     #,                RR
C
      DIMENSION H(21),W(21),MIN(6),MAX(6),COORD0(3),COORDI(3)
      DIMENSION COORDJ(3),COORDC(3),V(3),DV(3),DDV(3),WIV(3),WIWIV(3)
      DIMENSION WIWJV(3),WJWJV(3),WIDV(3),DEXDI(3),DEXDJ(3),WJV(3)
      DIMENSION WJDV(3)
C
      EQUIVALENCE (V,VX),(DV,DVX),(DDV,DDVX),(WIV,WIVX),(WIWIV,WIWIVX)
      EQUIVALENCE (WIWJV,WIWJVX),             (WJV,WJVX)
      EQUIVALENCE (WJWJV,WJWJVX),(WIDV,WIXDVX),(WJDV,WJXDVX)
      EQUIVALENCE (COORD0,X0),(COORDI,XI),(COORDJ,XJ),(COORDC,CX)
      EQUIVALENCE (DEXDI,DEXDXI),(DEXDJ,DEXDXJ)
C
      DATA MIN /1,  2,  4,  7, 11, 16/
      DATA MAX /1,  3,  6, 10, 15, 21/
      DATA H   /0.0D+00
     2,         -.707106781186548D+00,  0.707106781186548D+00
     3,         -1.22474487139159D+00,0.0D+00,1.22474487139159D+00
     4,         -1.65068012388578D+00, -0.524647623275290D+00
     4,          0.524647623275290D+00, 1.65068012388578D+00
     5,   -2.02018287045609D+00,-0.958572464613819D+00,0.0D+00
     5,          0.958572464613819D+00, 2.02018287045609D+00
     6,         -2.350604973674D+00  , -1.335849074014D+00
     6,         -0.436077411928D+00  ,  0.436077411928D+00
     6,          1.335849074014D+00  ,  2.350604973674D+00/
      DATA W   /1.77245385090552D+00
     2,         0.8862269254528D+00  ,  0.8862269254528D+00
     3,         0.2954089751509D+00  ,  1.181635900604D+00
     3,         0.2954089751509D+00
     4,         8.131283544725D-02   ,  8.049140900055D-01
     4,         8.049140900055D-01   ,  8.131283544725D-02
     5,         1.995324205905D-02   ,  3.936193231522D-01
     5,         9.453087204829D-01   ,  3.936193231522D-01
     5,         1.995324205905D-02
     6,         4.530009905509D-03   ,  1.570673203229D-01
     6,         7.246295952244D-01   ,  7.246295952244D-01
     6,         1.570673203229D-01   ,  4.530009905509D-03/
C
      TWOUU=2.0D+00*UU
      NPTS=(NI+NJ+NDERIV)/2 + 1
      IF (IATOM.EQ.JATOM) THEN
         IF (IATOM.EQ.ICATOM) THEN
            TWOAA  = TAA + 2.0D+00*UU
            TWOUU=0.0
         ELSE
            TWOAA  = TAA
         END IF
         NA=NI+NJ-2
         DO 110 IXYZ=1,3
            V(IXYZ)=0.0
            DV(IXYZ)=0.0
            DDV(IXYZ)=0.0
            WIV(IXYZ)=0.0
            WJV(IXYZ)=0.0
            WIWIV(IXYZ)=0.0
            WIWJV(IXYZ)=0.0
            WJWJV(IXYZ)=0.0
            WIDV(IXYZ)=0.0
            WJDV(IXYZ)=0.0
C
            DO 109 IPT=MIN(NPTS),MAX(NPTS)
               PT=H(IPT)/T+COORD0(IXYZ)
               A=PT-COORDI(IXYZ)
               C=(PT-COORDC(IXYZ))*TWOUU
               WT=W(IPT)
               WTC=WT*C
               WTCSQ=WTC*C
               IF (NA.GT.2) THEN
                  ANAM2=A**(NA-2)
                  ANAM1=ANAM2*A
                  ANA  =ANAM1*A
                  ANAP1=ANA*A
               ELSE IF (NA.EQ.2) THEN
                  ANAM2=1.0
                  ANAM1=A
                  ANA  =A*A
                  ANAP1=ANA*A
               ELSE IF (NA.EQ.1) THEN
                  ANAM2=0.0
                  ANAM1=1.0
                  ANA  =A
                  ANAP1=A*A
               ELSE IF (NA.EQ.0) THEN
                  ANAM2=0.0
                  ANAM1=0.0
                  ANA  =1.0
                  ANAP1=A
               ELSE
                  STOP 'NEGATIVE VALUE OF NA, FOR I=J, IN VDER'
               END IF
               ANAP2=ANAP1*A
C
               V(IXYZ)=V(IXYZ) + ANA *WT
               DV(IXYZ)=DV(IXYZ) + ANA * WTC
               DDV(IXYZ)=DDV(IXYZ) + ANA * WTCSQ - TWOUU*ANA*WT
               TEMP= (TWOAA*ANAP1 - NA*ANAM1) * WT
               WIV(IXYZ) = WIV(IXYZ) + TEMP
               WIDV(IXYZ)=WIDV(IXYZ)+ TEMP * C
               WIWIV(IXYZ)=WIWIV(IXYZ) + (NA*(NA-1)*ANAM2 - TWOAA*(2*NA+
     *         1)*ANA+                          TWOAA**2*ANAP2) * WT
  109       CONTINUE
  110    CONTINUE
      ELSE
         IF (IATOM.EQ.ICATOM) THEN
            TWOAI  = TAI + 2.0D+00*UU
            TWOUU  = 0.0
         ELSE
            TWOAI  = TAI
         END IF
         IF (JATOM.EQ.ICATOM) THEN
            TWOAJ  = TAJ + 2.0D+00*UU
            TWOUU  = 0.0
         ELSE
            TWOAJ  = TAJ
         END IF
         NA=NI-1
         NB=NJ-1
         DO 120 IXYZ=1,3
            V(IXYZ)=0.0
            DV(IXYZ)=0.0
            DDV(IXYZ)=0.0
            WIV(IXYZ)=0.0
            WJV(IXYZ)=0.0
            WIWIV(IXYZ)=0.0
            WIWJV(IXYZ)=0.0
            WJWJV(IXYZ)=0.0
            WIDV(IXYZ)=0.0
            WJDV(IXYZ)=0.0
C
            DO 119 IPT=MIN(NPTS),MAX(NPTS)
               PT=H(IPT)/T+COORD0(IXYZ)
               A=PT-COORDI(IXYZ)
               B=PT-COORDJ(IXYZ)
               C=(PT-COORDC(IXYZ))*TWOUU
               WT=W(IPT)
               WTC=WT*C
               WTCSQ=WTC*C
               IF (NA.GT.2) THEN
                  ANAM2=A**(NA-2)
                  ANAM1=ANAM2*A
                  ANA  =ANAM1*A
                  ANAP1=ANA*A
               ELSE IF (NA.EQ.2) THEN
                  ANAM2=1.0
                  ANAM1=A
                  ANA  =A*A
                  ANAP1=ANA*A
               ELSE IF (NA.EQ.1) THEN
                  ANAM2=0.0
                  ANAM1=1.0
                  ANA  =A
                  ANAP1=A*A
               ELSE IF (NA.EQ.0) THEN
                  ANAM2=0.0
                  ANAM1=0.0
                  ANA  =1.0
                  ANAP1=A
               ELSE
                  STOP 'NEGATIVE VALUE OF NA IN VDER'
               END IF
               IF (NB.GT.2) THEN
                  BNBM2=B**(NB-2)
                  BNBM1=BNBM2*B
                  BNB  =BNBM1*B
                  BNBP1=BNB*B
               ELSE IF (NB.EQ.2) THEN
                  BNBM2=1.0
                  BNBM1=B
                  BNB  =B*B
                  BNBP1=BNB*B
               ELSE IF (NB.EQ.1) THEN
                  BNBM2=0.0
                  BNBM1=1.0
                  BNB  =B
                  BNBP1=B*B
               ELSE IF (NB.EQ.0) THEN
                  BNBM2=0.0
                  BNBM1=0.0
                  BNB  =1.0
                  BNBP1=B
               ELSE
                  STOP 'NEGATIVE VALUE OF NB IN VDER'
               END IF
               ANAP2=ANAP1*A
               BNBP2=BNBP1*B
C
               ANABNB= ANA*BNB
               V(IXYZ)=V(IXYZ) + ANABNB * WT
               DV(IXYZ)=DV(IXYZ) + ANABNB * WTC
               DDV(IXYZ)=DDV(IXYZ) + ANABNB * WTCSQ - TWOUU*ANABNB*WT
               TEMPI = (TWOAI*ANAP1 - NA*ANAM1) * BNB * WT
               TEMPJ = (TWOAJ*BNBP1 - NB*BNBM1) * ANA * WT
               WIV(IXYZ)=WIV(IXYZ) + TEMPI
               WJV(IXYZ)=WJV(IXYZ) + TEMPJ
               WIDV(IXYZ)=WIDV(IXYZ)+TEMPI * C
               WJDV(IXYZ)=WJDV(IXYZ)+TEMPJ * C
               WIWIV(IXYZ)=WIWIV(IXYZ) + (NA*(NA-1)*ANAM2-TWOAI*(2*NA+1)
     *         *ANA+                          TWOAI**2*ANAP2) * BNB * WT
               WIWJV(IXYZ)=WIWJV(IXYZ) + (TWOAI * ANAP1 - NA * ANAM1)
     #         *                         (TWOAJ * BNBP1 - NB * BNBM1) *
     *         WT
               WJWJV(IXYZ)=WJWJV(IXYZ) + (NB*(NB-1)*BNBM2-TWOAJ*(2*NB+1)
     *         *BNB+                          TWOAJ**2*BNBP2) * ANA * WT
  119       CONTINUE
  120    CONTINUE
      END IF
      RETURN
C
C
      ENTRY TDER2
C
      NPTS=(NI+NJ)/2+1   +1
      TWOAI=TAI
      TWOAJ=TAJ
      NA=NI-1
      NB=NJ-1
      DO 130 IXYZ=1,3
         V(IXYZ)=0.0
         DV(IXYZ)=0.0
         WIV(IXYZ)=0.0
         WIDV(IXYZ)=0.0
         WIWIV(IXYZ)=0.0
         DDV(IXYZ)=0.0
C
         DO 129 IPT=MIN(NPTS),MAX(NPTS)
            PT=H(IPT)/T+COORD0(IXYZ)
            A=PT-COORDI(IXYZ)
            B=PT-COORDJ(IXYZ)
            WT=W(IPT)
            IF (NA.GT.2) THEN
               ANAM2=A**(NA-2)
               ANAM1=ANAM2*A
               ANA  =ANAM1*A
               ANAP1=ANA*A
            ELSE IF (NA.EQ.2) THEN
               ANAM2=1.0
               ANAM1=A
               ANA  =A*A
               ANAP1=ANA*A
            ELSE IF (NA.EQ.1) THEN
               ANAM2=0.0
               ANAM1=1.0
               ANA  =A
               ANAP1=A*A
            ELSE IF (NA.EQ.0) THEN
               ANAM2=0.0
               ANAM1=0.0
               ANA  =1.0
               ANAP1=A
            ELSE
               STOP 'NEGATIVE VALUE OF NA IN TDER'
            END IF
            IF (NB.GT.2) THEN
               BNBM2=B**(NB-2)
               BNBM1=BNBM2*B
               BNB  =BNBM1*B
               BNBP1=BNB*B
            ELSE IF (NB.EQ.2) THEN
               BNBM2=1.0
               BNBM1=B
               BNB  =B*B
               BNBP1=BNB*B
            ELSE IF (NB.EQ.1) THEN
               BNBM2=0.0
               BNBM1=1.0
               BNB  =B
               BNBP1=B*B
            ELSE IF (NB.EQ.0) THEN
               BNBM2=0.0
               BNBM1=0.0
               BNB  =1.0
               BNBP1=B
            ELSE
               STOP 'NEGATIVE VALUE OF NB IN TDER'
            END IF
            ANAP2=ANAP1*A
            BNBP2=BNBP1*B
C
            DELSQB=NB*(NB-1)*BNBM2-TWOAJ*(2*NB+1)*BNB+TWOAJ**2*BNBP2
            V(IXYZ)=V(IXYZ) + ANA*BNB*WT
            DV(IXYZ)=DV(IXYZ) + ANA*DELSQB*WT
            WIV(IXYZ)=WIV(IXYZ) + (TWOAI*ANAP1-NA*ANAM1)*BNB*WT
            WIDV(IXYZ)=WIDV(IXYZ) + (TWOAI*ANAP1-NA*ANAM1)*DELSQB*WT
            WIWIV(IXYZ)=WIWIV(IXYZ) + (NA*(NA-1)*ANAM2-TWOAI*(2*NA+1)*
     *      ANA+                          TWOAI**2*ANAP2)*BNB*WT
            DDV(IXYZ)=DDV(IXYZ) + (NA*(NA-1)*ANAM2-TWOAI*(2*NA+1)*ANA
     #      +                          TWOAI**2*ANAP2)*DELSQB*WT
  129    CONTINUE
  130 CONTINUE
      RETURN
      END
      SUBROUTINE VEWS(A,B,S,N)
C
      REAL*8 A(N),B(N),S
C
C     EXTENDED DUMMY A,B
C
      DO 1 I=1,N
         A(I)=B(I)*S
    1 CONTINUE
C
      RETURN
      END
C    LIBRARY 1 OF DERTFK
C**********************************************************************
C*   NOTICE OF PROGRAM MODIFICATION                                   *
C**********************************************************************
C*  BY:  RICHARD REMINGTON                         SEARCH:  C3-24-88  *
C*  DATE:  MARCH  24,  1988                                           *
C*  REASON: MIGRATION TO RUN IN 7MB ON 9370                           *
C**********************************************************************
C  LAST UPDATED SEPTEMBER 21,1985 BY TJL FOR TCSCF-CI GRADIENTS       *
C**********************************************************************
C
C
      SUBROUTINE VSUB(A,B,C,N)
C
      REAL*8 A(N),B(N),C(N)
C
C     EXTENDED DUMMY A,B,C
C
      DO 1 I=1,N
        A(I)=B(I)-C(I)
    1 CONTINUE
C
      RETURN
      END
      SUBROUTINE YSOOUT
      IMPLICIT REAL*8 (A-H,O-Z)
      common/infoa/ nat,num,nnp,nshell,nirred,nt,nprim,mxt,niso
      COMMON/ISoPAC/INDIN(120),INDOUT(30)
      common/tapes/ iout,icheck,input,itap42,itap49
      integer rshift
      iword=0
      do 20 j=1,nt
         if (mod(j-1,4).eq.0) then
            iword=iword+1
            indin(j)=and(indout(iword),255)
         else
            indin(j)=and(rshift(indout(iword),8*mod(j-1,4)),255)
         end if
   20 continue
c
      RETURN
C
C--YSOIN-------------------------------------------------YSOIN
C
      ENTRY YSOIN
C
      iword=0
      DO 40 J=1,NT
         if (mod(j-1,4).eq.0) then
            iword=iword+1
            indout(iword)=indin(j)
         else
            indout(iword)=or(indout(iword),lshift(indin(j),
     #                       8*mod(j-1,4)))
         end if
   40 CONTINUE
c
      RETURN
      END
