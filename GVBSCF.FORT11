      SUBROUTINE FENTRY(CC,IA,MAXCC)
C   THE GENERAL SCF PROGRAM
C***********************************************************************
C   REFERENCES:                                                        *
C   BRODORWICKZ AND GODDARD, "METHODS OF ELECTRONIC STRUCTURE", 1977   *
C   CARBO, "A GENERAL SCF THEORY" TOPICS IN CURRENT CHEMISTRY, 1978    *
C***********************************************************************
C*** MIQUEL DURAN, 1985/86, UNIVERSITY OF CALIFORNIA, BERKELEY         *
C***********************************************************************
C*   NOTICE OF PROGRAM MODIFICATION                                   *
C**********************************************************************
C*  MODIFICATION FOR FENTRY                                           *
C*  BY:  YUKIO YAMAGUCHI                           SEARCH: C02-16-89  *
C*  DATE:  FEBRUARY 16, 1989                                          *
C**********************************************************************
C*  BY:  RICHARD REMINGTON                         SEARCH: C02-02-89  *
C*  DATE:  FEBRUARY  1, 1989                                          *
C*  REASON: DECREASE CORE FROM 15MB ON 3090 TO 7MB ON 9370.           *
C*          ALSO MAINTAIN F77 LOOP STANDARDS.  AND ALSO CLOSE AND     *
C*          OPEN FILE30 TO WRITE OUTPUT AFTER EACH SCF ITERATION.     *
C**********************************************************************
C*  LAST UPDATED ON JULY 10,1987  BY YUKIO YAMAGUCHI                  *
C*  MAXCC WAS INCREASED FROM 800K TO 1750K                            *
C*  INTMX WAS INCREASED FROM 1296 TO 10000                            *
C*  MAXSHL WAS INCREASED FROM 15 TO 20                                *
C**********************************************************************
C SEE SUBROUTINE GENSCF FOR DETAILS ON INPUT
C
      IMPLICIT REAL*8 (A-H,O-Z)
C02-02-89   PARAMETER (MAXCC=1680000)
C2-16-89 PARAMETER (MAXCC=600000)
C2-16-89 DIMENSION CC(MAXCC),IA(1)
      DIMENSION CC(MAXCC),IA(1)
      INTEGER BLABEL(20)
      INTEGER ND(10),MNL(142),MS(142),MTYPE(2,20),ITYP(20)
      CHARACTER TAPE*8
      LOGICAL TAPE36
      COMMON/BASIS/NBASIS,NTRI,NSYM,NBFAO,NBFSO,NBATRI
      COMMON/ENRGY/ESCF,ENUC,SCFCON,NITER
      COMMON/I3030/I3030(200),NLAMDA(100)
      COMMON/LIMIT/MAXBAS,MAXBUF,MAXBF2,MAXBF4,MAXCOR,ICMAX
      PARAMETER(MAXSHL=20)
      COMMON/ZZGEN/ALFA(MAXSHL,MAXSHL),BETA(MAXSHL,MAXSHL),OCC(MAXSHL)
     1 ,NOMO(MAXSHL),ISHT(MAXSHL),IGVB,ISGVB,IBEGIN(MAXSHL)
      COMMON/ZZGVB/NPAIR,IIGVB(3,2),IWPAIR(MAXSHL)
      COMMON/SIGNS/IOFF(256),IPRNT
      COMMON/SYMMS/IDEG(10),NDEG(10),LSYM(10)
      COMMON/TAPES/ITAP34,ITAP36,TAPE
      COMMON/ZIJKL/IJKLA,IJKLM
      COMMON/ZNELE/NDOCC,NSOCC,IREAD,IWF
      COMMON/ZNSTT/NST
      COMMON/ZSYMM/IDOCC(10),ISOCC(10)
      COMMON/SUPMX/ISUPMX,INTMX,NINT,NEWBUF,MAXIJ
      LOGICAL*1 IZ
      COMMON/ZZZSY/IZ(5050)
      COMMON/PARAS/MXCOEF
C2-16-89 EQUIVALENCE (CC,IA)
    3 FORMAT(20X,'******* THE GVBSCF PROGRAM ******'/
     1       20X,'WRITTEN BY M.D.P. FROM UAB AT UCB'/
     1       20X,'*********************************'/)
    4 FORMAT(2X,' BLABEL = ',20A4)
    5 FORMAT(2X,' ENUC   = ',F15.8)
    6 FORMAT(2X,' NST    = ',I5/2X,' NDEG   =',8I5)
    7 FORMAT(2X,' NBASIS = ',I8/
     1       2X,' NTRI   = ',I8/
     2       2X,' NSYM   = ',I8/
     3       2X,' NBFAO  = ',I8/
     4       2X,' NBFSO  = ',I8/
     5       2X,' NBATRI = ',I8/
     6       2X,' IPRNT  = ',I8/
     7       2X,' TAPE   = ',A8)
    8 FORMAT(2X,' ICMAX = ',I10,5X,' MAXCOR = ',I10)
    9 FORMAT(2X,' REQUIRED MEMORY EXCEEDS MAXCOR '/
     1          2X,' ICMAX = ',I10,5X,' MAXCOR = ',I10)
   21 FORMAT(' NOW YOU ARE IN RDONE')
   22 FORMAT(' NOW YOU ARE IN RDTWO')
   25 FORMAT(' NOW YOU ARE IN SCFJ')
   30 FORMAT(2X,' IPARA = ',I10)
C
      MAXCOR=MAXCC
C
      CALL TSTART(6)
      CALL TEMPSB
      CALL NOUNFL
      ITAPE3=3
      INPUT=5
      ITAPE6=6
      ITAP34=34
      ITAP36=36
      MAXBUF=4096
      MAXBF2=MAXBUF*2
      MAXBF4=MAXBUF*4
      IOFF(1)=0
      DO 101 I=1,255
  101 IOFF(I+1)=IOFF(I)+I
C
C   READ IN INTEGRAL INFORMATION FROM 34 FILE
      WRITE(6,3)
      WRITE(3,3)
      CALL RFILE(ITAP34)
      CALL WREADW(ITAP34,NKIND,1,1,IEND)
      CALL WREADW(ITAP34,ICLOS,1,IEND,IEND)
      CALL WREADW(ITAP34,BLABEL,20,IEND,IEND)
      CALL WREADW(ITAP34,ENUC,2,IEND,IEND)
      CALL WREADW(ITAP34,NST,1,IEND,IEND)
      CALL WREADW(ITAP34,ND,NST,IEND,IEND)
      CALL WREADW(ITAP34,ITYP,NST,IEND,IEND)
      CALL WREADW(ITAP34,NDEG,NST,IEND,IEND)
      CALL WREADW(ITAP34,NS,1,IEND,IEND)
      CALL WREADW(ITAP34,MTYPE,2*NS,IEND,IEND)
      CALL WREADW(ITAP34,LAPU,1,IEND,IEND)
      CALL WREADW(ITAP34,MS,LAPU,IEND,IEND)
      CALL WREADW(ITAP34,MNL,LAPU,IEND,IPARA)
C     WRITE(6,30) IPARA
      ISADR=I2SEC(IPARA)+1
      CALL RSETSA(ITAP34,ISADR)
      WRITE(6,4) BLABEL
C     WRITE(3,4) BLABEL
      WRITE(6,5) ENUC
      WRITE(3,5) ENUC
      WRITE(6,6) NST,(NDEG(I),I=1,NST)
      WRITE(3,6) NST,(NDEG(I),I=1,NST)
C INPUT SCF PARAMETERS
C.................IORDER
      NSYM=0
      NBASIS=0
      MXCOEF=0
      DO 102 I=1,NST
      IF(NDEG(I).GT.0) THEN
               NSYM=NSYM+1
               NLAMDA(NSYM)=NDEG(I)
      END IF
      MXCOEF=MXCOEF+NDEG(I)*NDEG(I)
      NBASIS=NBASIS+NDEG(I)
  102 CONTINUE
      WRITE(3,*)'MXCOEF,NSYM,NBASIS=',MXCOEF,NSYM,NBASIS
      WRITE(3,*)'NLAMDA=',(NLAMDA(I),I=1,NSYM)
      CALL INPSCF
      IDEG(1)=0
      LSYM(1)=0
      IF(NSYM.EQ.1) GO TO 203
      II=0
      DO 103 I=2,NST
      IF(NDEG(I).LE.0) GO TO 202
  201 II=II+1
      NN=NDEG(II)
      IF(NN.EQ.0) GO TO 201
      IDEG(I)=IDEG(I-1)+NN
      LSYM(I)=LSYM(I-1)+IOFF(NN+1)
      GO TO 103
  202 LSYM(I)=LSYM(I-1)
      IDEG(I)=IDEG(I-1)
  103 CONTINUE
  203 NTRI=IOFF(NBASIS+1)
      TAPE='  TAPE36'
      WRITE(6,7) NBASIS,NTRI,NSYM,NBFAO,NBFSO,NBATRI,IPRNT,TAPE
C
C SET UP ZERO SYMMETRY ELEMENTS
C
      DO 401 I=1,NTRI
  401          IZ(I)=.FALSE.
      DO 402 I=1,NST
               NL=NDEG(I)
               IF(NL.EQ.0)GOTO 402
               IN=IDEG(I)
               DO 403 IC=IN+1,IN+NL
               DO 403 IB=IN+1,IC
                       IJ=IOFF(IC)+IB
  403                  IZ(IJ)=.TRUE.
  402          CONTINUE
C
C   CREATE SO INTEGRAL FILES
C
      WRITE(3,21)
      IBUFHF=4471
      IC1=1
      IC2=IC1+NTRI
      IC3=IC2+NTRI
      IC4=IC3+NTRI
      IC5=IC4+NTRI
      IA5=IC5+IC5-1
      ICMAX=IC5+IBUFHF
      WRITE(3,8) ICMAX,MAXCOR
      IF(ICMAX.GT.MAXCOR) GO TO 399
C................S       H       T       V       LBLI    STVI....
      CALL RDONE(CC(IC1),CC(IC2),CC(IC3),CC(IC4),IA(IA5),CC(IC5),
C.......................
     1           IBUFHF)
C
      WRITE(3,22)
      IBUFHF=4471
C WE WANT TO PRESERVE S AND H, SO WE BEGIN AT OLD IC3
      IJKLA=IOFF(NBASIS+1)
      IJKLM=IOFF(IJKLA+1)
C     WRITE(3,*)'IJKLA=',IJKLA,' NBASIS=',NBASIS
C     WRITE(3,*)' IJKLM=',IJKLM
C     IC5=IC4+IJKLM
      IC5=IC4
      IA5=IC5+IC5-1
      IC6=IC5+IBUFHF
      IA6=IC6+IC6-1
      ICMAX=IC6+MAXBF2
      WRITE(3,8) ICMAX,MAXCOR
      IF(ICMAX.GT.MAXCOR) GO TO 399
      IF(ISUPMX.EQ.0)THEN
C................IJKL    LBLI    PKI     LBLO    BUFO...........
      CALL NRDTWO(CC(IC4),IA(IA5),CC(IC5),IA(IA6),CC(IC6),IBUFHF)
C
      ELSE
C     MAXIJ=447*4
      MAXIJ=3276
C***  INTMX=1296
      INTMX=10000
      LMIJ=IA6
      LXV1=LMIJ+MAXIJ
      LP=ICMAX
      LIX=LP+3*INTMX
      LLB=LIX+INTMX+128
      LV1=LLB+INTMX*2
      LV2=LV1+INTMX
      CALL SRDTWO(IA(IA5),CC(IC5),IA(LMIJ),IA(LXV1),
     1  CC(LP),CC(LIX),CC(LLB),CC(LV1),CC(LV2))
      END IF
      NB2=NBASIS*NBASIS
      WRITE(3,25)
      IC6=IC5+NB2
      IC7=IC6+NB2
      IC8=IC7+NB2
      IC9=IC8+NTRI
      IC10=IC9+NTRI
      IC11=IC10+NTRI
      IC12=IC11+NTRI
      IC13=IC12+NTRI
      IC14=IC13+NBASIS
      IC15=IC14+NBASIS
      NNN=NTRI*NSOCC
      IC16=IC15+NNN
      IC17=IC16+NNN
      IC18=IC17+NNN
      IC19=IC18+NNN
C ATTENTION
      IC20=IC19+MAXSHL*NTRI
      IC21=IC20+NTRI
      IC22=IC21+NTRI
      IC23=IC22+NB2
      IC24=IC23+NB2
      IC25=IC24+NBASIS
      IC26=IC25+NBASIS
      IC27=IC26+NBASIS
      ICMAX=IC27+NBASIS
      NCRUSD=ICMAX
      WRITE(3,8) ICMAX,MAXCOR
      IF(ICMAX.GT.MAXCOR) GO TO 399
C.................S       H       T       IJKL    X
      CALL   SCFJ(CC(IC1),CC(IC2),CC(IC3),CC(IC4),CC(IC5)
C............. T1      T2      F       P       P1
     1        ,CC(IC6),CC(IC7),CC(IC8),CC(IC9),CC(IC10)
C............. P2       P3       E        NOCC     ZJ
     2        ,CC(IC11),CC(IC12),CC(IC13),CC(IC14),CC(IC15)
C............. ZK       ZJM      ZKM      FI       HM
     3        ,CC(IC16),CC(IC17),CC(IC18),CC(IC19),CC(IC20)
C............. TM       FL       SH       MOTYPE   MAP      MOPOS
     4        ,CC(IC21),CC(IC22),CC(IC23),CC(IC24),CC(IC25),CC(IC26)
C............. EIGENV   CORE
     5        ,CC(IC27),CC(ICMAX) )
  400 CONTINUE
      CALL RCLOSE(ITAP34,3)
      CALL RCLOSE(ITAP36,3)
      CALL TSTOP(6)
      STOP
  399 CONTINUE
      WRITE(6,9) ICMAX,MAXCOR
      WRITE(3,9) ICMAX,MAXCOR
C
      RETURN
C2-16-89  STOP
      END
      SUBROUTINE SCFJ(S,H,T,IJKL,X,T1,T2,F,P,P1,P2,P3,E,NOCC
     1   ,ZJ,ZK,ZJM,ZKM,FI,HM,TM,FL,SH,MOTYPE,MAP,MOPOS,EIGENV
     2   ,CORE)
C***************************************
C SCFS SUBROUTINE MDP OUT-OF-CORE      *
C WITH SYMMETRY
C***************************************
C GENERAL SCF : HSOS,OSS,TCSCF,GVB,... *
C***************************************
C MIQUEL DURAN I PORTAS  UCB/UAB       *
C***************************************
      IMPLICIT REAL*8 (A-H,O-Z)
      REAL*8 IJKL
      COMMON/BASIS/NBASIS,NTRI,NSYM,NBFAO,NBFSO,NBATRI
      COMMON/ENRGY/ESCF,ENUC,TOL,NITER,IDUM,EKIN,EONE,ETOT,ETWO,EPOT,VIR
      COMMON/LIMIT/MAXBAS,MAXBUF,MAXBF2,MAXBF4,MAXCOR,NCRUSD
      COMMON/SIGNS/IOFF(256),IPRNT
      COMMON/SYMMS/IDEG(10),NDEG(10),LSYM(10)
      COMMON/TAPES/ITAP34,ITAP36
      COMMON/ZIJKL/IJKLA,IJKLM
      COMMON/ZNELE/NDOCC,NSOCC,IREAD,IWF,NSHELL,NFIRST,NLAST
      PARAMETER(MAXSHL=20)
      COMMON/ZZGEN/ALFA(MAXSHL,MAXSHL),BETA(MAXSHL,MAXSHL),OCC(MAXSHL)
     1 ,NOMO(MAXSHL),ISHT(MAXSHL),IGVB,ISGVB,IBEGIN(MAXSHL)
      COMMON/ZZGVB/NPAIR,IIGVB(3,2),IWPAIR(MAXSHL)
      COMMON/ZZMXO/IJDIM,IJMAX,NBL
      COMMON/ZZPEX/PEXC(99),INDPEX(20,99),NCPEX,IPEX,MOPEX(20)
     1 ,IICO
      COMMON/ZZLVS/ZLVS,NLVS,NROOT,NWF
      COMMON/ZZDII/NDIIS,NODIIS,ICOUP,ICAS,ZETA,ICAS30
      COMMON/ZNSTT/NST
      COMMON/ZZOCB/IOCB
      DIMENSION S(NTRI),H(NTRI),T(NTRI),IJKL(NTRI),X(NBASIS,NBASIS)
      DIMENSION F(NTRI),E(NBASIS),P(NTRI),P1(NTRI),CORE(1)
      DIMENSION T1(NBASIS,NBASIS),T2(NBASIS,NBASIS),MOPOS(*)
      DIMENSION P2(NTRI),P3(NTRI),NOCC(NBASIS),MOTYPE(*),MAP(*)
      DIMENSION ZJ(NTRI,*),ZK(NTRI,*),ZJM(NTRI,*),ZKM(NTRI,*)
      DIMENSION HM(*),TM(*),FI(NTRI,*),FL(NBASIS,*),SH(NBASIS,*)
      DIMENSION EIGENV(NBASIS)
      DATA ZERO,ONE,TWO,FOUR /0.0D0,1.D0,2.D0,4.D0/PT5/0.5D0/PT25/.25D0/
      DATA THREE/3.D0/EPS/1.D-06/EPSCAS/1.0D+06/
    8 FORMAT(//,2X,' ICMAX = ',I10,5X,' MAXCOR = ',I10/)
    9 FORMAT(//,2X,' REQUIRED MEMORY EXCEEDS MAXCOR '/
     1          2X,' ICMAX = ',I10,5X,' MAXCOR = ',I10/)
   54 FORMAT(//'ITER',T12,'ETOT',T26,'ESCF',T40,'EONE'
     1   ,T54,'ETWO',T68,'SQDIF'/)
   55 FORMAT(I3,F17.11,3F14.8,D10.3)
  155 FORMAT(I3,F17.11,3F14.8,2D10.3)
  156 FORMAT(I3,F17.11,2F14.8,2D10.3)
   60 FORMAT(///' TOTAL ENERGY =  ',F20.11
     1      /' SCF   ENERGY =  ',F20.11
     1      /' O-E   ENERGY =  ',F20.11
     1      /' T-E   ENERGY =  ',F20.11
     1      /' KIN   ENERGY =  ',F20.11
     1      /' POT   ENERGY =  ',F20.11
     1      /' VIR  THEOREM =  ',F20.11
     1      /' D.M. CONVERG =  ',D20.8)
   80 FORMAT(' INTRASHL MAX =  ',D20.8
     1      /' INTERS MX DF =  ',D20.8)
C
C INITIALIZATION
C
      ZEIT=ZERO
      PI=DATAN(ONE)*FOUR
      IF (IPRNT.GT.1)CALL TRSET(6)
      NFIRST=NDOCC+1
      NLAST=NDOCC+NSOCC
C     NBL=(NDOCC*(NDOCC-1))/2
C     IJDIM=((NLAST-1)*(NLAST-2))/2+NLAST-NBL
      IJDIM=((NLAST-1)*(NLAST-2))/2+NLAST
      IJMAX=IOFF(IJDIM+1)
      WRITE(3,*)' IN SCF, IPRNT,IJKLM,NTRI=',IPRNT,IJKLM,NTRI
      WRITE(3,*)' NFIRST NLAST IJDIM IJMAX',NFIRST,NLAST,IJDIM,IJMAX
C     WRITE(3,*)' NBL',NBL
      ITER=0
C
C DEFINE SOME CONSTANTS FOR THE CASE
C
      CALL GENSCF(MOTYPE,MOPOS)
C
      NDIISP=NSHELL*(NDIIS+1)
      NERRV=IOFF(NSHELL+1)
      NB2=NBASIS*NBASIS
      IF(ICOUP.EQ.0)THEN
               NMDIIS=NSHELL+NERRV
               NNEC=NTRI
      ELSE
               NMDIIS=NSHELL+1
               NNEC=NBASIS*NBASIS
      END IF
C PREPARE SOME TEMPORARY ARRAYS
      IC1=1
      IC2=IC1+NBASIS
      IC3=IC2+NBASIS
      IC4=IC3+NB2
      IC5=IC4+NB2
      IC6=IC5+IJDIM+NBL
      IC7=IC6+IJDIM
      IC8=IC7+IJDIM
      IC9=IC8+IJMAX
      IC10=IC9+IJDIM*IJDIM
      IC11=IC10+NTRI
      IC12=IC11+MAXBF2
      IC13=IC12+NSOCC*NTRI
      IC14=IC13+(NDIISP)*(NDIISP+1)
      IC15=IC14+NNEC*NDIIS*NMDIIS
      IC16=IC15+NB2
      IC17=IC16+NLAST*NB2
      NHAM=IOFF(NCPEX+1)
      IC18=IC17+NHAM
      IC19=IC18+NCPEX*NCPEX
      IC20=IC19+NCPEX
      IC21=IC20+NHAM
      ICMAX=IC21+NCRUSD
      WRITE(3,8) ICMAX,MAXCOR
      IF(ICMAX.GT.MAXCOR) GO TO 399
      NCRUSD=ICMAX
C
C GET S**(-1/2) MATRIX
C
C...................................AM........BM........CM
      CALL SMHALF(T1,T2,SH,X,E,S,P1,CORE(IC1),CORE(IC2),CORE(IC3))
C
C GET A GUESS FOR C MATRIX
C
C................................AM........BM........CM
      CALL CGUESS(H,P3,X,E,T1,T2,CORE(IC1),CORE(IC2),CORE(IC3)
C.......DM........R..........S
     1 ,CORE(IC4),CORE(IC10),CORE(IC11) )
C
C CHECK IF ELECTRIC FIELD EFFECT HAS TO BE INTRODUCED
C
      CALL LOCATE(5,'# EFIELD #',IERR)
      IF(IERR.NE.0)GOTO 4555
      READ(5,*)IFIELD,DISPLA
      IF(IFIELD.EQ.0)GOTO 4555
C2-25-89   FILLOWING CODES WERE FROZEN FOR IMS VERSION (YY)
C2-25-89   READ(14,*)FX,FY,FZ
C2-25-89   WRITE(16,'(3F20.8)')FX,FY,FZ
C2-25-89   WRITE(6,*)'EFIELD CALCULATION... FX,FY,FZ...'
      FX=0.0D+00
      FY=0.0D+00
      FZ=0.0D+00
C2-25-89
      WRITE(6,'(3F20.8)')FX,FY,FZ
      IF(NST.NE.1)THEN
      WRITE(6,*)'EFIELD NEEDS C1 SYMMETRY'
      STOP
      END IF
      IF(IREAD.EQ.0)THEN
      WRITE(6,*)'EFIELD NEEDS TO READ EIGENVECTOR'
      STOP
      END IF
C GET CORRECTION TO THE H MATRIX
      CALL BASSET(T2)
      CALL CENTER(1)
      CALL DIPOL1(P,P1,P2,P3,1,T2,3)
      IF(FX.NE.ZERO)CALL ESCVEC(-FX,P1,NTRI)
      IF(FY.NE.ZERO)CALL ESCVEC(-FY,P2,NTRI)
      IF(FZ.NE.ZERO)CALL ESCVEC(-FZ,P3,NTRI)
      IF(FX.NE.ZERO)CALL AADD(NTRI,P1,H,H)
      IF(FY.NE.ZERO)CALL AADD(NTRI,P2,H,H)
      IF(FZ.NE.ZERO)CALL AADD(NTRI,P3,H,H)
      IF(IPRNT.GE.4)CALL OUTTM(H,NTRI,NBASIS,6,'H+F MATRIX')
 4555 CONTINUE
      CALL AZERO(P,NTRI)
C
C IF WF IN FILE30 IS CASSCF WE MUST ROTATE ORBITALS M AND N
C
      IF(ICAS.EQ.1 .AND. ICAS30.NE.0 )THEN
      WRITE(6,*)' RESTARTING FROM A CASSCF-TYPE FILE30'
      IF(IPRNT.GE.1)WRITE(6,*)'ZETA=',ZETA
      IF(IPRNT.GE.1)CALL OUTMX(T1,NBASIS,NBASIS,6,'FORMER T1 MATRIX')
      CALL CASROT(ZETA,MOPEX,T2,T1,NBASIS)
      IF(IPRNT.GE.1)CALL OUTMX(T1,NBASIS,NBASIS,6,'ROTATED T1 MATRIX')
      END IF
C
      WRITE(6,54)
      WRITE(3,*)'NDIIS,NODIIS=',NDIIS,NODIIS
      ZEIT0=TEMPS(I)
      IF(IWF.EQ.0)NWF=-7
C
C LOOP OF SCF ITERATION
C
 1000 CONTINUE
C
C ZERO OUT OFF-DIAGONAL BLOCKS OF THE C MATRIX
C
      CALL ZROFFD(T1,NBASIS)
      IF(IPRNT.GT.1)WRITE(6,*)'TO HCJK'
      IF(IPRNT.GT.1)CALL TRSET(6)
C
C COMPUTE CLOSED DENSITY MATRIX
C
      CALL DMATCL(T1,P1,OCC,NBASIS,1,NDOCC,MOTYPE)
      IF (IPRNT.GT.3)CALL OUTTM(P1,NTRI,NBASIS,6,'P DOC MATRIX')
      ZEIT1=TEMPS(I)
C
C COMPUTE SEVERAL NEEDED MATRICES
C
C..................................HC.........LBLI.......BUFI
      CALL HCJK(ZJ,ZK,IJKL,P1,H,T1,CORE(IC10),CORE(IC11),CORE(IC11)
C.......PM
     1 ,CORE(IC12),MOTYPE)
C
C TRANSFORM FROM AO BASIS TO MO BASIS
C
      IF(IPRNT.GT.1)CALL TRSET(6)
      ZEIT=ZEIT+TEMPS(I)-ZEIT1
C....................HC...............................CM
      CALL AOTOMO(T1,CORE(IC10),HM,T,TM,ZJ,ZJM,ZK,ZKM,CORE(IC3)
C.......DM
     1 ,CORE(IC4))
C
C IF GVB/TCSCF OR OSPEMCSCF, CALCULATE CI COEFFICIENTS
C
      CALL CHKENE(ETOT,IFIN)
      CALL TRANSF(T1,H,P3,CORE(IC3),CORE(IC4),NBASIS)
      IF(NPAIR.GT.0 .OR. IPEX.EQ.1)THEN
C ATTENTION TO MOD!!
C     IF(MOD(ITER,NDIIS).EQ.0)THEN
          CALL UPDGVB(S1,S2,HM,ZJM,ZKM,ITER,MOTYPE,MOPOS,P3
     1    ,CORE(IC17),CORE(IC18),CORE(IC19),CORE(IC20))
          ECAS=S1
C     END IF
      END IF
C
C IF SCFEX, ROTATE ORBITALS
C
      IF(ICAS.NE.1)GOTO 4000
C
      IF(IPRNT.GE.1)CALL OUTMX(PEXC,3,1,6,'SECOND ROOT COEFFICIENTS')
      IF(ABS(PEXC(1)-PEXC(3)).LE.EPS)THEN
               ZETA=PI/FOUR
      ELSE
               TANG=DSQRT(TWO)*PEXC(2)/(PEXC(1)-PEXC(3))
               ZETA=ATAN(TANG)/TWO
      END IF
      IF(IPRNT.GE.1)WRITE(6,*)'ZETA=',ZETA
      IF(IPRNT.GE.1)CALL OUTMX(T1,NBASIS,NBASIS,6,'FORMER T1 MATRIX')
      CALL CASROT(ZETA,MOPEX,T2,T1,NBASIS)
      IF(IPRNT.GE.1)CALL OUTMX(T1,NBASIS,NBASIS,6,'ROTATED T1 MATRIX')
      ICAS=0
      CALL HCJK(ZJ,ZK,IJKL,P1,H,T1,CORE(IC10),CORE(IC11),CORE(IC11)
     1 ,CORE(IC12),MOTYPE)
      CALL AOTOMO(T1,CORE(IC10),HM,T,TM,ZJ,ZJM,ZK,ZKM,CORE(IC3)
     1 ,CORE(IC4))
      CALL CHKENE(ETOT,IFIN)
      CALL TRANSF(T1,H,P3,CORE(IC3),CORE(IC4),NBASIS)
      CALL UPDGVB(S1,S2,HM,ZJM,ZKM,ITER,MOTYPE,MOPOS,P3
     1    ,CORE(IC17),CORE(IC18),CORE(IC19),CORE(IC20))
      ICAS=1
C     WRITE(6,*)ECAS,ETOT
      IF(ABS(ECAS-ETOT).GT.EPSCAS)THEN
               WRITE(6,*)'ENERGY DIFFERENCE....'
               WRITE(6,*)'E(CAS3X3),E(2X2)=',ECAS,ETOT
               STOP
      END IF
C
 4000 CONTINUE
C
C CALCULATE F(I) MATRICES AND LAGRANGIAN
C
      CALL LAGCAL(FL,FI,MOTYPE,OCC,HM,ZJM,ZKM)
C
C CALCULATE ENERGY AT PRESENT
C
      CALL ENRGIA(FI,TM,P3,ZJM,ZKM,MOTYPE,OCC)
      ITER=ITER+1
      IF(IPRNT.GE.3)WRITE(6,*)'ITER=',ITER
C
C CHECK CONVERGENCE
C
      CALL DMATOP(T1,P2,OCC,NBASIS,NFIRST,NLAST,MOTYPE)
      IF (IPRNT.GT.3)CALL OUTTM(P2,NTRI,NBASIS,6,'P SOC MATRIX')
      CALL AADD(NTRI,P1,P2,P3)
      CALL DMCONV(P,P3,NTRI,DMAX,SQDIF,FL,MOTYPE,NBASIS,OFDMAX,OFSMAX)
      CALL AMOVE(P3,P,NTRI)
      IF(IPRNT.GT.2)WRITE(6,60)ESCF,ETOT,EONE,ETWO,EKIN,EPOT,VIR,SQDIF
      IF(IPRNT.LE.2)WRITE(6,156)ITER,ETOT,EONE,ETWO,SQDIF,OFSMAX
      WRITE(3,156)ITER,ETOT,EONE,ETWO,SQDIF,OFSMAX
      IF(SQDIF.LT.TOL.AND.OFSMAX.LT.TOL)GOTO 8000
      IF(NWF.GT.0 .AND.
     1 (NITER.EQ.102 .AND. OFSMAX.LT.1.D-05))NWF=-NWF
C     IF(SQDIF.LT.TOL)GOTO 8000
C
C02-02-89  BELOW ADDED TO FORCE WRITE TO FILE6 AT EACH SCF ITERATION
      CALL RCLOSE(99,3)
      CALL RFILE(99)
C02-02-89  ABOVE ADDED TO FORCE WRITE TO FILE6 AT EACH SCF ITERATION
C
C
C CHECK NUMBER OF ITERATIONS
C
      IF(ITER.GT.NITER)THEN
               WRITE(6,*)'MAXIMUM ITERATIONS EXCEEDED - NOT CONVERGED'
               WRITE(3,*)'MAXIMUM ITERATIONS EXCEEDED - NOT CONVERGED'
C2-25-89       WRITE(55,*)'MAXIMUM ITERATIONS EXCEEDED - NOT CONVERGED'
               GOTO 9000
      ENDIF
      IF(IPRNT.GT.1)CALL TRSET(6)
C
C BRANCH FOR EFFECTIVE FOCK OPERATOR
C
      IF(NWF.LT.0 .AND. ICOUP.EQ.0)GOTO 13000
C
C ORBITAL MIXING - NOT NEEDED FOR CLOSED-SHELL SINGLET
C
      IF(IWF.EQ.0)GOTO 5000
C
      CALL ORBMIX(MOTYPE,FI,ZJM,ZKM,T1,T2,FL,SH,X,IFIN,
C......B.........CIJ.......E.........AM........BM.......
     1 CORE(IC8),CORE(IC9),CORE(IC5),CORE(IC6),CORE(IC7),MAP,MOPOS)
      IF(IPRNT.GT.1)CALL TRSET(6)
C
C RECALCULATE M.O. INTEGRALS AND LAGRANGIAN
C
C....................HC...............................CM........DM
      CALL AOTOMO(T1,CORE(IC10),HM,T,TM,ZJ,ZJM,ZK,ZKM,CORE(IC3),CORE(IC4
     1 ) )
      CALL LAGCAL(FL,FI,MOTYPE,OCC,HM,ZJM,ZKM)
      IF(IPRNT.GT.1)CALL TRSET(6)
 5000 CONTINUE
C
C LEVEL SHIFT IF NECESSARY
C
      IF(ZLVS.NE.ZERO)
     *CALL LVSHFT(FI,MOTYPE,ITER)
C
C D I I S    ONLY IF CLOSED-SHELL
C
      IF(ICOUP.NE.0 .OR. IWF.GT.0)GOTO 6000
      IF(ITER.GE.NODIIS)THEN
      ITDIIS=ITDIIS+1
      IF(IPRNT.GE.6)WRITE(6,*)'ITDIIS=',ITDIIS
C.............................B..........FLST
      CALL PULAY(FL,FI,MOTYPE,CORE(IC13),CORE(IC14),NDIIS,NDIISP
C....................CM........DM
     1 ,ITDIIS,T1,T2,CORE(IC3),CORE(IC4),P3,SH,X)
      END IF
 6000 CONTINUE
      IF(ICOUP.NE.0 .OR. NDIIS.NE.0)THEN
C
C OCBSE
C
      CALL OCBSE(T1,T2,SH,X,MOTYPE,MAP,F,FI,E,ZJM,ZKM
C.........AM........BM........CM........DM
     1   ,CORE(IC1),CORE(IC2),CORE(IC3),CORE(IC4),MOPOS,ITER,EIGENV
C.........CORE........ICORE
     2   ,CORE(ICMAX),CORE(ICMAX))
      END IF
      IF(ICOUP.NE.0)THEN
C
C COUPLING OPERATOR METHOD, GRADIENT PART
C
      IF(NDIIS.NE.0)THEN
C....................HC
          CALL AOTOMO(T1,CORE(IC10),HM,T,TM,ZJ,ZJM,ZK,ZKM,CORE(IC3)
     1                ,CORE(IC4))
          CALL LAGCAL(FL,FI,MOTYPE,OCC,HM,ZJM,ZKM)
      END IF
C
      IF(NWF.GE.0)THEN
      CALL COUPOP(T1,T2,SH,X,MOTYPE,MAP,F,FI,E,ZJM,ZKM,S,FL
C.........AM........BM........PV........DM........EM.........RG
     1   ,CORE(IC1),CORE(IC2),CORE(IC3),CORE(IC4),CORE(IC11),CORE(IC15)
C.........B..........FLST.............................PII
     2   ,CORE(IC13),CORE(IC14),NDIIS,NDIIS+1,P3,ITER,CORE(IC16))
      ELSE
      GOTO 13000
      END IF
C
      END IF
14000 CONTINUE
      IF(IPRNT.GT.1)CALL TRSET(6)
C
C RETROROTATE M AND N FOR CASSCF
C
      IF(ICAS.EQ.1)THEN
      IF(IPRNT.GE.1)CALL OUTMX(T1,NBASIS,NBASIS,6,'FORMER T1 MATRIX')
      CALL CASROT(ZETA,MOPEX,T2,T1,NBASIS)
      IF(IPRNT.GE.1)CALL OUTMX(T1,NBASIS,NBASIS,6,'ROTATED T1 MATRIX')
      END IF
C
C NEXT ITERATION
C
      GOTO 1000
C
C EFFECTIVE FOCK OPERATOR
C
13000 CONTINUE
      CALL EFFFOP(T1,T2,SH,X,MOTYPE,MAP,F,FI,E,ZJM,ZKM,S,FL
C.........AM........BM........PV........DM........EM.........RG
     1   ,CORE(IC1),CORE(IC2),CORE(IC3),CORE(IC4),CORE(IC11),CORE(IC15)
C.........B..........FLST.............................PII
     2   ,CORE(IC13),CORE(IC14),NDIIS,NDIIS+1,P3,ITER,CORE(IC16),HM
     3   ,MOPOS)
      GOTO 14000
 8000 CONTINUE
C
C CONVERGENCE ACHIEVED
C
      WRITE(6,*)'CALCULATION CONVERGED IN',ITER,' ITERATIONS'
C2-25-89  WRITE(55,*)'CALCULATION CONVERGED IN',ITER,' ITERATIONS'
      WRITE(3,*)'CALCULATION CONVERGED'
 9000 CONTINUE
      ZEITT=TEMPS(I)
      ZEITP=ZEITT-ZEIT0
C2-25-89  ZEITPC=ZEIT/ZEITP*100.D0
C2-25-89 ZEITPC IS SET TO ZERO
      ZEITPC=0.0D+00
      WRITE(6,8887)ZEITT,ZEIT0,ZEITP,ZEIT,ZEITPC
 8887 FORMAT('TIME: TOT ',F7.2,' INIT ',F7.2,' SCF',F7.2,
     1  'HCJK ',F7.2,' %HCJK/SCF',F7.2)
      CALL TRANSF(T1,T,TM,CORE(IC3),CORE(IC4),NBASIS)
      CALL TRANSF(T1,H,P3,CORE(IC3),CORE(IC4),NBASIS)
      IF(IPRNT.GE.4)CALL OUTTM(P3,NTRI,NBASIS,6,'HM MATRIX')
      CALL ENRGIA(FI,TM,P3,ZJM,ZKM,MOTYPE,OCC)
      WRITE(6,60)ETOT,ESCF,EONE,ETWO,EKIN,EPOT,VIR,SQDIF
      WRITE(6,80)OFDMAX,OFSMAX
      IF(IPRNT.GE.2)
     *CALL OUTMX(FL,NBASIS,NBASIS,6,'MO LAGRANGIAN MATRIX')
C     CALL OUTMX(T1,NBASIS,NBASIS,6,'C MATRIX')
C
C OUTPUT RESULTS FOR GVB
C
      IF (NPAIR.GT.0)CALL OUTGVB(T1,S,MOTYPE,P1,P2)
C
C OUTPUT RESULTS FOR PEMCSCF
C
      IF (IPEX.EQ.1) CALL OUTPEX
C
C FORM DENSITY MATRICES
C
      CALL DMATCL(T1,P1,OCC,NBASIS,1,NDOCC,MOTYPE)
      IF (IPRNT.GT.1)CALL OUTTM(P1,NTRI,NBASIS,6,'P DOC MATRIX')
      CALL DMATOP(T1,P2,OCC,NBASIS,NFIRST,NLAST,MOTYPE)
      IF (IPRNT.GT.1)CALL OUTTM(P2,NTRI,NBASIS,6,'P SOC MATRIX')
      CALL AADD(NTRI,P1,P2,P2)
      IF (IPRNT.GT.1)CALL OUTTM(P2,NTRI,NBASIS,6,'P TOT MATRIX')
C
C SPECIAL FOR 3X3 CASSCF
C
      IF(ICAS.EQ.1)THEN
      CALL CASROT(ZETA,MOPEX,T2,T1,NBASIS)
      IPRNT1=IPRNT
      IPRNT=1
      CALL UPDGVB(S1,S2,HM,ZJM,ZKM,ITER,MOTYPE,MOPOS,P3
     1    ,CORE(IC17),CORE(IC18),CORE(IC19),CORE(IC20))
      CALL OUTMX(T1,NBASIS,NBASIS,6,'CORRECT C MATRIX')
      CALL CASROT(ZETA,MOPEX,T2,T1,NBASIS)
      ICAS=0
      CALL UPDGVB(S1,S2,HM,ZJM,ZKM,ITER,MOTYPE,MOPOS,P3
     1    ,CORE(IC17),CORE(IC18),CORE(IC19),CORE(IC20))
      ICAS=1
      IPRNT=IPRNT1
      END IF
C
C OUTPUT TO TAPE30
C
      IF(IFIELD.EQ.0)
     *CALL OUT30(T1,CORE(IC4),FL,MOTYPE,CORE(IC3),SH,EIGENV,FI)
C
C DO C.I.
C
      IF(NPAIR.EQ.1)
     1 CALL HAMILT(HM,ZJM,ZKM,P3,MOTYPE,MOPOS)
C
C EVALUATE DIPOLE MOMENT
C
      CALL BASSET(T2)
      CALL MATMUL(NBASIS,NBASIS,T2,T1,SH,1)
      CALL DMATCL(SH,P1,OCC,NBASIS,1,NDOCC,MOTYPE)
      CALL DMATOP(SH,P2,OCC,NBASIS,NFIRST,NLAST,MOTYPE)
      CALL AADD(NTRI,P1,P2,P )
C2-25-89    IF(IFIELD.EQ.1)WRITE(16,*)ETOT,S1,S2
      CALL CENTER(1)
      IF(IFIELD.EQ.0)THEN
      CALL DIPOLE(P,P1,P2,P3,1)
      ELSE
      CALL DIPOL1(P,P1,P2,P3,1,OCC,0)
      END IF
      RETURN
C
C OUT OF MEMORY
C
 399  WRITE(6,9) ICMAX,MAXCOR
      WRITE(3,9) ICMAX,MAXCOR
      STOP
      END
      SUBROUTINE OCBSE(T1,T2,SH,X,MOTYPE,MAP,F,FI,E,ZJM,ZKM,AM,BM,CM,DM
     1 ,MOPOS,ITER,EIGENV,CORE,ICORE)
C
C GENERATE DATA FOR OCBSE FOR EACH SHELL
C
      IMPLICIT REAL*8 (A-H,O-Z)
      COMMON/BASIS/NBASIS,NTRI,NSYM,NBFAO,NBFSO,NBATRI
      COMMON/ENRGY/ESCF,ENUC,TOL,NITER,IDUM,EKIN,EONE,ETOT,ETWO,EPOT,VIR
      COMMON/LIMIT/MAXBAS,MAXBUF,MAXBF2,MAXBF4,MAXCOR,NCRUSD
      COMMON/SIGNS/IOFF(256),IPRNT
      COMMON/SYMMS/IDEG(10),NDEG(10),LSYM(10)
      COMMON/TAPES/ITAP34,ITAP36
      COMMON/ZIJKL/IJKLA,IJKLM
      COMMON/ZNELE/NDOCC,NSOCC,IREAD,IWF,NSHELL,NFIRST,NLAST
      COMMON/ZNSTT/NST,MXCOEF
      COMMON/ZSYMM/IDOCC(10),ISOCC(10)
      PARAMETER(MAXSHL=20)
      COMMON/ZZGEN/ALFA(MAXSHL,MAXSHL),BETA(MAXSHL,MAXSHL),OCC(MAXSHL)
     1 ,NOMO(MAXSHL),ISHT(MAXSHL),IGVB,ISGVB,IBEGIN(MAXSHL)
      COMMON/ZZGVB/NPAIR,IIGVB(3,2),IWPAIR(MAXSHL)
      DIMENSION T1(NBASIS,*),T2(NBASIS,*),MOTYPE(*),MAP(*)
      DIMENSION F(*),FI(NTRI,*),E(*),ZJM(NTRI,*),ZKM(NTRI,*)
      DIMENSION AM(*),BM(*),CM(NBASIS,*),DM(NBASIS,*),MOPOS(*)
      DIMENSION SH(NBASIS,*),X(NBASIS,*),CORE(*),ICORE(*),EIGENV(NBASIS)
      DATA ZERO,ONE,TWO/0.0D0,1.0D0,2.0D0/
    9 FORMAT(2X,' REQUIRED MEMORY EXCEEDS MAXCOR '/
     1          2X,' ICMAX = ',I10,5X,' MAXCOR = ',I10)
C
C LOOP SYMMETRIES
C
      DO 1 I=1,NST
      IF(IPRNT.GE.5)WRITE(6,*)' OCBSE FOR SYMMETRY ',I
      MBASIS=NDEG(I)
C NO BASIS FUNCTIONS OF THIS SYMMETRY
      IF(MBASIS.EQ.0)GOTO 1
      MDOCC=IDOCC(I)
      MSOCC=ISOCC(I)
      MTRI=IOFF(MBASIS+1)
      MFIRST=MDOCC+1
      MLAST=MDOCC+MSOCC
C NO OCCUPIED MOS IN THIS SYMMETRY
      IF(MLAST.EQ.0)GOTO 1
      MB2=MBASIS*MBASIS
C MOTYPE
      IA1=1
      IC1=1
      ID=IDEG(I)
      DO 2 J=1,MBASIS
    2 ICORE(IA1+J-1)=MOTYPE(ID+J)
      IC2=INT((MBASIS+1)/2)+IC1
C T1
      CALL GETMX(NBASIS,MBASIS,T1,CORE(IC2),ID+1)
      IC3=IC2+MB2
C SH
      CALL GETMX(NBASIS,MBASIS,SH,CORE(IC3),ID+1)
      IC4=IC3+MB2
C X
      CALL GETMX(NBASIS,MBASIS,X ,CORE(IC4),ID+1)
      MMM=MTRI*NSHELL
      MMM1=MTRI*NSOCC
      IC5=IC4+MB2
      IC6=IC5+MMM
      IC7=IC6+MMM1
C FI,ZJM,ZKM
      DO 3 K=1,NSHELL
               IC5A=IC5+(K-1)*MTRI
    3          CALL GETTM(NBASIS,MBASIS,FI(1,K),CORE(IC5A),ID+1,CM,DM)
      DO 4 K=1,NSOCC
               IC6A=IC6+(K-1)*MTRI
               IC7A=IC7+(K-1)*MTRI
               CALL GETTM(NBASIS,MBASIS,ZJM(1,K),CORE(IC6A),ID+1,CM,DM)
    4          CALL GETTM(NBASIS,MBASIS,ZKM(1,K),CORE(IC7A),ID+1,CM,DM)
      IC8=IC7+MMM1
      IC9=IC8+NBASIS
      ICMAX=IC9+NCRUSD
      IF(ITER.EQ.1)WRITE(3,*)'ICMAX IN OCBSE',ICMAX
      IF(ICMAX.GT.MAXCOR)GOTO 399
      IF(IPRNT.LT.6)GOTO 6767
      WRITE(6,*)'MDOCC,MSOCC,MBASIS,MTRI,MFIRST,MLAST',
     1 MDOCC,MSOCC,MBASIS,MTRI,MFIRST,MLAST
      WRITE(6,*)'ID+1',ID+1
      WRITE(6,*)'MOTYPE/S',(MOTYPE(ID+L),L=1,MBASIS)
 6767 CONTINUE
C.................T1...........SH........X.........MOTYPE
      CALL SOCBSE(CORE(IC2),T2,CORE(IC3),CORE(IC4),CORE(IC1),MAP
C.........FI..........ZJM.......ZKM
     1 ,F,CORE(IC5),E,CORE(IC6),CORE(IC7),AM,BM,CM,DM
C
     1 ,MBASIS,MTRI,MDOCC,MSOCC,MFIRST,MLAST,ID+1,MOPOS,EIGENV,ITER)
C.................................T1
      CALL PUTMX(NBASIS,MBASIS,T1,CORE(IC2),ID+1)
    1 CONTINUE
C
C END LOOP SYMMETRIES
C
      IF(IPRNT.GE.2)CALL OUTMX(T1,NBASIS,NBASIS,6,'OCBSE T1 MATRIX')
      RETURN
  399 CONTINUE
      WRITE(6,9) ICMAX,MAXCOR
      WRITE(3,9) ICMAX,MAXCOR
      STOP
      END
      SUBROUTINE SOCBSE(T1,T2,SH,X,MOTYPE,MAP,F,FI,E,ZJM,ZKM,AM,BM,CM,DM
     1 ,NBASIS,NTRI,NDOCC,NSOCC,NFIRST,NLAST,ID,MOPOS,EIGENV,ITER)
C
C OCBSE AFTER GODDARD
C
      IMPLICIT REAL*8 (A-H,O-Z)
      COMMON/BASIS/NNN111,NNN1,NSYM,NBFAO,NBFSO,NBATRI
      COMMON/ENRGY/ESCF,ENUC,TOL,NITER,IDUM,EKIN,EONE,ETOT,ETWO,EPOT,VIR
      COMMON/LIMIT/MAXBAS,MAXBUF,MAXBF2,MAXBF4,MAXCOR,NCRUSD
      COMMON/SIGNS/IOFF(256),IPRNT
      COMMON/SYMMS/IDEG(10),NDEG(10),LSYM(10)
      COMMON/TAPES/ITAP34,ITAP36
      COMMON/ZIJKL/IJKLA,IJKLM
      COMMON/ZNELE/NNN11,NNN22,IREAD,IWF,NSHELL,NNN333,NNN33
      COMMON/ZZMXO/IJDIM,IJMAX,NBL
      PARAMETER(MAXSHL=20)
      COMMON/ZZGEN/ALFA(MAXSHL,MAXSHL),BETA(MAXSHL,MAXSHL),OCC(MAXSHL)
     1 ,NOMO(MAXSHL),ISHT(MAXSHL),IGVB,ISGVB,IBEGIN(MAXSHL)
      COMMON/ZZGVB/NPAIR,IIGVB(3,2),IWPAIR(MAXSHL)
      LOGICAL XXA,XXB
      DIMENSION T1(NBASIS,*),T2(NBASIS,*),MOTYPE(*),MAP(*)
      DIMENSION F(*),FI(NTRI,*),E(*),ZJM(NTRI,*),ZKM(NTRI,*)
      DIMENSION AM(*),BM(*),CM(NBASIS,*),DM(NBASIS,*),MOPOS(*)
      DIMENSION SH(NBASIS,*),X(NBASIS,*)
      DIMENSION MAPA(50),EIGENV(NBASIS)
      DATA ZERO,ONE,TWO/0.0D0,1.0D0,2.0D0/
      IF(IPRNT.LE.4)GOTO 404
      WRITE(6,*)'NSHELL,NLAST,NBASIS=',NSHELL,NLAST,NBASIS
      WRITE(6,*)'NDOCC,NSOCC,NTRI',NDOCC,NSOCC,NTRI
      CALL OUTMX(T1,NBASIS,NBASIS,6,'T1 OMATRIX')
      CALL OUTMX(SH,NBASIS,NBASIS,6,'SH OMATRIX')
      CALL OUTMX(X ,NBASIS,NBASIS,6,'X  OMATRIX')
      DO 403 I=1,NSHELL
  403          CALL OUTTM(FI(1,I),NTRI,NBASIS,6,'FI OMATRIX')
      DO 408 I=1,NNN22
               CALL OUTTM(ZJM(1,I),NTRI,NBASIS,6,'ZJM OMATRIX')
               CALL OUTTM(ZKM(1,I),NTRI,NBASIS,6,'ZKM OMATRIX')
  408 CONTINUE
      WRITE(6,*)'O MOTYPE',(MOTYPE(L),L=1,NBASIS)
  404 CONTINUE
      CALL AZERO(DM,NBASIS*NBASIS)
      IDONE=0
C
C FOR EACH SHELL TYPE
C
      DO 601 ISH=1,NSHELL
      IF(IPRNT.GE.5)WRITE(6,*)'***** OCBSE FOR SHELL ',ISH
      IYES=0
      DO 987 I=1,NBASIS
 987  IF(MOTYPE(I).EQ.ISH)IYES=IYES+1
      IF(IPRNT.GE.5)WRITE(6,*)'IYES=',IYES
C THIS SHELL IS NOT IN CURRENT SYMMETRY
      IF(IYES.EQ.0)GOTO 601
      CALL AZERO(T2,NBASIS*NBASIS)
      NTOT=0
      NIJ=0
      DO 602 I=1,NBASIS
      II=MOTYPE(I)
      XXA=II.NE.ISH
      XXB=I.LE.NLAST
      IF(XXA.AND.XXB)GOTO602
      NTOT=NTOT+1
      MAP(NTOT)=I
      DO 6602 J=1,I
      JJ=MOTYPE(J)
      IJ=IOFF(I)+J
      IF(JJ.EQ.ISH.OR.J.GT.NLAST)THEN
      NIJ=NIJ+1
      F(NIJ)=FI(IJ,ISH)
      IF(IYES.EQ.1 .AND. ISHT(ISH).NE.1)THEN
               IF(I.NE.MAP(1) .AND. J.NE.MAP(1))THEN
               NK=MAP(1)+ID-1
               NUK=MOPOS(NK)
               TERM1=BETA(ISH,ISH)*(ZJM(IJ,NUK)-ZKM(IJ,NUK))
               TERM2=TWO*(ALFA(ISH,ISH)+BETA(ISH,ISH))*ZKM(IJ,NUK)
               F(NIJ)=F(NIJ)+TERM1+TERM2
               END IF
      END IF
      END IF
 6602 CONTINUE
  602 CONTINUE
      IF(NIJ.EQ.0)GOTO 601
      IF(IPRNT.GT.3)CALL OUTTM(F,NTOT,NTOT,6,'FP MATRIX')
      CALL RSP(NTOT,NTOT,NIJ,F,E,1,CM,AM,BM)
C IF CLOSED SHELL, KEEP EIGENVALUES
      IF(ISH.EQ.1)THEN
               DO 7654 IH=1,NBASIS
 7654                  EIGENV(ID+IH-1)=E(IH)
      END IF
      IF(IPRNT.GT.3)CALL OUTMX(CM,NTOT,NTOT,6,'NEW U MATRIX')
      IF(IPRNT.GT.3)CALL OUTMX(E,NTOT,1,6,'NEW E MATRIX')
      CALL WIDE(T2,CM,NTOT,MAP,NBASIS)
      IF(IPRNT.GT.3)CALL OUTMX(T2,NBASIS,NBASIS,6,'NEW U" MATRIX')
      CALL MATMUL(NBASIS,NBASIS,T1,T2,CM,1)
      IF(IPRNT.GT.3)CALL OUTMX(CM,NBASIS,NBASIS,6,'NEW CM MATRIX')
      IF(IPRNT.GE.6)WRITE(6,*)'MAP',(MAP(I),I=1,NTOT)
      IF(ISHT(ISH).EQ.1.OR.ISHT(ISH).EQ.2)THEN
      J=0
      DO 1401 JJ=1,NBASIS
      IF(MOTYPE(JJ).NE.ISH)GOTO1401
      J=J+1
      JA=MAP(J)
C02-02-89   DO 1400 I=1,NBASIS
      DO 1400 I=1,NBASIS
      DM(I,JA)=CM(I,JA)
 1400 CONTINUE
C02-02-89   1400 ADDED TO MAINTAIN F77 STANDARD
 1401 CONTINUE
      ELSE
      DO 1402 I=1,NBASIS
      IA=MAP(1)
 1402 DM(I,IA)=CM(I,IA)
      END IF
C     IF(ISH.EQ.1)THEN
C     IDONE=1
C     DO 1303 I=NLAST+1,NBASIS
C     DO 1303 J=1,NBASIS
C1303 DM(J,I)=CM(J,I)
C     END IF
      IF(IPRNT.GT.3)CALL OUTMX(DM,NBASIS,NBASIS,6,'DM U MATRIX')
      IF(IPRNT.GT.3)CALL OUTMX(T1,NBASIS,NBASIS,6,'NEW C MATRIX')
  601 CONTINUE
C
C END LOOP OVER SHELLS
C
C     IF(IDONE.EQ.0)THEN
      DO 1403 I=NLAST+1,NBASIS
      DO 1403 J=1,NBASIS
 1403 DM(J,I)=T1(J,I)
C     END IF
      IF(IPRNT.GT.3)CALL OUTMX(DM,NBASIS,NBASIS,6,'DM U MATRIX')
      CALL MATMUL(NBASIS,NBASIS,SH,DM,T2,1)
      IF(IPRNT.GT.4)CALL OUTMX(T2,NBASIS,NBASIS,6,' T2 MATRIX')
      CALL SCHORT(T2,NBASIS,NFIRST,NBASIS,AM)
      CALL MATMUL(NBASIS,NBASIS,X,T2,T1,1)
      IF(IPRNT.GE.3)CALL OUTMX(T1,NBASIS,NBASIS,6,'NEW C MATRIX')
      RETURN
      END
      SUBROUTINE OUTGVB(T1,S,MOTYPE,P1,P2)
C
C OUTPUT RESULTS FROM A GVB CALCULATION
C
      IMPLICIT REAL*8 (A-H,O-Z)
      DIMENSION T1(NBASIS,*),S(*),MOTYPE(*),P1(*),P2(*)
      COMMON/BASIS/NBASIS,NTRI,NSYM,NBFAO,NBFSO,NBATRI
      COMMON/ENRGY/ESCF,ENUC,TOL,NITER,IDUM,EKIN,EONE,ETOT,ETWO,EPOT,VIR
      COMMON/LIMIT/MAXBAS,MAXBUF,MAXBF2,MAXBF4,MAXCOR,NCRUSD
      COMMON/SIGNS/IOFF(256),IPRNT
      COMMON/SYMMS/IDEG(10),NDEG(10),LSYM(10)
      COMMON/ZNELE/NDOCC,NSOCC,IREAD,IWF,NSHELL,NFIRST,NLAST
      COMMON/ZZMXO/IJDIM,IJMAX,NBL
      PARAMETER(MAXSHL=20)
      COMMON/ZZGEN/ALFA(MAXSHL,MAXSHL),BETA(MAXSHL,MAXSHL),OCC(MAXSHL)
     1 ,NOMO(MAXSHL),ISHT(MAXSHL),IGVB,ISGVB,IBEGIN(MAXSHL)
      COMMON/ZZGVB/NPAIR,IIGVB(3,2),IWPAIR(MAXSHL)
      COMMON/ZZPEX/PEXC(99),INDPEX(20,99),NCPEX,IPEX,MOPEX(20),NORPEX
     1 ,IICO
      DATA ZERO,ONE,TWO,FOUR /0.0D0,1.D0,2.D0,4.D0/PT5/0.5D0/PT25/.25D0/
      DATA THREE/3.D0/
  901 FORMAT(/5X,'******* GVB ORBITALS *****'
     1       /5X,'SHELL',T15,'CI COEFFICIENT ',T41,'OCCUPANCY'/)
  902 FORMAT(I8,2F25.16)
  903 FORMAT('    OVERLAP = ',F10.5/)
      WRITE(6,901)
      DO 400 NP=1,NPAIR
                       I22=IIGVB(NP,1)
                       I33=IIGVB(NP,2)
                       I2=MOTYPE(I22)
                       I3=MOTYPE(I33)
                       S1=DSQRT(OCC(I2)/TWO)
                       S2=DSQRT(OCC(I3)/TWO)
               WRITE(6,902)I2,+S1,OCC(I2)
               WRITE(6,902)I3,-S2,OCC(I3)
               S11=DSQRT(S1)
               S22=DSQRT(S2)
               S12=ONE/DSQRT(S1+S2)
               DO 1 I=1,NBASIS
                       P1(I)=S11*T1(I,I22)+S22*T1(I,I33)
    1                  P2(I)=S11*T1(I,I22)-S22*T1(I,I33)
               CALL ESCVEC(S12,P1,NBASIS)
               CALL ESCVEC(S12,P2,NBASIS)
               OVER=ZERO
               DO 2 I=1,NBASIS
               DO 2 J=1,NBASIS
                       IJ=IOFF(MAX0(I,J))+MIN0(I,J)
    2                  OVER=OVER+P1(I)*P2(J)*S(IJ)
               WRITE(6,903)OVER
 400  CONTINUE
C
C CONVERT GVB TO PEMCSCF
C
      NCONF=2**NPAIR
      NCPEX=NCONF
      NORPEX=2*NPAIR
      DO 5 NP=1,NPAIR
               MOPEX(2*NP-1)=IIGVB(NP,1)
    5          MOPEX(2*NP  )=IIGVB(NP,2)
      GOTO (501,502,503),NPAIR
 501  CONTINUE
      C1=+DSQRT(OCC(MOTYPE(IIGVB(1,1)))/TWO)
      C2=-DSQRT(OCC(MOTYPE(IIGVB(1,2)))/TWO)
      PEXC(1)=C1
      PEXC(2)=C2
      INDPEX(1,1)=1
      INDPEX(2,2)=1
      GOTO 550
 502  CONTINUE
      ICONF=0
      DO 12 I=1,2
      COEF=     DSQRT(OCC(MOTYPE(IIGVB(1,I)))/TWO)
      DO 12 J=1,2
      COEF=COEF*DSQRT(OCC(MOTYPE(IIGVB(2,J)))/TWO)
      ICONF=ICONF+1
      PEXC(ICONF)=COEF
      INDPEX(  I,ICONF)=1
      INDPEX(2+J,ICONF)=1
   12 CONTINUE
      GOTO 550
 503  CONTINUE
      ICONF=0
      DO 13 I=1,2
      COEF=     DSQRT(OCC(MOTYPE(IIGVB(1,I)))/TWO)
      DO 13 J=1,2
      COEF=COEF*DSQRT(OCC(MOTYPE(IIGVB(2,J)))/TWO)
      DO 13 K=1,2
      COEF=COEF*DSQRT(OCC(MOTYPE(IIGVB(3,K)))/TWO)
      ICONF=ICONF+1
      PEXC(ICONF)=COEF
      INDPEX(  I,ICONF)=1
      INDPEX(2+J,ICONF)=1
      INDPEX(4+K,ICONF)=1
   13 CONTINUE
  550 CONTINUE
C
C THAT'S IT. IT'S PEMCSCF NOW
C
      IPEX=1
      RETURN
      END
      SUBROUTINE OUTPEX
      IMPLICIT REAL*8 (A-H,O-Z)
      COMMON/BASIS/NBASIS,NTRI,NSYM,NBFAO,NBFSO,NBATRI
      COMMON/ENRGY/ESCF,ENUC,TOL,NITER,IDUM,EKIN,EONE,ETOT,ETWO,EPOT,VIR
      COMMON/SIGNS/IOFF(256),IPRNT
      COMMON/SYMMS/IDEG(10),NDEG(10),LSYM(10)
      COMMON/ZNELE/NDOCC,NSOCC,IREAD,IWF,NSHELL,NFIRST,NLAST
      COMMON/ZZMXO/IJDIM,IJMAX,NBL
      PARAMETER(MAXSHL=20)
      COMMON/ZZGEN/ALFA(MAXSHL,MAXSHL),BETA(MAXSHL,MAXSHL),OCC(MAXSHL)
     1 ,NOMO(MAXSHL),ISHT(MAXSHL),IGVB,ISGVB,IBEGIN(MAXSHL)
      COMMON/ZZGVB/NPAIR,IIGVB(3,2),IWPAIR(MAXSHL)
      COMMON/ZZPEX/PEXC(99),INDPEX(20,99),NCPEX,IPEX,MOPEX(20),NORPEX
     1 ,IICO
      DATA ZERO,ONE,TWO,FOUR /0.0D0,1.D0,2.D0,4.D0/PT5/0.5D0/PT25/.25D0/
      DATA THREE/3.D0/
  911 FORMAT(' CONFIGURATION ',I2,' COEF = ',F15.7,
     1       ' IS ',20I2)
  912 FORMAT(/'***** PEMCSCF **'/' NUMBER OF CORRELATED ORBITALS = ',I3/
     1        ' NUMBER OF CONFIGURATIONS      = ',I3/)
  913 FORMAT(/'CORRESPONDING ORBITALS ARE',20I3/)
      WRITE(6,912)NORPEX,NCPEX
      DO 801 I=1,NCPEX
  801 WRITE(6,911)I,PEXC(I),(INDPEX(IU,I),IU=1,NORPEX)
      WRITE(6,913)(MOPEX(IU),IU=1,NORPEX)
      RETURN
      END
      SUBROUTINE LVSHFT(F,MOTYPE,ITER)
C
C APPLY LEVEL SHIFT TO FOCK MATRICES
C
      IMPLICIT REAL*8 (A-H,O-Z)
      COMMON/BASIS/NBASIS,NTRI,NSYM,NBFAO,NBFSO,NBATRI
      COMMON/ENRGY/ESCF,ENUC,TOL,NITER,IDUM,EKIN,EONE,ETOT,ETWO,EPOT,VIR
      COMMON/SIGNS/IOFF(256),IPRNT
      COMMON/ZNELE/NDOCC,NSOCC,IREAD,IWF,NSHELL,NFIRST,NLAST
      COMMON/ZZLVS/ZLVS,NLVS,NROOT,NWF
      DIMENSION MOTYPE(NBASIS),F(NTRI,NSHELL)
      IF(NLVS.EQ.0)GOTO 3
C LEVEL SHIFT ONLY IF ITER IS LESS THAT NLVS ITERATIONS
      IF(ITER.GT.NLVS)RETURN
C     ZLVS1=ZLVS/(NITER+5)
C     ZLVS=ZLVS-ZLVS1
      NN=MOD(ITER,NLVS+5)+1
      IF(NN.GT.NLVS)RETURN
    3 CONTINUE
      DO 1 I=1,NBASIS
               II=IOFF(I+1)
               IF(MOTYPE(I).NE.NBASIS)GOTO 1
               DO 2 J=1,NSHELL
                       F(II,J)=F(II,J)+ZLVS
    2                  CONTINUE
    1          CONTINUE
      RETURN
      END
      SUBROUTINE PULAY(FL,FI,MOTYPE,B,FLST,NDIIS,NDIIS1
     1  ,ITER,T1,T2,CM,DM ,P3,SH,X)
C
C PERFORM DIIS EXTRAPOLATION
C
      IMPLICIT REAL*8 (A-H,O-Z)
      COMMON/BASIS/NBASIS,NTRI,NSYM,NBFAO,NBFSO,NBATRI
      COMMON/ENRGY/ESCF,ENUC,TOL,NITER,IDUM,EKIN,EONE,ETOT,ETWO,EPOT,VIR
      COMMON/LIMIT/MAXBAS,MAXBUF,MAXBF2,MAXBF4,MAXCOR,NCRUSD
      COMMON/SIGNS/IOFF(256),IPRNT
      COMMON/SYMMS/IDEG(10),NDEG(10),LSYM(10)
      COMMON/TAPES/ITAP34,ITAP36
      COMMON/ZIJKL/IJKLA,IJKLM
      COMMON/ZNELE/NDOCC,NSOCC,IREAD,IWF,NSHELL,NFIRST,NLAST
      COMMON/ZZMXO/IJDIM,IJMAX,NBL
      PARAMETER(MAXSHL=20)
      COMMON/ZZGEN/ALFA(MAXSHL,MAXSHL),BETA(MAXSHL,MAXSHL),OCC(MAXSHL)
     1 ,NOMO(MAXSHL),ISHT(MAXSHL),IGVB,ISGVB,IBEGIN(MAXSHL)
      COMMON/ZZGVB/NPAIR,IIGVB(3,2),IWPAIR(MAXSHL)
      REAL*16 DETERM,DET
      DIMENSION B(NDIIS1,*),FLST(NTRI,NDIIS,*),CM(NBASIS,*)
      DIMENSION DM(NBASIS,*)
      DIMENSION T1(NBASIS,NBASIS),T2(NBASIS,NBASIS)
      DIMENSION P3(NTRI),MOTYPE(*)
      DIMENSION FI(NTRI,*),FL(NBASIS,*),SH(NBASIS,*)
      DIMENSION LLISTA(20),COEF(20,2)  ,X(NBASIS,NBASIS)
      DATA ZERO,ONE,TWO,FOUR /0.0D0,1.D0,2.D0,4.D0/PT5/0.5D0/PT25/.25D0/
      DATA THREE/3.D0/
      DATA MDIIS/0/   DLIM/1.0Q-76/    ESCV/1.0D+4/
      NERRV=IOFF(NSHELL+1)
      MDIIS=MDIIS+1
      IF(MDIIS.GT.NDIIS)MDIIS=1
      DO 5 I=1,NDIIS-1
    5 LLISTA(I)=LLISTA(I+1)
      LLISTA(NDIIS)=MDIIS
      IF(IPRNT.GE.6)WRITE(6,'(10I3)')(LLISTA(I),I=1,NDIIS)
C
C GET AO-BASIS C MATRIX IN ORT-AO-BASIS
C
      CALL MATMUL(NBASIS,NBASIS,SH,T1,T2,1)
      CALL AMOVE(T2,T1,NBASIS*NBASIS)
C
C GENERATE ERROR VECTORS FROM INDEPENDENT BLOCKS OF THE LAGRANGIAN
C
      IF(IPRNT.GE.0)THEN
      CALL OUTMX(FL,NBASIS,NBASIS,6,'LAGRANGIAN-MO')
      END IF
      NNSH=0
      DO 2000 IISH=1,NSHELL
      DO 2000 JSH=1,IISH
      ISH=IISH
      IF(IISH.EQ.JSH)ISH=NBASIS
      CALL AZERO(T2,NBASIS*NBASIS)
      NNSH=NNSH+1
      IJ=0
      DO 2 I=1,NBASIS
      IT=MOTYPE(I)
      DO 2 J=1,I
      JT=MOTYPE(J)
      IF((IT.NE.ISH.OR.JT.NE.JSH).AND.(IT.NE.JSH.OR.JT.NE.ISH))GOTO2
      T2(I,J)=FL(J,I)-FL(I,J)
      T2(J,I)=T2(I,J)
    2 CONTINUE
      CALL SQTOLI(NBASIS,T2,P3,NBASIS)
      IF(IPRNT.GE.0)THEN
      WRITE(6,*)'NNSH=',NNSH
      CALL OUTTM(P3,NTRI,NBASIS,6,'ERROR MATRIX MO')
      END IF
      EM=ABS(T2(1,1))
      DO 7 I=1,NBASIS
      DO 7 J=1,I
      IF(ABS(T2(I,J)).GT.EM)EM=ABS(T2(I,J))
  7   CONTINUE
      IF(IPRNT.GE.6)
     *WRITE(6,*)'MAX ERR MO = ',EM
C
C TRANSFORM ERROR VECTOR TO ORTHOGONAL AO BASIS
C
      CALL BACKTF(T1,P3,P3,CM,DM,NBASIS)
      IF(IPRNT.GE.6)
     *CALL OUTTM(P3,NTRI,NBASIS,6,'ERROR MATRIX AO')
      EM=ABS(P3(1))
      DO 8 IJ=1,NTRI
      IF(ABS(P3(IJ)).GT.EM)EM=ABS(P3(IJ))
   8  CONTINUE
      IF(IPRNT.GE.6)
     *WRITE(6,*)'MAX ERR AO = ',EM
C
C STORE ERROR VECTORS
C
      CALL AMOVE(P3,FLST(1,MDIIS,NSHELL+NNSH),NTRI)
 2000 CONTINUE
C
C STORE FOCK MATRICES
C
      IF(IPRNT.GE.6)
     *WRITE(6,*)' DIIS ---  MDIIS,NDIIS,NDIIS1 =',MDIIS,NDIIS,NDIIS1
      DO 1 I=1,NSHELL
      IF(IPRNT.GE.6)
     *CALL OUTTM(FI(1,I),NTRI,NBASIS,6,'FI MATRIX')
      CALL AMOVE(FI(1,I),FLST(1,MDIIS,I),NTRI)
C
C BACKTRANSFORM F MATRICES TO AO BASIS
C
    1 CALL BACKTF(T1,FLST(1,MDIIS,I),FLST(1,MDIIS,I),CM,DM,NBASIS)
C
C RETURN IF NOT ENOUGH ERROR VECTORS
C
      IF(ITER.LT.NDIIS)THEN
               CALL MATMUL(NBASIS,NBASIS,X,T1,T2,1)
               CALL AMOVE(T2,T1,NBASIS*NBASIS)
               RETURN
      END IF
C
C WE HAVE ENOUGH POINTS, SO FORM B MATRIX
C
      CALL AZERO(B,NDIIS1*(NDIIS1+1))
C     B(1,1)=ZERO
C     B(1,NDIIS1+1)=-ONE
C     DO 11 I=2,NDIIS1
C     B(I,NDIIS1+1)=ZERO
C     B(I,1)=-ONE
C 11  B(1,I)=-ONE
C
C FOR EACH PAIR OF BLOCKS FILL B MATRIX
C
      NNSH=0
      DO 55 ISH=1,NSHELL
      DO 55 JSH=1,ISH
      NNSH=NNSH+1
      K=(NDIIS+1)*(ISH-1)+1
      L=(NDIIS+1)*(JSH-1)+1
      DO 12 I=1,NDIIS
      II=LLISTA(I)
      DO 12 J=1,I
      JJ=LLISTA(J)
      KPI=K+I
      LPJ=L+J
      KPJ=K+J
      LPI=L+I
      BIJ       =DOT(FLST(1,II,NSHELL+NNSH),FLST(1,JJ,NSHELL+NNSH),NTRI)
C     IF(ISH.EQ.2)BIJ=BIJ*10
      B(KPI,LPJ)=BIJ
      B(KPJ,LPI)=B(KPI,LPJ)
      B(LPJ,KPI)=B(KPI,LPJ)
      B(LPI,KPJ)=B(KPJ,LPI)
   12 CONTINUE
   55 CONTINUE
      IF(IPRNT.GE.0)
     *WRITE(6,*)'B MATRIX NOT SCALED'
      IF(IPRNT.GE.0)
     *CALL MATOUT(B,NDIIS1,NDIIS1+1,NDIIS1,NDIIS1+1,6)
C
C SCALE B MATRIX
C
      IF(NSHELL.LE.1)THEN
      EL=ONE/B(2,2)
      ELSE
      EL=ONE/B(3+NDIIS,3+NDIIS)
      END IF
      CALL ESCVEC(EL,B,NDIIS1*(NDIIS1+1))
      DO 25 ISH=1,NSHELL
      K=(NDIIS+1)*(ISH-1)+1
      B(K,NDIIS1+1)=-ONE
      DO 11 I=1,NDIIS
      B(K+I,K)=-ONE
  11  B(K,K+I)=-ONE
  25  CONTINUE
C     DO 875 I=1,NDIIS
C     B(I+NDIIS+2,1)=-ONE
C 875 B(I+1,NDIIS+2)=-ONE
      IF(IPRNT.GE.0)
     *WRITE(6,*)'SCALED B-MATRIX'
      IF(IPRNT.GE.0)
     *CALL MATOUT(B,NDIIS1,NDIIS1+1,NDIIS1,NDIIS1+1,6)
C     CALL EXIT
C
C SOLVE SMALL SYSTEM OF LINEAR EQUATIONS
C
      CALL FLINQ(B,NDIIS1,NDIIS1,1,DETERM)
      DO 20 ISH=1,NSHELL
      K=(NDIIS+1)*(ISH-1)+1
      DO 40 I=1,NDIIS
   40 COEF(I,ISH)=B(I+K,NDIIS1+1)
      IF(IPRNT.GE.0)THEN
      CALL OUTMX(COEF(1,ISH),NDIIS,1,6,'COEFFICIENTS')
      WRITE(6,*)'LAG MULT = ',B(K,NDIIS+1)
      END IF
   20 CONTINUE
      IF(IPRNT.GE.6)THEN
      DO 24  J=1,NSHELL+NERRV
      DO 24  I=1,NDIIS
      WRITE(6,*)'SHELL ',J,'  NDIIS ',I
      CALL OUTTM(FLST(1,I,J),NTRI,NBASIS,6,'FOCK MATRICES-NDIIS  ')
 24   CONTINUE
      END IF
      IF(IPRNT.GE.6)
     *WRITE(6,*)'DETERM =', DETERM
      IF(ABS(DETERM).LT.DLIM)THEN
              WRITE(6,*)'DETERM TOO SMALL'
              WRITE(3,*)'DETERM TOO SMALL'
              STOP
      END IF
C
C GENERATE NEW AO FOCK MATRIX
C
      DO 33  ISH=1,NSHELL
      DO 33  IEL=1,NTRI
      A=ZERO
      DO 32  I=1,NDIIS
      II=LLISTA(I)
   32 A=A+COEF(I,ISH)*FLST(IEL,II,ISH)
   33 FI(IEL,ISH)=A
      DO 37 ISH=1,NSHELL
      IF(IPRNT.GE.6)
     *CALL OUTTM(FI(1,ISH),NTRI,NBASIS,6,'NEW FOCK MATRIX(GOOD-AO)')
C
C TRANSFORM NEW AO FOCK MATRIX TO MO BASIS
C
      CALL TRANSF(T1,FI(1,ISH),FI(1,ISH),CM,DM,NBASIS)
      IF(IPRNT.GE.6)
     *CALL OUTTM(FI(1,ISH),NTRI,NBASIS,6,'NEW FOCK MATRIX(GOOD-MO)')
   37 CONTINUE
C     IF(IPRNT.GE.6)THEN
C     DO 34 IEL=1,NTRI
C     A=ZERO
C     DO 35 I=1,NDIIS
C     II=LLISTA(I)
C  35 A=A+COEF(I)*FLST(IEL,II,NSHELL+1)
C  34 P3(IEL)=A
C     CALL OUTTM(P3,NTRI,NBASIS,6,'NEW ERROR MATRIX')
C     EM=ABS(P3(1))
C     DO 28 IJ=1,NTRI
C     IF(ABS(P3(IJ)).GT.EM)EM=ABS(P3(IJ))
C28   CONTINUE
C     WRITE(6,*)'NEW MAX ERR AO = ',EM
C     END IF
C
C BACKTRANSFORM C MATRIX TO AO BASIS
C
      CALL MATMUL(NBASIS,NBASIS,X,T1,T2,1)
      CALL AMOVE(T2,T1,NBASIS*NBASIS)
      RETURN
      END
      SUBROUTINE CASROT(ZETA,MOPEX,T2,T1,NBASIS)
      IMPLICIT REAL*8(A-H,O-Z)
      DIMENSION MOPEX(*),T2(NBASIS,*),T1(NBASIS,*)
      COSZ=COS(ZETA)
      SINZ=SIN(ZETA)
      M=MOPEX(1)
      N=MOPEX(2)
      DO 56 I=1,NBASIS
      T2(I,1)=COSZ*T1(I,M)+SINZ*T1(I,N)
  56  T2(I,2)=SINZ*T1(I,M)-COSZ*T1(I,N)
      CALL AMOVE(T2(1,1),T1(1,M),NBASIS)
      CALL AMOVE(T2(1,2),T1(1,N),NBASIS)
      RETURN
      END
      SUBROUTINE PULAYC(FL,FI,MOTYPE,B,FLST,NDIIS,NDIIS1
     1  ,MITER,T1,T2,CM,DM ,P3,SH,X,NB2)
C
C PERFORM DIIS EXTRAPOLATION FOR THE COUPOP
C P.PULAY, J. COMP. CHEM. 1982, 3, 556-560
C
      IMPLICIT REAL*8 (A-H,O-Z)
      COMMON/BASIS/NBASIS,NTRI,NSYM,NBFAO,NBFSO,NBATRI
      COMMON/ENRGY/ESCF,ENUC,TOL,NITER,IDUM,EKIN,EONE,ETOT,ETWO,EPOT,VIR
      COMMON/LIMIT/MAXBAS,MAXBUF,MAXBF2,MAXBF4,MAXCOR,NCRUSD
      COMMON/SIGNS/IOFF(256),IPRNT
      COMMON/SYMMS/IDEG(10),NDEG(10),LSYM(10)
      COMMON/ZNELE/NDOCC,NSOCC,IREAD,IWF,NSHELL,NFIRST,NLAST
      COMMON/ZZDII/IDUM1,NODIIS
      PARAMETER(MAXSHL=20)
      COMMON/ZZGEN/ALFA(MAXSHL,MAXSHL),BETA(MAXSHL,MAXSHL),OCC(MAXSHL)
     1 ,NOMO(MAXSHL),ISHT(MAXSHL),IGVB,ISGVB,IBEGIN(MAXSHL)
      COMMON/ZZGVB/NPAIR,IIGVB(3,2),IWPAIR(MAXSHL)
      COMMON/ZZOCB/IOCB
      REAL*16 DETERM,DET
      DIMENSION B(NDIIS1,*),FLST(NB2,NDIIS,*),CM(NBASIS,*)
      DIMENSION DM(NBASIS,*)
      DIMENSION T1(NBASIS,NBASIS),T2(NBASIS,NBASIS)
      DIMENSION P3(NTRI),MOTYPE(*)
      DIMENSION FI(NTRI,*),FL(NBASIS,*),SH(NBASIS,*)
      DIMENSION LLISTA(20),COEF(20)    ,X(NBASIS,NBASIS)
      DATA ZERO,ONE,TWO,FOUR /0.0D0,1.D0,2.D0,4.D0/PT5/0.5D0/PT25/.25D0/
      DATA THREE/3.D0/ ITER/0/ IEM/0/
      DATA MDIIS/0/   DLIM/0.0Q-00/    ESCV/1.0D+4/  ADJUST/1.0D+01/
C     DATA MDIIS/0/   DLIM/1.0Q-76/    ESCV/1.0D+4/  ADJUST/1.0D+01/
      EPSEM=10.D0**(-NODIIS)
      IOCB=1
      IF(ITER.EQ.0)WRITE(3,*)'EPSEM=',EPSEM
C
C GENERATE D(OAO) ; F(OAO) IS ALREADY THERE
C
      IF(IPRNT.GE.5)
     *CALL OUTTM(P3,NTRI,NBASIS,6,'TOTAL DENS MATR OAO')
      IF(IPRNT.GE.5)
     *CALL OUTTM(FI,NTRI,NBASIS,6,'TOTAL F    MATR OAO')
C
C GENERATE ERROR VECTOR
C
      CALL LITOSQ(NBASIS,P3,CM,NBASIS)
      CALL LITOSQ(NBASIS,FI,DM,NBASIS)
      CALL MATMUL(NBASIS,NBASIS,DM,CM,T2,1)
      CALL MATMUL(NBASIS,NBASIS,CM,DM,FL,1)
C     CALL ESCVEC(-ONE,FL,NBASIS*NBASIS)
C     CALL ADDMAT(NBASIS,T2,FL,T2)
      CALL SUBMAT(NBASIS,T2,FL,T2)
      IF(IPRNT.GE.5)
     *CALL OUTMX(T2,NBASIS,NBASIS,6,'ERROR MATRIX')
C
C LOOK FOR MAXIMUM ELEMENT
C
      EM=ABS(T2(1,1))
      DO 87 I=1,NBASIS
      DO 87 J=1,NBASIS
      IF(ABS(T2(I,J)).GT.EM)EM=ABS(T2(I,J))
  87  CONTINUE
C
C DO NOT BEGIN UNTIL CONDITIONS MET
C
      IF(IPRNT.GE.5)
     *WRITE(6,*)'ERRMAX = ',EM
      IF(IPRNT.GE.5)
     *WRITE(6,*)' DIIS ---  MDIIS,NDIIS,NDIIS1 =',MDIIS,NDIIS,NDIIS1
      IF(EM.LE.EPSEM .AND. IEM.NE.1)THEN
               WRITE(3,*)'BEGIN DIIS'
               WRITE(6,*)'BEGIN DIIS'
               IEM=1
      ELSE IF (IEM.NE.1) THEN
               RETURN
      END IF
C
C OK, THE FOCK MATRICES ARE BEING STORED
C
      IF(IPRNT.GE.5)
     *CALL OUTTM(FI,NTRI,NBASIS,6,'FI MATRIX')
      MDIIS=MDIIS+1
      ITER=ITER+1
      IF(MDIIS.GT.NDIIS)MDIIS=1
      DO 5 I=1,NDIIS-1
    5 LLISTA(I)=LLISTA(I+1)
      LLISTA(NDIIS)=MDIIS
      IF(IPRNT.GE.5)WRITE(6,'(10I3)')(LLISTA(I),I=1,NDIIS)
C
C STORE FOCK MATRIX
C
      CALL AMOVE(FI,FLST(1,MDIIS,1),NTRI)
C
C STORE ERROR VECTOR
C
      CALL AMOVE(T2,FLST(1,MDIIS,2),NB2)
C
C RETURN IF NOT ENOUGH ERROR VECTORS
C
      IF(ITER.LT.NDIIS)RETURN
      IOCB=0
C
C FORM B MATRIX
C
      B(1,1)=ZERO
      B(1,NDIIS1+1)=-ONE
      DO 11 I=2,NDIIS1
      B(I,NDIIS1+1)=ZERO
      B(I,1)=-ONE
  11  B(1,I)=-ONE
      DO 12 I=1,NDIIS
      II=LLISTA(I)
      DO 12 J=1,I
      JJ=LLISTA(J)
      B(I+1,J+1)=DOT(FLST(1,II,2),FLST(1,JJ,2),NBASIS*NBASIS)
   12 B(J+1,I+1)=B(I+1,J+1)
      IF(IPRNT.GE.5)
     *WRITE(6,*)'B MATRIX NOT SCALED'
      IF(IPRNT.GE.5)
     *CALL MATOUT(B,NDIIS1,NDIIS1+1,NDIIS1,NDIIS1+1,6)
C
C SCALE B MATRIX
C
      EL=B(2,2)
      DO 18 I=2,NDIIS1
      DO 18 J=2,NDIIS1
   18 B(I,J)=B(I,J)/EL*ADJUST
      IF(IPRNT.GE.5)
     *WRITE(6,*)'SCALED B-MATRIX'
      IF(IPRNT.GE.5)
     *CALL MATOUT(B,NDIIS1,NDIIS1+1,NDIIS1,NDIIS1+1,6)
C
C SOLVE SMALL SYSTEM OF LINEAR EQUATIONS
C
      CALL FLINQ(B,NDIIS1,NDIIS1,1,DETERM)
      IF(IPRNT.GE.5)
     *WRITE(6,*)'DETERM =', DETERM
      IF(ABS(DETERM).LT.DLIM)THEN
              WRITE(6,*)'DETERM TOO SMALL'
              WRITE(3,*)'DETERM TOO SMALL'
              STOP
      END IF
      DO 20 I=1,NDIIS
   20 COEF(I)=B(I+1,NDIIS1+1)
      IF(IPRNT.GE.5)
     *CALL OUTMX(COEF,NDIIS,1,6,'COEFFICIENTS')
      IF(IPRNT.GE.5)THEN
      J=1
      DO 243 I=1,NDIIS
      WRITE(6,*)'SHELL ',J,'  NDIIS ',I
      CALL OUTTM(FLST(1,I,J),NTRI,NBASIS,6,'OAO FOCK MATRICES ')
 243  CONTINUE
      END IF
C
C GENERATE NEW OAO FOCK MATRIX
C
      ISH=1
      DO 330 IEL=1,NTRI
      A=ZERO
      DO 331 I=1,NDIIS
      II=LLISTA(I)
  331 A=A+COEF(I)*FLST(IEL,II,ISH)
  330 FI(IEL,ISH)=A
      ISH=1
      IF(IPRNT.GE.5)
     *CALL OUTTM(FI(1,ISH),NTRI,NBASIS,6,'NEW OAO FOCK MATRIX')
  233 CONTINUE
      IF(IPRNT.GE.5)THEN
C
C CHECK NEW ERROR VECTOR
C
      IJEL=0
      DO 32 IEL=1,NBASIS
      DO 32 JEL=1,NBASIS
      IJEL=IJEL+1
      A=ZERO
      DO 33 I=1,NDIIS
      II=LLISTA(I)
   33 A=A+COEF(I)*FLST(IJEL,II,2)
   32 T2(IEL,JEL)=A
      CALL OUTMX(T2,NBASIS,NBASIS,6,'NEW ERROR MATRIX')
      EM=ABS(T2(1,1))
      DO 287 I=1,NBASIS
      DO 287 J=1,NBASIS
      IF(ABS(T2(I,J)).GT.EM)EM=ABS(T2(I,J))
 287  CONTINUE
      WRITE(6,*)'NEW MAX ERR AO = ',EM
      END IF
      RETURN
      END
      SUBROUTINE COUPOP(T1,T2,SH,X,MOTYPE,MAP,F,FI,E,ZJM,ZKM,S,FL
     1 ,AM,BM,PV,DM,EM,RG,B,FLST,NDIIS,NDIIS1,P3,ITER,PII)
C
C COUPLING OPERATOR METHOD, AFTER CARBO.
C
      IMPLICIT REAL*8 (A-H,O-Z)
      COMMON/BASIS/NBASIS,NTRI,NSYM,NBFAO,NBFSO,NBATRI
      COMMON/ENRGY/ESCF,ENUC,TOL,NITER,IDUM,EKIN,EONE,ETOT,ETWO,EPOT,VIR
      COMMON/LIMIT/MAXBAS,MAXBUF,MAXBF2,MAXBF4,MAXCOR,NCRUSD
      COMMON/SIGNS/IOFF(256),IPRNT
      COMMON/SYMMS/IDEG(10),NDEG(10),LSYM(10)
      COMMON/ZNELE/NDOCC,NSOCC,IREAD,IWF,NSHELL,NFIRST,NLAST
      COMMON/ZZLVS/ZLVS,NLVS,NROOT,NWF
      PARAMETER(MAXSHL=20)
      COMMON/ZZGEN/ALFA(MAXSHL,MAXSHL),BETA(MAXSHL,MAXSHL),OCC(MAXSHL)
     1 ,NOMO(MAXSHL),ISHT(MAXSHL),IGVB,ISGVB,IBEGIN(MAXSHL)
      COMMON/ZZGVB/NPAIR,IIGVB(3,2),IWPAIR(MAXSHL)
      COMMON/ZZOCB/IOCB
      COMMON/ZNSTT/NST
      DIMENSION B(*),FLST(*),P3(*),PII(NBASIS,NBASIS,NLAST)
      DIMENSION T1(NBASIS,*),T2(NBASIS,*),MOTYPE(*),MAP(*),S(*)
      DIMENSION F(*),FI(NTRI,*),E(*),ZJM(NTRI,*),ZKM(NTRI,*)
      DIMENSION AM(*),BM(*),RG(NBASIS,*),DM(NBASIS,*),EM(NBASIS,*)
      DIMENSION PV(NBASIS,*),FL(NBASIS,*)
      DIMENSION SH(NBASIS,*),X(NBASIS,*)
      DIMENSION MAPA(50)
      DATA ZERO,ONE,TWO/0.0D0,1.0D0,2.0D0/
      NB2=NBASIS*NBASIS
C FORM ORTHOGONALIZED C MATRIX
      IF(IPRNT.GE.2)CALL OUTMX(T1,NBASIS,NBASIS,6,'T1 MATRIX')
      CALL MATMUL(NBASIS,NBASIS,SH,T1,DM,1)
      CALL AMOVE(DM,T1,NB2)
      IF(IPRNT.GE.2)CALL OUTMX(T1,NBASIS,NBASIS,6,'T1 ORT MATRIX')
      DO 300 I=1,NSHELL
C BACKTRANSFORM TO ATOMIC ORTHOGONAL BASIS
      CALL BACKTF(T1,FI(1,I),FI(1,I),DM,EM,NBASIS)
      IF(IPRNT.GE.2)CALL OUTTM(FI(1,I),NTRI,NBASIS,6,'FI MATRIX')
  300 CONTINUE
C
C GENERATE PROJECTORS P(I,I)
C
      IO=0
      DO 343 I=1,NLAST
      IT=MOTYPE(I)
      IF(IT.EQ.NBASIS)GOTO 343
      IO=IO+1
      CALL TENSOR(T1(1,I),T1(1,I),PII(1,1,IO),NBASIS)
      IF(IPRNT.GE.2)CALL OUTMX(PII(1,1,IO),NBASIS,NBASIS,6,'PII MATRIX')
  343 CONTINUE
C
C PROJECTOR PV
C
      CALL ESCVEC(ZERO,PV,NB2)
      DO 1 I=1,NBASIS
      IT=MOTYPE(I)
      IF(IT.NE.NBASIS)GOTO 1
      CALL TENSOR(T1(1,I),T1(1,I),T2,NBASIS)
      CALL ADDMAT(NBASIS,T2,PV,PV)
    1 CONTINUE
      IF(IPRNT.GE.2)CALL OUTMX(PV,NBASIS,NBASIS,6,'PV MATRIX')
C
C GRADIENT PART - RG IS THE GRADIENT OPERATOR
C
      CALL ESCVEC(ZERO,RG,NB2)
      IO=0
      DO 2 I=1,NBASIS
      IT=MOTYPE(I)
      IF(IT.EQ.NBASIS)GOTO 2
      IO=IO+1
      CALL ADDMAT(NBASIS,PII(1,1,IO),PV,T2)
      IF(IPRNT.GE.2)CALL OUTMX(T2,NBASIS,NBASIS,6,'T2 MATRIX')
      CALL LITOSQ(NBASIS,FI(1,IT),EM,NBASIS)
      CALL MATMUL(NBASIS,NBASIS,T2,EM,DM,1)
      CALL MATMUL(NBASIS,NBASIS,DM,T2,EM,1)
      IF(IPRNT.GE.2)CALL OUTMX(EM,NBASIS,NBASIS,6,'EM MATRIX')
      CALL ADDMAT(NBASIS,EM,RG,RG)
    2 CONTINUE
      IF(IPRNT.GE.2)CALL OUTMX(RG,NBASIS,NBASIS,6,'RG MATRIX')
C
C HERMITIAN PART - PV IS THE HERMITIAN OPERATOR
C
      CALL AZERO(PV,NB2)
      IO=0
      DO 7000 I=1,NBASIS
      IT=MOTYPE(I)
      IF(IT.EQ.NBASIS)GOTO 7000
      IO=IO+1
      JO=0
      DO 8000 J=1,NBASIS
      JT=MOTYPE(J)
      IF(JT.EQ.NBASIS)GOTO 8000
      JO=JO+1
      IF(IT.EQ.JT)GOTO 8000
      CALL LITOSQ(NBASIS,FI(1,IT),DM,NBASIS)
      CALL LITOSQ(NBASIS,FI(1,JT),EM,NBASIS)
      CALL SUBMAT(NBASIS,EM,DM,DM)
      CALL MATMUL(NBASIS,NBASIS,PII(1,1,IO),DM,EM,1)
      CALL MATMUL(NBASIS,NBASIS,EM,PII(1,1,JO),DM,1)
      IF(I.GE.J)THEN
      CALL ADDMAT(NBASIS,PV,DM,PV)
      ELSE
      CALL SUBMAT(NBASIS,PV,DM,PV)
      END IF
 8000 CONTINUE
 7000 CONTINUE
C
      IF(IPRNT.GE.2)CALL OUTMX(PV,NBASIS,NBASIS,6,'PV MATRIX')
C     CALL ESCMAT(1.D0,PV,NBASIS*NBASIS)
      CALL ADDMAT(NBASIS,PV,RG,RG)
      IF(IPRNT.GE.2)CALL OUTMX(RG,NBASIS,NBASIS,6,'RG TOTAL MATRIX')
C
      CALL SQTOLI(NBASIS,RG,F,NBASIS)
      IF(NDIIS.EQ.0)GOTO 6000
C
C D I I S
C
      IF(ITER.EQ.1)WRITE(3,*)'DIIS EXTRAPOLATION - COUPOP'
C     IF(ITER.GE.NODIIS)THEN
C     ITDIIS=ITDIIS+1
C     IF(IPRNT.GE.5)WRITE(6,*)'ITDIIS=',ITDIIS
C
C GET TOTAL DENSITY MATRIX
C
      CALL DMATRI(T1,P3,OCC,NBASIS,1,NBASIS,MOTYPE)
C
C PERFORM DIIS EXTRAPOLATION
C
      CALL PULAYC(FL,F,MOTYPE,B,FLST,NDIIS,NDIIS1
     1 ,ITDIIS,T1,T2,RG,DM,P3,SH,X,NBASIS*NBASIS)
C     END IF
 6000 CONTINUE
C
C IF THIS IS JUST TO STORE FOCK MATRIX, DO NOT UPDATE...
C
      IF(IOCB.EQ.0)THEN
        IF(IPRNT.GE.3)CALL OUTTM(F,NTRI,NBASIS,6,'F MATRIX')
        IF(ZLVS.NE.ZERO)THEN
               CALL LITOSQ(NBASIS,F,RG,NBASIS)
               ZLVS=ZLVS*.96
               DO 78 I=      1,NBASIS
                       IT=MOTYPE(I)
                       IF(IT.NE.NBASIS)GOTO 78
                       RG(I,I)=RG(I,I)+ZLVS
   78                  CONTINUE
               CALL SQTOLI(NBASIS,RG,F,NBASIS)
        END IF
        IF(NST.EQ.1)THEN
          CALL RSP(NBASIS,NBASIS,NTRI,F,E,1,DM,AM,BM)
        ELSE
          CALL AZERO(DM,NBASIS*NBASIS)
          DO 17 I=1,NST
               ID=IDEG(I)+1
               MBASIS=NDEG(I)
               IF(MBASIS.EQ.0)GOTO 17
               MTRI=IOFF(MBASIS+1)
               CALL GETTM(NBASIS,MBASIS,F,P3,ID,EM,PV)
               IF(IPRNT.GE.3)CALL OUTTM(P3,MTRI,MBASIS,6,'P3 MATRIX')
               CALL RSP(MBASIS,MBASIS,MTRI,P3,E,1,PV,AM,BM)
               IF(IPRNT.GE.3)CALL OUTMX(PV,MBASIS,MBASIS,6,'PV MATRIX')
               CALL PUTMX(NBASIS,MBASIS,DM,PV,ID)
   17     CONTINUE
        END IF
        IF(IPRNT.GE.3)CALL OUTMX(DM,NBASIS,NBASIS,6,'DM MATRIX')
        CALL MATMUL(NBASIS,NBASIS,X,T1,T2,1)
        CALL MATMUL(NBASIS,NBASIS,X,DM,T1,1)
      ELSE
        DO 400 I=1,NSHELL
  400   CALL TRANSF(T1,FI(1,I),FI(1,I),DM,EM,NBASIS)
        CALL AMOVE(T1,T2,NB2)
        CALL MATMUL(NBASIS,NBASIS,X ,T1,DM,1)
        CALL AMOVE(DM,T1,NB2)
      END IF
      IF(IOCB.EQ.1)GOTO 5000
      CALL CHKORD(T1,T2,SH,X,DM,NBASIS)
      IF(IPRNT.GE.3)CALL OUTMX(T1,NBASIS,NBASIS,6,'NEW C MATRIX')
C     CALL LOCATE(5,'# MOFLIP ####',IERR)
C     IF(IERR.EQ.0)THEN
C              READ(5,*)IIIJ,JJJI
C              IF(ITER.EQ.1)THEN
C              WRITE(6,*)'FLIPPING MO''S ',IIIJ,JJJI
C              END IF
C              I=IIIJ
C              J=JJJI
C               CALL AMOVE(T1(1,I),AM,NBASIS)
C               CALL AMOVE(T1(1,J),T1(1,I),NBASIS)
C               CALL AMOVE(AM,T1(1,J),NBASIS)
C     END IF
 5000 CONTINUE
      RETURN
      END
      SUBROUTINE EFFFOP(T1,T2,SH,X,MOTYPE,MAP,F,FI,E,ZJM,ZKM,S,FL
     1 ,AM,BM,PV,DM,EM,RG,B,FLST,NDIIS,NDIIS1,P3,ITER,PII,HC,MOPOS)
C
C P.PULAY, J.AMER.CHEM.SOC., 186
C M. PAGE AND J.W. MCIVER, J.CHEM.PHYS. 79 (1983), 4985
C
      IMPLICIT REAL*8 (A-H,O-Z)
      REAL*8 KPA,KPB
      COMMON/BASIS/NBASIS,NTRI,NSYM,NBFAO,NBFSO,NBATRI
      COMMON/ENRGY/ESCF,ENUC,TOL,NITER,IDUM,EKIN,EONE,ETOT,ETWO,EPOT,VIR
      COMMON/LIMIT/MAXBAS,MAXBUF,MAXBF2,MAXBF4,MAXCOR,NCRUSD
      COMMON/SIGNS/IOFF(256),IPRNT
      COMMON/SYMMS/IDEG(10),NDEG(10),LSYM(10)
      COMMON/ZNELE/NDOCC,NSOCC,IREAD,IWF,NSHELL,NFIRST,NLAST
      COMMON/ZZLVS/ZLVS,NLVS,NROOT,NWF
      PARAMETER(MAXSHL=20)
      COMMON/ZZGEN/ALFA(MAXSHL,MAXSHL),BETA(MAXSHL,MAXSHL),OCC(MAXSHL)
     1 ,NOMO(MAXSHL),ISHT(MAXSHL),IGVB,ISGVB,IBEGIN(MAXSHL)
      COMMON/ZZGVB/NPAIR,IIGVB(3,2),IWPAIR(MAXSHL)
      COMMON/ZZOCB/IOCB
      COMMON/ZNSTT/NST
      DIMENSION B(*),FLST(*),P3(*),PII(NBASIS,NBASIS,NLAST)
      DIMENSION T1(NBASIS,*),T2(NBASIS,*),MOTYPE(*),MAP(*),S(*)
      DIMENSION F(*),FI(NTRI,*),E(*),ZJM(NTRI,*),ZKM(NTRI,*)
      DIMENSION AM(*),BM(*),RG(NBASIS,*),DM(NBASIS,*),EM(NBASIS,*)
      DIMENSION PV(NBASIS,*),FL(NBASIS,*)
      DIMENSION SH(NBASIS,*),X(NBASIS,*)
      DIMENSION MAPA(50),HC(*),MOPOS(*)
      DATA ZERO,ONE,TWO,THREE/0.0D0,1.0D0,2.0D0,3.0D0/
      NB2=NBASIS*NBASIS
C FORM ORTHOGONALIZED C MATRIX
C     IF(IPRNT.GE.2)CALL OUTMX(T1,NBASIS,NBASIS,6,'T1 MATRIX')
C     CALL MATMUL(NBASIS,NBASIS,SH,T1,DM,1)
C     CALL AMOVE(DM,T1,NB2)
C     IF(IPRNT.GE.2)CALL OUTMX(T1,NBASIS,NBASIS,6,'T1 ORT MATRIX')
C     DO 300 I=1,NSHELL
C BACKTRANSFORM TO ATOMIC ORTHOGONAL BASIS
C     CALL BACKTF(T1,FI(1,I),FI(1,I),DM,EM,NBASIS)
C     IF(IPRNT.GE.2)CALL OUTTM(FI(1,I),NTRI,NBASIS,6,'FI MATRIX')
C 300 CONTINUE
      CALL AZERO(F,NTRI)
      IF(IWF.NE.1)GOTO 1000
C
C HIGH-SPIN OPEN-SHELL
C
      DO 1 I=1,NBASIS
      IT=MOTYPE(I)
      DO 2 J=1,I
      JT=MOTYPE(J)
      IJ=IOFF(I)+J
      IF(IT.NE.2 .AND. JT.NE.2)SIGNE=ONE
      IF(IT.EQ.2 .AND. JT.EQ.2)SIGNE=ONE
      IF(IT+JT.EQ.3)SIGNE=ZERO
      IF(IT+JT.EQ.NBASIS+2)SIGNE=TWO
      SUM=ZERO
      DO 3 K=1,NSOCC
    3 SUM=SUM+TWO*ZJM(IJ,K)-SIGNE*ZKM(IJ,K)
      F(IJ)=HC(IJ)+SUM/TWO
    2 CONTINUE
    1 CONTINUE
      GOTO 10000
C
C TWO-CONFIGURATION SCF
C
 1000 IF(IWF.NE.2)GOTO 2000
      IA=IIGVB(1,1)
      IAH=MOPOS(IA)
      IAT=MOTYPE(IA)
      IB=IIGVB(1,2)
      IBH=MOPOS(IB)
      IBT=MOTYPE(IB)
C     IF(IPRNT.GE.0)WRITE(6,*)IA,IAH,IAT,IB,IBH,IBT
      C1SQ=OCC(IAT)/TWO
      C2SQ=OCC(IBT)/TWO
      C1C2=-DSQRT(C1SQ)*DSQRT(C2SQ)
C     IF(IPRNT.GE.0)WRITE(6,*)C1SQ,C2SQ,C1C2
      DO 11 I=1,NBASIS
      IT=MOTYPE(I)
      DO 12 J=1,I
      JT=MOTYPE(J)
      IJ=IOFF(I)+J
      FA=C1SQ*(HC(IJ)+TWO*ZJM(IJ,IAH)-ZKM(IJ,IAH))
      FB=C2SQ*(HC(IJ)+TWO*ZJM(IJ,IBH)-ZKM(IJ,IBH))
      KPA=C1C2*ZKM(IJ,IAH)
      KPB=C1C2*ZKM(IJ,IBH)
C     IF(IPRNT.GE.0)WRITE(6,*)KPA,KPB
      IF(IT.EQ.JT)THEN
               F(IJ)=FA+FB
      ELSE IF(IT+JT .EQ. NBASIS+1)THEN
               F(IJ)=FA+FB
      ELSE IF (IT+JT.EQ.IAT+1)THEN
               F(IJ)=FB-KPB
      ELSE IF (IT+JT.EQ.IBT+1)THEN
               F(IJ)=FA-KPA
      ELSE IF (IT+JT.EQ.5)THEN
               F(IJ)=FA-FB+KPB-KPA
      ELSE IF (IT+JT .EQ. NBASIS+IAT)THEN
               F(IJ)=FA+KPB
      ELSE IF (IT+JT .EQ. NBASIS+IBT)THEN
               F(IJ)=FB+KPA
      END IF
   12 CONTINUE
   11 CONTINUE
      GOTO 10000
C
C OTHER
C
2000  IF(IWF.GT.20)GOTO 3000
C
C LAGRANGIAN CONDITION METHOD-VALID FOR ALL CASES?
C
      DO 401 I=1,NBASIS
      IT=MOTYPE(I)
      IST=ISHT(IT)
      DO 401 J=1,I
      IJ=IOFF(I)+J
      JT=MOTYPE(J)
      JST=ISHT(JT)
      IF(IT.EQ.JT)THEN
               F(IJ)=FI(IJ,1)
      ELSE
               FAC=ONE
               IF(IST.EQ.2)FAC=TWO
               IF(JST.EQ.2)FAC=TWO
               F(IJ)=FAC*(FL(J,I)-FL(I,J))
      END IF
 401  CONTINUE
      GOTO 10000
3000  CONTINUE
      WRITE(6,*)'PAGE ET AL NOT VALID RIGHT NOW'
      STOP 'EFFFOP'
10000 CONTINUE
C
      IF(NDIIS.EQ.0)GOTO 6000
C
C D I I S
C
      IF(ITER.EQ.1)WRITE(3,*)'DIIS EXTRAPOLATION - EFFFOP'
C
C FORM OAO C MATRIX
C
      CALL MATMUL(NBASIS,NBASIS,SH,T1,DM,1)
      CALL AMOVE(DM,T1,NB2)
      IF(IPRNT.GE.2)CALL OUTMX(T1,NBASIS,NBASIS,6,'OAO T1 MATRIX')
C
C FORM OAO F MATRIX
C
      CALL BACKTF(T1,F,F,DM,EM,NBASIS)
      IF(IPRNT.GE.2)CALL OUTTM(F,NTRI,NBASIS,6,'OAO FI MATRIX')
C
C GET OAO TOTAL DENSITY MATRIX
C
      CALL DMATRI(T1,P3,OCC,NBASIS,1,NBASIS,MOTYPE)
C
C PERFORM DIIS EXTRAPOLATION
C
      CALL PULAYC(FL,F,MOTYPE,B,FLST,NDIIS,NDIIS1
     1 ,ITDIIS,T1,T2,RG,DM,P3,SH,X,NBASIS*NBASIS)
C
C FORM AO C MATRIX
C
C RECONSTRUCT F MO MATRIX
      CALL TRANSF(T1,F,F,DM,EM,NBASIS)
      CALL MATMUL(NBASIS,NBASIS,X,T1,DM,1)
      CALL AMOVE(DM,T1,NB2)
      IF(IPRNT.GE.2)CALL OUTTM(F,NTRI,NBASIS,6,'FI MATRIX')
 6000 CONTINUE
        IF(IPRNT.GE.3)CALL OUTTM(F,NTRI,NBASIS,6,'F MATRIX')
        IF(ZLVS.NE.ZERO)THEN
               CALL LITOSQ(NBASIS,F,RG,NBASIS)
               ZLVS=ZLVS*.96
               DO 78 I=      1,NBASIS
                       IT=MOTYPE(I)
                       IF(IT.NE.NBASIS)GOTO 78
                       RG(I,I)=RG(I,I)+ZLVS
   78                  CONTINUE
               CALL SQTOLI(NBASIS,RG,F,NBASIS)
        END IF
        IF(NST.EQ.1)THEN
          CALL RSP(NBASIS,NBASIS,NTRI,F,E,1,DM,AM,BM)
        ELSE
          CALL AZERO(DM,NBASIS*NBASIS)
          DO 17 I=1,NST
               ID=IDEG(I)+1
               MBASIS=NDEG(I)
               IF(MBASIS.EQ.0)GOTO 17
               MTRI=IOFF(MBASIS+1)
               CALL GETTM(NBASIS,MBASIS,F,P3,ID,EM,PV)
               IF(IPRNT.GE.3)CALL OUTTM(P3,MTRI,MBASIS,6,'P3 MATRIX')
               CALL RSP(MBASIS,MBASIS,MTRI,P3,E,1,PV,AM,BM)
               IF(IPRNT.GE.3)CALL OUTMX(PV,MBASIS,MBASIS,6,'PV MATRIX')
               CALL PUTMX(NBASIS,MBASIS,DM,PV,ID)
   17     CONTINUE
        END IF
        IF(IPRNT.GE.3)CALL OUTMX(DM,NBASIS,NBASIS,6,'DM MATRIX')
        CALL MATMUL(NBASIS,NBASIS,T1,DM,PV,1)
      CALL AMOVE(T1,T2,NBASIS*NBASIS)
      CALL AMOVE(PV,T1,NBASIS*NBASIS)
      CALL CHKORD(T1,T2,SH,X,DM,NBASIS)
      IF(IPRNT.GE.3)CALL OUTMX(T1,NBASIS,NBASIS,6,'NEW C MATRIX')
C     CALL LOCATE(5,'# MOFLIP ####',IERR)
C     IF(IERR.EQ.0)THEN
C              READ(5,*)IIIJ,JJJI
C              IF(ITER.EQ.1)THEN
C              WRITE(6,*)'FLIPPING MO''S ',IIIJ,JJJI
C              END IF
C              I=IIIJ
C              J=JJJI
C              CALL AMOVE(T1(1,I),AM,NBASIS)
C              CALL AMOVE(T1(1,J),T1(1,I),NBASIS)
C              CALL AMOVE(AM,T1(1,J),NBASIS)
C     END IF
 5000 CONTINUE
      RETURN
      END
      SUBROUTINE ZROFFD(T1,NBASIS)
      IMPLICIT REAL*8(A-H,O-Z)
      DIMENSION T1(NBASIS,NBASIS)
      LOGICAL*1 IZ
      COMMON/ZZZSY/IZ(5050)
      COMMON/SIGNS/IOFF(256),IPRNT
      DATA ZERO/0.0D+00/
      DO 1 I=2,NBASIS
      DO 1 J=1,I-1
      IJ=IOFF(I)+J
      IF(IZ(IJ))GOTO 1
      T1(I,J)=ZERO
      T1(J,I)=ZERO
    1 CONTINUE
      RETURN
      END
      SUBROUTINE CHKORD(T2,T1,SH,X,DM,NBASIS)
C T2...NEW   T1...OLD
      IMPLICIT REAL*8(A-H,O-Z)
      DIMENSION T1(NBASIS,*),T2(NBASIS,*),SH(NBASIS,*),X(NBASIS,*)
      DIMENSION DM(NBASIS,*)
      NB2=NBASIS*NBASIS
      CALL MATMUL(NBASIS,NBASIS,SH,T1,DM,1)
      CALL AMOVE(DM,T1,NB2)
      CALL MATMUL(NBASIS,NBASIS,SH,T2,DM,1)
      CALL AMOVE(DM,T2,NB2)
      DO 1 I=1,NBASIS
      XMAX=0.
      DO 2 J=1,NBASIS
      XX=DABS(DOT(T1(1,I),T2(1,J),NBASIS))
      IF(XX.GT.XMAX)THEN
               XMAX=XX
               IMAX=J
      END IF
    2 CONTINUE
      CALL AMOVE(T2(1,IMAX),T1(1,I),NBASIS)
    1 CONTINUE
      CALL MATMUL(NBASIS,NBASIS,X,T1,T2,1)
      RETURN
      END
      SUBROUTINE DIPOL1(P,DIPX,DIPY,DIPZ,ICENT,DIPM,IDIP)
      IMPLICIT REAL*8 (A-H,O-Z)
      LOGICAL IANDJ
      CHARACTER*32 CENT(5)
      DIMENSION P(NBATRI),DIPX(NBATRI),DIPY(NBATRI),DIPZ(NBATRI)
      DIMENSION DIPM(3)
      COMMON/BASIS/NBASIS,NTRI,NSYM,NBFAO,NBFSO,NBATRI
      COMMON/COORD/CHGS(112),C(3,112),W(112)
      COMMON/EXYZS/EX(7,7,13),EY(7,7,13),EZ(7,7,13)
      COMMON/FUNCS/NATOM,N3N,NSYMA
      COMMON/GAUSS/ZS(200),CS(200)
      COMMON/IJVEC/IX(84),IY(84),IZ(84),JX(84),JY(84),JZ(84)
      COMMON/INDEX/IJX(225),IJY(225),IJZ(225),IJPOS(225)
      COMMON/NSHEL/KNUC(200),KTYPE(200),KSTART(200),KLOC(200),
     1 KMIN(200),KMAX(200),KNG(200),NSHELL,NPRIM
      COMMON/ROOT /XX,U(9),WT(9),NROOTS
      COMMON/SIGNS/IOFF(256),IPRNT
      COMMON/TEMP0/SX0(36),SY0(36),SZ0(36),DX0(36),DY0(36),DZ0(36)
      DATA ITOL / 10 /
      DATA PI212 / 1.1283791670955D+00 /
      DATA PI32 / 5.56832799683170D+00 /
      DATA DEBYE / 2.541765480D+00 /
      DATA ZERO,HALF,ONE,TWO / 0.0D+00 , 0.5D+00 , 1.0D+00 , 2.0D+00 /
      DATA NQLIM / 7 /
      DATA CENT(1) / ' W.R.T. CENTER OF MASS        = '/
      DATA CENT(2) / ' W.R.T. ORIGIN                = '/
      DATA CENT(3) / ' W.R.T. CENTER OF ELEC CHARGE = '/
      DATA CENT(4) / ' W.R.T. CENTER OF NUCL CHARGE = '/
      DATA CENT(5) / ' W.R.T. CENTER OF NET CHARGE  = '/
    1 FORMAT(//,2X,' CALCULATION OF DIPOLE MOMENT'/)
    2 FORMAT(//,2X,' P MATRIX'/)
    3 FORMAT(//,2X,' DIPX MATRIX (AO BASIS)'/)
    4 FORMAT(//,2X,' DIPY MATRIX (AO BASIS)'/)
    5 FORMAT(//,2X,' DIPZ MATRIX (AO BASIS)'/)
    6 FORMAT(//,2X,' DIPOLE MOMENTS',A32,' IN DEBYE'/
     1        /,2X,' DEX = ',F12.8,3X,' DNX = ',F12.8,3X,' DTX = ',F12.8
     2        /,2X,' DEY = ',F12.8,3X,' DNY = ',F12.8,3X,' DTY = ',F12.8
     3        /,2X,' DEZ = ',F12.8,3X,' DNZ = ',F12.8,3X,' DTZ = ',F12.8
     4        /)
    7 FORMAT(2X,' TOTAL DIPOLE MOMENT',A32,F12.8,' DEBYE'/)
C
      TOL=ITOL*2.30258D+00
      IF(IPRNT.LE.2) GO TO 301
      WRITE(6,1)
      WRITE(6,2)
      CALL PRINT(P,NBATRI,NBASIS,6)
C
C     ZERO ALL THE CORE THAT WE NEED FOR S AND ONE ELECTRON INTEGRALS
C
  301 CONTINUE
C     IF(IDIP.NE.0)GOTO 302
      CALL AZERO(DIPX,NBATRI)
      CALL AZERO(DIPY,NBATRI)
      CALL AZERO(DIPZ,NBATRI)
C:::::::::::::::::::::::::::::
C:::::----- I SHELL -----:::::
C:::::::::::::::::::::::::::::
C
      DO 6000 ISH=1,NSHELL
C
      IATOM=KNUC(ISH)
      AX=C(1,IATOM)
      AY=C(2,IATOM)
      AZ=C(3,IATOM)
      IGMIN=KSTART(ISH)
      IGMAX=IGMIN+KNG(ISH)-1
      LIT=KTYPE(ISH)
      MINI=KMIN(ISH)
      MAXI=KMAX(ISH)
      LOCI=KLOC(ISH)
C
C:::::::::::::::::::::::::::::
C:::::----- J SHELL -----:::::
C:::::::::::::::::::::::::::::
C
      DO 5000 JSH=1,ISH
C
      JATOM=KNUC(JSH)
      BX=C(1,JATOM)
      BY=C(2,JATOM)
      BZ=C(3,JATOM)
      JGMIN=KSTART(JSH)
      JGMAX=JGMIN+KNG(JSH)-1
      LJT=KTYPE(JSH)
      MINJ=KMIN(JSH)
      MAXJ=KMAX(JSH)
      LOCJ=KLOC(JSH)
      IANDJ=ISH.EQ.JSH
C
C     ----- WORK OUT INDICES FOR COMBINING 2D INTEGRALS -----
C
      MIJ=0
      JMAX=MAXJ
      II=-1
      DO 104 I=MINI,MAXI
      II=II+1
      JJ=-1
      NX=IX(I)
      NY=IY(I)
      NZ=IZ(I)
      IF(IANDJ) JMAX=I
      DO 103 J=MINJ,JMAX
      MIJ=MIJ+1
      JJ=JJ+1
      IJX(MIJ)=NX+JX(J)
      IJY(MIJ)=NY+JY(J)
      IJZ(MIJ)=NZ+JZ(J)
      IDXI=LOCI+II
      IDXJ=LOCJ+JJ
      IDXS=IOFF(MAX0(IDXI,IDXJ))+MIN0(IDXI,IDXJ)
      IJPOS(MIJ)=IDXS
  103 CONTINUE
  104 CONTINUE
C
      XAB=AX-BX
      YAB=AY-BY
      ZAB=AZ-BZ
      RAB=XAB*XAB+YAB*YAB+ZAB*ZAB
CIBM  ZEROTH ORDER
      MAXIJ=MAX0(LIT+2,LJT+2)
C
      DO 4000 IG=IGMIN,IGMAX
      CSI=CS(IG)*PI32
      AI=ZS(IG)
      AXI=AI*AX
      AYI=AI*AY
      AZI=AI*AZ
C
      IF(IANDJ) JGMAX=IG
      DO 3000 JG=JGMIN,JGMAX
      CSJ=CS(JG)
      BJ=ZS(JG)
      BXJ=BJ*BX
      BYJ=BJ*BY
      BZJ=BJ*BZ
C
      PP=AI+BJ
      TPP=ONE/PP
      TEMP=(AI*BJ*RAB)*TPP
C
C     ----- IGNORE INTEGRAL IF PRE-EXPONENTIAL TOO SMALL -----
C
      IF(TEMP.GT.TOL) GO TO 3000
C
C     ----- DENSITY FACTOR -----
C
      TP=DSQRT(TPP)
      DIJ=CSI*CSJ*DEXP(-TEMP)*TPP
      IF(IANDJ.AND.IG.NE.JG) DIJ=DIJ+DIJ
      PFAC=DIJ*TP
      PTWO=TPP*HALF
C
C     FORM SOME PRODUCTS NEEDED IN INTEGRAL EVALUATION
C
      PX=(AXI+BXJ)*TPP
      PY=(AYI+BYJ)*TPP
      PZ=(AZI+BZJ)*TPP
      PAX=PX-AX
      PAY=PY-AY
      PAZ=PZ-AZ
      PBX=PX-BX
      PBY=PY-BY
      PBZ=PZ-BZ
C
      CALL ECAL(PAX,PAY,PAZ,PBX,PBY,PBZ,PTWO,MAXIJ)
C
      CX=ZERO
      CY=ZERO
      CZ=ZERO
      PCX=PX-CX
      PCY=PY-CY
      PCZ=PZ-CZ
C
      A12=AI+AI
      B12=BJ+BJ
C
      IN=-NQLIM
      DO 106 NI=1,LIT
      IN=IN+NQLIM
      A11=FLOAT(NI-1)
      DO 105 NJ=1,LJT
      JN=IN+NJ
      B11=FLOAT(NJ-1)
C
C   NORMAL OVERLAP INTEGRALS
      SX0(JN)=EX(NI,NJ,1)
      SY0(JN)=EY(NI,NJ,1)
      SZ0(JN)=EZ(NI,NJ,1)
C
C   NORMAL DIPOLE INTEGRALS
      DX0(JN)=EX(NI,NJ,2)+EX(NI,NJ,1)*PCX
      DY0(JN)=EY(NI,NJ,2)+EY(NI,NJ,1)*PCY
      DZ0(JN)=EZ(NI,NJ,2)+EZ(NI,NJ,1)*PCZ
C
C
  105 CONTINUE
  106 CONTINUE
C
      DO 107 I=1,MIJ
      NX=IJX(I)
      NY=IJY(I)
      NZ=IJZ(I)
      X=SX0(NX)
      Y=SY0(NY)
      Z=SZ0(NZ)
      IJ=IJPOS(I)
      XFAC=X*PFAC
      YFAC=Y*PFAC
      ZFAC=Z*PFAC
      YZFAC=Y*Z*PFAC
      XZFAC=X*Z*PFAC
      XYFAC=X*Y*PFAC
      DIPX(IJ)=DIPX(IJ)+DX0(NX)*YZFAC
      DIPY(IJ)=DIPY(IJ)+DY0(NY)*XZFAC
      DIPZ(IJ)=DIPZ(IJ)+DZ0(NZ)*XYFAC
  107 CONTINUE
C
 3000 CONTINUE
 4000 CONTINUE
 5000 CONTINUE
 6000 CONTINUE
C
      IF(IPRNT.LE.2) GO TO 302
      WRITE(6,3)
      CALL PRINT(DIPX,NBATRI,NBFAO,6)
      WRITE(6,4)
      CALL PRINT(DIPY,NBATRI,NBFAO,6)
      WRITE(6,5)
      CALL PRINT(DIPZ,NBATRI,NBFAO,6)
      IF(IDIP.NE.0)RETURN
C
C   CALCULATE DIPOLE MOMENTS
  302 CONTINUE
      DEX=ZERO
      DEY=ZERO
      DEZ=ZERO
      IJ=0
      DO 110 I=1,NBFAO
      DO 110 J=1,I
      IJ=IJ+1
      FAC=TWO
      IF(I.EQ.J) FAC=ONE
      DEX=DEX-DIPX(IJ)*P(IJ)*FAC
      DEY=DEY-DIPY(IJ)*P(IJ)*FAC
      DEZ=DEZ-DIPZ(IJ)*P(IJ)*FAC
  110 CONTINUE
      IF(IDIP.EQ.0)THEN
      DEX= DEX*DEBYE
      DEY= DEY*DEBYE
      DEZ= DEZ*DEBYE
      END IF
      DNX=ZERO
      DNY=ZERO
      DNZ=ZERO
      DO 112 I=1,NATOM
      DNX=DNX+CHGS(I)*C(1,I)
      DNY=DNY+CHGS(I)*C(2,I)
      DNZ=DNZ+CHGS(I)*C(3,I)
  112 CONTINUE
      IF(IDIP.EQ.0)THEN
      DNX=DNX*DEBYE
      DNY=DNY*DEBYE
      DNZ=DNZ*DEBYE
      END IF
      DTX=DNX+DEX
      DTY=DNY+DEY
      DTZ=DNZ+DEZ
      DIPM(1)=DTX
      DIPM(2)=DTY
      DIPM(3)=DTZ
      IF(IDIP.LT.3)
     *WRITE(6,6) CENT(ICENT),DEX,DNX,DTX,DEY,DNY,DTY,DEZ,DNZ,DTZ
C2-25-89   IF(IDIP.LT.3)WRITE(16,'(3F20.10)')DTX,DTY,DTZ
C
C   CALCULATE THE TOTALE DIPOLE MOMENT
      DD=DTX*DTX+DTY*DTY+DTZ*DTZ
      DD=DSQRT(DD)
      IF(IDIP.LT.3)WRITE(6,7) CENT(ICENT),DD
C
      RETURN
      END
