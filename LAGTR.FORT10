      PROGRAM LAGTR
C**********************************************************************
C*   NOTICE OF PROGRAM MODIFICATION                                   *
C**********************************************************************
C      BY:  Curtis Janssen          Key: clj020589                    *
C    DATE:  2/5/89                                                    *
C  REASON:  Replace STOP's for errors with calls to MABORT.           *
C**********************************************************************
c Moved to PSI distribution disk on 020289 - clj.
C**********************************************************************
C This program "LAGTRN" and "LAGTR" are both the same.  RBR 11-12-88
C**********************************************************************
C      BY:  GUSTAVO E. SCUSERIA                                       *
C    DATE:  NOVEMBER 1, 1988.                                         *
C  REASON:  CHANGE FILE55 IO TO INTEGER WORD ADDRESSING.              *
C           THIS VERSION COMPATIBLE ONLY WITH NOV 1, 88 VERSIONS      *
C           OF DERTFK AND DER2TFK.                                    *
C**********************************************************************
C*  BY:  RICHARD REMINGTON                         search:  c5-22-88  *
C*  DATE:  MAY   22,   1988                                           *
C*  REASON: INCREASE CORE FROM 7MB ON 9370 TO 15MB ON 3090.           *
C**********************************************************************
C      BY:  GUSTAVO E. SCUSERIA                                       *
C    DATE:  FEBRUARY 18, 1988                                         *
C  REASON:  GET RID OF FILE53 (MO PDMS) AFTER FORMING FILE 91         *
C**********************************************************************
C                    GES VERSION: MAY 6, 1987                         *
C           CC SYMM GRADS AND MONGO. EIGENVECTOR READ FROM FILE30     *
C          RE-SORTING TO CC ORDERING TO TAKE ADVANTAGE OF SYMMETRY    *
C                        NON-SCF ORBITALS OK                          *
C                       CLEAN OUTPUT 11-5-87                          *
C**********************************************************************
C      BY:  TJL                                                       *
C    DATE:  OCTOBER 27, 1986                                          *
C  REASON:  BUG FOUND!!!!!!!!!!  ALL CASES SHOULD NOW WORK! (I HOPE!?)*
C**********************************************************************
C      BY:  TJL                                                       *
C    DATE:  DECEMBER 5, 1985                                          *
C  REASON:  CHANGE COMTOP BACK TO 1200000  (A BUG EXISTS!)            *
C  REASON:  ALSO TO MOVE IF TEST ON NMUNU.                            *
C**********************************************************************
C      BY:  TRASH                                                     *
C    DATE:  SEPT. 30, 1985                                            *
C  REASON:  CHANGE Z(1200000) & COMTOP(1200K) TO 500K  AS PER TJL     *
C**********************************************************************
C      BY:  TRASH                                                     *
C    DATE:  MAY 12, 1985                                              *
C  REASON:  CHANGE EXTRA CALLS TO TSTART AND TSTOP TO TSET AND TRSET  *
C**********************************************************************
C      BY:  TJL                                                       *
C    DATE:  APRIL 14, 1985                                            *
C  REASON:  TO GIVE THE APPEARANCE THAT I'M WORKING HARD              *
C**********************************************************************
C      BY:  TJL                                                       *
C    DATE:  MARCH 25, 1985                                            *
C  REASON:  MAKE PROGRAM MORE EFFICIENT                               *
C  REASON:  CHANGE UNIT NUMBERS !! 2=>52, 82=>56, 21=>55,  10=>30     *
C  REASON:  CHANGE UNIT NUMBERS !! 8=>58, 20=>53, 101=>91  105=>95    *
C  REASON:  CHANGE UNIT NUMBERS !!12=>54, 57=>47  103=>93             *
C**********************************************************************
C
C
      IMPLICIT INTEGER (A-Z)
C
      COMMON/TAPES/ OUT,CHK,IT30,IT47,IT52,IT53,IT55,IT58,IT91,IT93,IT95
      COMMON /FILES/ IT40,IT54,CCSD
      COMMON /MSTR/ MASTER
C
      LOGICAL CCSD
      REAL*8 Z( 700000)
C5-22-88  REAL*8 Z(1700000)
      INTEGER IZ(1)
      EQUIVALENCE (Z,IZ)
C
      CALL NOUNFL
      CALL TSTART(3)
      CALL TSTART(6)
      COMTOP= 700000
C5-22-88  COMTOP=1700000
C
      CALL MAIN(Z,IZ,COMTOP)
C
      JCODE = 3
      CALL RCLOSE(IT30,JCODE)
      IF(MASTER.EQ.1) CALL RCLOSE(IT40,JCODE)
      CALL RCLOSE(IT47,JCODE)
      CALL RCLOSE(IT52,JCODE)
CTJL  CALL RCLOSE(IT53,JCODE)
      IF(.NOT.CCSD) CALL RCLOSE(IT54,JCODE)
      CALL RCLOSE(IT55,JCODE)
      CALL RCLOSE(IT58,JCODE)
C
      JCODE = 4
CTJL  CALL RCLOSE(IT91,JCODE)
CTJL  CALL RCLOSE(IT93,JCODE)
      CALL RCLOSE(IT95,JCODE)
      CALL TSTOP(CHK)
      CALL TSTOP(OUT)
      STOP
      END
C----------------------------------------------------------------------
      SUBROUTINE MAIN(A,IA,COMTOP)
C
C  PROGRAM TO FORM 'LAGRANGIAN' MATRIX :
C                    L(I,M)=H(I,J)*P(M,J)+2G(IJKL)*Q(MJKL)
C  *******  BRB VERSION BEGUN ON MARCH 14,1983  ********
C
C
      IMPLICIT INTEGER (A-Z)
      INTEGER NSOFF(8)
      INTEGER IA(2*COMTOP)
      REAL*8 A(COMTOP)
      COMMON /BIGD/ IBIG,IBIG2
      COMMON/TAPES/ OUT,CHK,IT30,IT47,IT52,IT53,IT55,IT58,IT91,IT93,IT95
      COMMON /DIMS/ ISYMRB,NUMIJ,NIJ,NBF,NIJAO,NBFAO,NORBS,NMAX,NSYMHF
      COMMON /FILES/ IT40,IT54,CCSD
      COMMON /SRT/ VAL,IADR,IBKT,NBKT,NGRPIJ,LGRPIJ,NMUNU
      COMMON /D2H/ IDUMM(42),NBFSQ
      COMMON /LBLS/ ILBL(26),LBLDRT(26),NSYM
      COMMON /TRANS/ NMNB,BLEN,IBPT,ILPT
      COMMON /TRN2/ NSHELL,NST,NSTN,NTBUF,SPACY,AOSTRT,MAXSSQ,BEGI(1000)
      COMMON /MSTR/ MASTER
      COMMON /TAPE30/ I30(200)
      LOGICAL CCSD
      REAL*8 DRTVER,VAL,ECINEW,ACRCY
      CHARACTER*8 LINE
      LINE='********'
      DATA ACRCY /1.0D-20/
C
C
C DIRECTORY OF FILES --------------------------------------------------
C
C CHK - THE OUTPUT FILE WHERE ERRORS AND MESSAGES ARE SENT.
C OUT - THE OUTPUT FILE WHERE ERRORS AND MESSAGES ARE SENT.
C IT40 - YUKIO'S MASTER FILE WHERE THE LAGRANGIAN IS WRITTEN.
C IT47 - THE MASTER FILE WHERE THE AO-MO EIGENVECTORS ARE OBTAINED FROM
C        AND THE MO AND AO LAGRANGIAN, H IN THE MO BASIS, AND Q IN THE
C        MO BASIS ARE WRITTEN.
C IT52 - CONTAINS THE MO ONE AND TWO ELECTRON INTEGRALS IN DRT ORDERING.
C IT53 - CONTAINS THE ONE AND TWO PDM'S IN THE MO BASIS.
C IT55 - CONTAINS THE TWOPDM IN THE SO BASIS.
C IT58 - CONTAINS THE DRT INFORMATION.
C IT91 - WORK FILE USED TO STORE THE MO TWOPDM.
C IT93 - WORK FILE USED TO STORE THE MO TWO ELECTRON INTEGRALS.
C IT95 - WORK FILE USED TO STORE THE HALF-TRANSFORMED TWOPDM.
C
C
C INITIALIZE THE FILES USED BY THIS PROGRAM.
C
      CHK = 3
      INPUT = 5
      OUT = 6
      IT30 = 30
      IT40 = 40
      IT47 = 47
      IT52 = 52
      IT53 = 53
      IT54 = 54
      IT55 = 55
      IT58 = 58
      IT91 = 91
      IT93 = 93
      IT95 = 95
      CALL RFILE(IT30)
CTJL  CALL RFILE(IT40)
      CALL RFILE(IT47)
      CALL RFILE(IT52)
      CALL RFILE(IT53)
      IF(.NOT.CCSD) CALL RFILE(IT54)
      CALL RFILE(IT55)
      CALL RFILE(IT58)
      CALL RFILE(IT91)
      CALL RFILE(IT93)
      CALL RFILE(IT95)
CIBM  CALL SREW(IT47)
CTJL  CALL SREW(IT52)
CTJL  CALL SREW(IT53)
CIBM  CALL SREW(IT58)
CIBM  CALL SREW(IT91)
CIBM  CALL SREW(IT93)
CIBM  CALL SREW(IT95)
   4  FORMAT(//,7X,' >>>>> LAGRANGIAN CALCULATION COMPLETED <<<<< '/)
CCRBR WRITE(OUT,5) (LINE,I=1,10)
   5  FORMAT(/,1H ,10A8)
      WRITE(OUT,1012)
 1012 FORMAT(//,10X,'  PROGRAM TO CONSTRUCT LAGRANGIAN MATRIX '/
     1          10X,'    BASED ON THE ORIGINAL BRB PROGRAM'/
     2          10X,'        WRITTEN BY G. FITZGERALD '//
     3          10X,'     MODIFIED TO BACK TRANSFORM THE'/
     4          10X,'      TWO PARTICLE DENSITY MATRIX'//
     5          10X,'  MODIFIED FOR COUPLED CLUSTER GRADIENTS'/
     6          10X,'          BY GUSTAVO SCUSERIA  '/
     7          10X,'          VERSION NOV 1, 1988'/)
CCRBR WRITE(OUT,5) (LINE,I=1,10)
C
      WRITE(OUT,1016)
 1016 FORMAT(/,1X,'USING NEW FILE55 IO (INTEGER WORD ADDRESSING)')
C
      WRITE(OUT,1001) COMTOP
 1001 FORMAT(/,1X,'USING ',I10,' REAL WORDS OF CORE.')
C
      CALL LOCATE(INPUT,'# LAGTR ##',IERR)
      IF (IERR .EQ. 0) THEN
        READ(INPUT,'(3I5)') MASTER,IDFILE,ICCSD
      ELSE
        MASTER = 0
        IDFILE = 0
        CCSD = .FALSE.
      END IF
      IF(ICCSD.EQ.1) CCSD = .TRUE.
      IF(MASTER.EQ.1) CALL INITMF(1)
C
C     ----- READ DIMENSIONS FROM DRT TAPE -----
C
      CALL WREADW(IT58,DRTVER,INTOWP(1),1,END)
      CALL WREADW(IT58,LBLDRT,26,END,END)
      CALL WREADW(IT58,NBF,1,END,END)
      CALL WREADW(IT58,NSYM,1,END,END)
      CALL WREADW(IT58,NORBS,1,END,END)
      CALL WREADW(IT58,NROWS,1,END,END)
      CALL WREADW(IT58,NROWS4,1,END,END)
      CALL WREADW(IT58,NLEVS,1,END,END)
      CALL WREADW(IT58,NREFS,1,END,END)
      CALL WREADW(IT58,NROWOC,1,END,END)
      CALL WREADW(IT58,NROW4O,1,END,END)
      CALL WREADW(IT58,NWKS,1,END,END)
      CALL WREADW(IT58,NEWSOC,1,END,END)
      CALL WREADW(IT58,NLEVOC,1,END,END)
      CALL WREADW(IT58,LVFRM1,1,END,END)
      CALL WREADW(IT58,ISYMRB,1,END,END)
      CALL WREADW(IT58,NUMIJ,1,END,END)
      CALL WREADW(IT58,NGROUP,1,END,END)
      CALL WREADW(IT58,NUMINT,1,END,END)
      CALL WREADW(IT58,NMAX,1,END,END)
      CALL WREADW(IT58,BMAX,1,END,END)
      END=END+2
C
C WRITE THE DRT VERSION AND OTHER DRT INFORMATION TO THE OUTPUT FILE.
C
      WRITE(OUT,2001) DRTVER
 2001 FORMAT(/1X,'DRTVER  = ',F10.6)
      WRITE(OUT,2003)NBF,NSYM,NORBS,NROWS,NMAX,NUMIJ,NGROUP,ISYMRB
 2003 FORMAT( 1X,'NBF     = ',I8/
     1       ,1X,'NSYM    = ',I8/
     2       ,1X,'NORBS   = ',I8/
     3       ,1X,'NROWS   = ',I8/
     4       ,1X,'NMAX    = ',I8/
     5       ,1X,'NUMIJ   = ',I8/
     6       ,1X,'NGROUP  = ',I8/
     7       ,1X,'ISYMRB  = ',I8/)
COUT  WRITE(OUT,1002)LBLDRT
 1002 FORMAT(/,1X,'LABEL FROM DRT :   ',26A3)
      NSYMHF=NSYM
      NBFSQ=NBF*NBF
      NBFORB=NBF*NORBS
      NIJ=(NBF*(NBF+1))/2
C
C READ IN THE FIRST SECTOR OF TAPE47 WHICH CONTAINS PARAMETERS (1-100),
C POINTERS (101-150), AND THE LENGTH OF ARRAYS (151-192).  THIS ARRAY
C WILL BE STORED AT THE BEGINNING OF BLANK COMMON TO BE PASSED TO THE
C SUBROUTINE OUTPUT LATER.
C
      CALL WREADW(IT47,IA(1),192,1,JUNK)
      NBFAO=IA(1)
      NIJAO=IA(5)
C
C ZERO OUT BLANK COMMON -----------------------------------------------
C
      DO 10 II=193,INTOWP(COMTOP)
      IA(II)=0
   10 CONTINUE
C
C ALLOCATE SOME CORE FOR THE DRT INTEGER ARRAYS -----------------------
C
      EIV = IADTWP(193)
      XVEC = EIV + NBF*NBFAO
      WVEC = XVEC + NBFAO*NBFAO
      D = WVEC + NBFAO*NBFAO
CTJL
CTJL  IOFF = WPADTI(EIV+NBF*NBFAO)
      IOFF = WPADTI(D+NBF*NBFAO)
      KADD = IOFF + NIJAO
      LADD=KADD+ISYMRB
      IJADD=LADD+ISYMRB
      IJGRP=IJADD+NUMIJ
      BFSYM=IJGRP+NUMIJ
      ORBSYM=BFSYM+NBF
      ORBTBF=ORBSYM+NORBS
      JCODE=ORBTBF+NORBS
      IOUT=JCODE+NBF
      DRTTOP = IOUT + NBF
C
C     END OF POINTERS FOR DRT.  READ IN THE DRT ARRAYS NEEDED.
C
      CALL GETDRT(IA(KADD),IA(LADD),IA(IJADD),IA(IJGRP),IA(BFSYM),
     .       IA(ORBTBF),IA(IOUT),IA(ORBSYM),NSOFF,IA(JCODE),END,NGROUP)
C
C     GET NSHELL FROM TAPE30
C
      CALL WREADW(IT30,I30,200,101,JUNK)
      NSHELL = I30(27)
      NST = NSHELL*(NSHELL+1)/2
      NSTN = NST*(NST+1)/2
      WRITE(6,*) ' NIJAO  =',NIJAO
      WRITE(6,*) ' NSHELL =',NSHELL
      WRITE(6,*) ' NST    =',NST
      WRITE(6,*) ' NSTN   =',NSTN
C
C     ALLOCATE CORE FOR SETUP
C
      KATOM  = DRTTOP
      KTYPE  = KATOM + NSHELL
      KLOC   = KTYPE + NSHELL
      TENBUF = KLOC + NSHELL
C
      AOPS = TENBUF
      LNSR = AOPS + NSHELL
      SHBKT = LNSR + NST
      KLOFF = SHBKT + NST
      RSOFF = KLOFF + NST
      MAPIJ = RSOFF + NST
      INTOP = MAPIJ + NIJAO
      SECBUF = IADTWP(INTOP)
C
      SPACEY = COMTOP - SECBUF
C
C     READ TAPE 30 TO GET KATOM, KTYPE AND KLOC
C
      CALL READ30(IA(KATOM),IA(KTYPE),IA(KLOC),IA(TENBUF))
C
C     LET'S ZERO OUT THE SPACE USED AS A BUFFER BY READ30
C
      DO 60 II=TENBUF,TENBUF+200
      IA(II)=0
   60 CONTINUE
C
C     NOW LET'S SETUP AOPS, LNSR AND STSRM FOR TRNSEC
C
      CALL SETUP1(IA(AOPS),IA(KTYPE),IA(MAPIJ),IA(IOFF),IA(KLOC))
C
C MXBKT AND BKTSZ ARE ARBITRARY PARAMETERS WHOSE VALUES SHOULD BE
C OPTIMIZED FOR THE CONDITIONS UNDER WHICH THE PROGRAM IS RUN.
C
      MXBKT=500
      BKTSZ = 4096
      BKTSZ2 = INTOWP(4096)
C
C ALLOCATE CORE FOR THE REST OF THE PROGRAM AND THEN ASK FOR THE
C AMOUNT OF CORE NEEDED.  ALL OF CORE IS ALLOCATED HERE, ALTHOUGH
C SOME OF THE POINTERS MAY NOT BE USED RIGHT AWAY.
C
C INTEGER ARRAYS ------------------------------------------------------
C
      START=INTOP
      ILAST=START+MXBKT
      ILAST2=ILAST+MXBKT
      INTOFF=ILAST2+MXBKT
      BKTPNT=INTOFF+MXBKT
      IJOFF = BKTPNT + MXBKT
      IJBKT=IJOFF+NIJ
      INTTOP = IJBKT + NIJ
C
C REAL ARRAYS, EXCEPT FOR ISRTAR, WHICH IS THE INTEGER EQUIVALENT OF
C SRTAR ---------------------------------------------------------------
C
      F = IADTWP(INTTOP)
      H=F+NBF*NBF
      X=H+NBF*NBF
      SQ1 = X + NBF*NBF
      TPDM=SQ1+NBFAO*NBFAO
      SRTAR=X+NMAX
      ISRTAR=INTOWP(SRTAR) - 1
      SPACE = COMTOP - TPDM - BKTSZ
      NGRPIJ=SPACE/INTOWP(NIJ)
      IF(NGRPIJ.GT.NIJ) NGRPIJ=NIJ
CGES
      IF(NGRPIJ.GT.100) NGRPIJ=100
CGES
      LEN=NGRPIJ*NIJ
      LENR=LEN
      LENINT=LEN+LEN
      NBKT=NIJ/NGRPIJ
      LGRPIJ = NIJ - (NBKT*NGRPIJ)
      IF(LGRPIJ.NE.0) THEN
      NBKT = NBKT + 1
      ELSE
      LGRPIJ = NGRPIJ
      END IF
      IF(NBKT.GT.MXBKT) THEN
      WRITE(OUT,2700)NBKT,MXBKT
 2700 FORMAT(/5X,'NBKT = ',I5,'  MXBKT = ',I5,'INCREASE MXBKT.')
      CALL MABORT
      END IF
C     SPACE=(COMTOP)-SRTAR
C     BKTSZ=((SPACE/NBKT)/LSECT)*LSECT
C     BKT2=(3*LEN+LSECT-1)/LSECT*LSECT
C     IF (BKTSZ .GT. BKT2) BKTSZ=BKT2
      IBIG=BKTSZ2*NBKT
      IBIG2=IBIG/2
      INTS=TPDM+LEN
      BUF=INTS+LEN
C TOP OF BLANK COMMON FOR MAKEX
      ITOP4 = BUF + NBF*NBFAO
      ITOP1=BUF+BKTSZ
C TOP OF BLANK COMMON FOR GETIT
      ITOP2=SRTAR+IBIG2
C
C POINTERS FOR OUTPUT -------------------------------------------------
C
      BUF2=X+NBF*NBF
      BUF3=BUF2+NIJ
      XAO=BUF3+NBF*NBFAO
C TOP OF BLANK COMMON FOR OUTPUTX
      ITOP3=XAO+NIJAO
      ITOP=MAX(ITOP1,ITOP2)
      ITOP=MAX(ITOP,ITOP3)
      ITOP=MAX(ITOP,ITOP4)
      IF(ITOP.GT.COMTOP) THEN
      WRITE(OUT,2750) ITOP
 2750 FORMAT(/5X,'NOT ENOUGH CORE TO COMPLETE THE CALCULATION.'/,
     1        5X,'NEED ',I8,'  REAL WORDS OF CORE.')
      CALL MABORT
      END IF
C
C ZERO OUT BLANK COMMON -----------------------------------------------
C
C     DO 10 II=IOFF,INTOWP(ITOP)
C     IA(II)=0
C  10 CONTINUE
C
C DO WHATEVER INITG DOES ----------------------------------------------
C
      CALL INITG(IA(IOFF),IA(IJOFF),IA(IJBKT),NGRPIJ,LENR)
C
C READ TAPE47 FOR THE EIGENVECTOR IN PITZER ORDERING AND CONVERT TO
C DRT ORDERING --------------------------------------------------------
C
      CALL VECS(A(D),IA(IOUT),ACRCY,A(XVEC),A(WVEC),NOCC,IFLAG)
CGES  D IS THE NORMAL VECTOR AND WVEC IS IN DRT ORDERING
C
CGES  CALL READ47(A(EIV),IA(ORBTBF),A(F),IA(1))
      CALL WRT40S(A(EIV),IA(ORBTBF),A(WVEC),IA(1),NOCC,IFLAG)
C
      DO 20 II=WPADTI(F),INTOWP(F+NBF*NBFAO)
      IA(II)=0
   20 CONTINUE
C
C READ IN THE MO DENSITY MATRICES AND INTEGRALS.  STORE THE ONE
C PARTICLE DENSITY MATRIX IN F AND THE ONE ELECTRON INTEGRALS IN H.
C WRITE THE MO TWO PARTICLE DENSITY MATRIX IN IJ BLOCKS IN DRT ORDERING
C TO IT91.  WRITE THE MO TWO ELECTRON INTEGRALS IN IJ BLOCKS IN DRT
C ORDERING TO IT93 ---------------------------------------------------
C
      CALL GETIT(IA(IOFF),IA(IJADD),IA(IJGRP),IA(KADD),IA(LADD),
     1 IA(ORBTBF),A(F),A(H),A(X),IA(ORBSYM),
     2 IA(START),IA(ILAST),IA(ILAST2),IA(INTOFF),IA(BKTPNT),
     3 A(SRTAR),BKTSZ,BKTSZ2,IA(ISRTAR))
C
      CALL TRSET(3)
COUT  CALL TRSET(6)
      CALL TSET(3)
COUT  CALL TSET(6)
C
C WE NO LONGER NEED THE MO TPDM FILE53.  SO GET RID OF IT, IF DESIRED.
C
C     IF(IDFILE.EQ.1) CALL RCLOSE(IT53,4)
C
C FORM THE LAGRANGIAN MATRIX IN DRT ORDERING AND HALF-TRANSFORM THE
C TWO PARTICLE DENSITY INTO THE AO BASIS ------------------------------
C
      CALL MAKEX(A(X),A(F),A(H),A(TPDM),A(INTS),A(BUF),IA(WPADTI(BUF)),
     1 IA(ORBSYM),NGRPIJ,LENINT,LENR,BKTSZ,IA(INTOFF),IA(ILAST),
     2 IA(ILAST2),IA(IJOFF),IA(IJBKT),ECINEW,A(D),IA(IOFF),BKTSZ2,
     3 A(SQ1),IA(MAPIJ))
C
C WE NO LONGER NEED THE WORK FILES 91 AND 93 SO LET'S GET RID OF THEM.
C
      CALL RCLOSE(IT91,4)
      CALL RCLOSE(IT93,4)
C
C ZERO OUT BLANK COMMON FOR OUTPUT ------------------------------------
C
      DO 30 II=WPADTI(BUF),INTOWP(ITOP)
      IA(II)=0
   30 CONTINUE
C
C WRITE THE MO LAGRANGIAN IN DRT ORDERING ,THE MO ONE PDM AND THE
C ONE ELECTRON INTEGRALS TO TAPE47.  FORM THE AO LAGRANGIAN AND
C WRITE IT TO TAPE47 ALSO ---------------------------------------------
C
      CALL OUTPUT(IA(IOFF),A(F),A(H),A(X),A(D),IA(ORBTBF),A(BUF2),
CGES  CALL OUTPUT(IA(IOFF),A(F),A(H),A(X),A(EIV),IA(ORBTBF),A(BUF2),
     1 A(BUF3),A(XAO),ECINEW,IA(1))
C
C DO THIS AGAIN FOR NOW TO GET THE EIGENVECTOR BACK FOR TRNSEC
C READ TAPE47 FOR THE EIGENVECTOR IN PITZER ORDERING AND CONVERT TO
C DRT ORDERING --------------------------------------------------------
C
CGES  CALL READ47(A(EIV),IA(ORBTBF),A(F),IA(1))
C
      DO 40 II=INTOP,INTOWP(COMTOP)
      IA(II)=0
   40 CONTINUE
C
C
C THE NEXT PART WILL BE MODIFIED WHEN AN OUT OF CORE VERSION IS
C IMPLEMENTED ---------------------------------------------------------
C
      SPACY = SPACEY - SEC2I(100) - NBFAO*NBFAO -NBFAO*NBFAO
      NMUNU = SPACY/(NIJ+NGRPIJ)
      IF(NMUNU.GT.NIJAO) NMUNU = NIJAO
CTJL  SPACY = SPACY - NGRPIJ*NMUNU
      SPACY = NIJ*NMUNU
      WRITE(CHK,*) '  NMUNU,NIJAO = ',NMUNU,NIJAO
      WBUF = SECBUF
      XTP  = WBUF + NMUNU*NGRPIJ
      P    = XTP + NBFAO*NBFAO
      UBUF = P + NBFAO*NBFAO
      TBUF = UBUF + NMUNU*NIJ
      TOP  = TBUF + SEC2I(100)
      IF(TOP.GT.COMTOP) THEN
      WRITE(6,*) '  NOT ENOUGH CORE: TOP,COMTOP = ',TOP,COMTOP
      CALL MABORT
      END IF
C
      CALL SETUP2(IA(AOPS),IA(KTYPE),IA(LNSR),IA(SHBKT),
     .            IA(RSOFF),IA(KLOFF),IA(IOFF),IA(KLOC))
C
      CALL TRNSEC(IA(AOPS),IA(KLOC),IA(IOFF),A(D),A(UBUF),
     .            A(TBUF),IA(SHBKT),IA(KATOM),A(XTP),
     .            IA(MAPIJ),A(WBUF),A(P),IA(KTYPE),
     .            IA(LNSR),IA(RSOFF),IA(KLOFF))
C
      WRITE(OUT,4)
C
      RETURN
      END
C
C----------------------------------------------------------------------
C
      SUBROUTINE GETDRT(KADD,LADD,IJADD,IJGRP,BFSYM,ORBTBF,IOUT,ORBSYM,
     .                  NSOFF,JCODE,END,NGROUP)
      IMPLICIT INTEGER (A-Z)
C
C     EXTENDED DUMMY KADD,LADD,IJADD,IJGRP,BFSYM,ORBTBF,IOUT,ORBSYM,JCOD
C
      COMMON/TAPES/ OUT,CHK,IT30,IT47,IT52,IT53,IT55,IT58,IT91,IT93,IT95
      COMMON /DIMS/ ISYMRB,NUMIJ,NIJ,NBF,NIJAO,NBFAO,NORBS,NMAX,NSYMHF
      DIMENSION KADD(ISYMRB),LADD(ISYMRB),IJADD(NUMIJ),IJGRP(NUMIJ)
      DIMENSION BFSYM(NBF),IOUT(NBF),ORBTBF(NORBS),ORBSYM(NORBS)
      DIMENSION NSOFF(NSYMHF),NSO(8),JCODE(NBF)
C
      DO 10 II=1,NSYMHF
      NSO(II)=0
   10 CONTINUE
      CALL WREADW(IT58,KADD,ISYMRB,END,END)
      CALL WREADW(IT58,LADD,ISYMRB,END,END)
      CALL WREADW(IT58,IJADD,NUMIJ,END,END)
      CALL WREADW(IT58,IJGRP,NUMIJ,END,END)
      END=END+4*NORBS+NGROUP
      CALL WREADW(IT58,IOUT,NBF,END,END)
      CALL WREADW(IT58,ORBSYM,NORBS,END,END)
      CALL WREADW(IT58,BFSYM,NBF,END,END)
      CALL WREADW(IT58,JCODE,NBF,END,END)
      CALL WREADW(IT58,ORBTBF,NORBS,END,END)
CGES
C     IOUT IS NEEDED IN MONGO TO REORDER THE MO'S
      CALL RFILE(85)
      CALL SWRIT(85,IOUT,NBF)
      CALL RCLOSE(85,3)
      WRITE(*,*)'                                '
      WRITE(*,*)'IOUT HAS BEEN WRITTEN TO FILE 85'
      WRITE(*,*)'                                '
C
      DO 20 II=1,NORBS
      IRBSM=ORBSYM(II)
      NSO(IRBSM)=NSO(IRBSM)+1
   20 CONTINUE
      NSOFF(1)=0
      DO 30 II=2,NSYMHF
      NSOFF(II)=NSOFF(II-1)+NSO(II-1)
   30 CONTINUE
C     PRINT*,'  NSO: ',NSO
C     PRINT*,'  NSOFF:',NSOFF
C     PRINT*,' ORBSYM= ',ORBSYM
C     PRINT*,' LADD= ',LADD
C     PRINT*,' KADD= ',KADD
C     PRINT*,' IJADD= ',IJADD
C     PRINT*,' ORBTBF= ',ORBTBF
C     PRINT*,' JCODE= ',JCODE
C     PRINT*,' BFSYM= ',BFSYM
C     PRINT*,' IOUT=',IOUT
C     PRINT*,' IJGRP',IJGRP
      RETURN
      END
      SUBROUTINE GETIT(IOFF,IJADD,IJGRP,KADD,LADD,
     1 ORBTBF,F,H,BUF,ORBSYM,START,ILAST,ILAST2,INTOFF,BKTPNT,
     2 SRTAR,BKTSZ,BKTSZ2,ISRTAR)
      IMPLICIT INTEGER (A-Z)
C     EXTENDED DUMMY IOFF,IJADD,IJGRP,KADD,LADD,ORBTBF,F,H,
C    1 BUF,ORBSYM,START,ILAST,ILAST2,INTOFF,BKTPNT,SRTAR,ISRTAR
      REAL*8 BUF(NMAX),VAL,F(NBF,NBF),SRTAR(NMAX)
      REAL*8 H(NBF,NBF),D8,D4,D2,ECI,VAL2
      LOGICAL IJEQ,IJKEQ,JKEQ,CCSD
      COMMON /FILES/ IT40,IT54,CCSD
      COMMON /ORD/ IFAC1,IFAC2
      COMMON/TAPES/ OUT,CHK,IT30,IT47,IT52,IT53,IT55,IT58,IT91,IT93,IT95
      COMMON /SRT/ VAL,IADR,IBKT,NBKT,NGRPIJ,LGRPIJ,NMUNU
      COMMON /D2H/ MAXD2H(42),NBFSQ
      COMMON /DIMS/ ISYMRB,NUMIJ,NIJ,NBF,NIJAO,NBFAO,NORBS,NMAX,NSYMHF
      COMMON /NREP/ REP
      DIMENSION IOFF(NIJAO),IJGRP(NUMIJ),ORBTBF(NORBS),ORBSYM(NORBS),
     * IJADD(NUMIJ),KADD(ISYMRB),LADD(ISYMRB),ILBL(26),ISRTAR(1)
      DIMENSION START(1),ILAST(1),ILAST2(1),INTOFF(1),BKTPNT(1)
      REAL*8 DUM(56),REP
CJ    DATA D8, D4, D2 / 0.125D0, 0.25D0, 0.5D0 /
      WRITE(CHK,2001)
 2001 FORMAT(/5X,'IN GETIT')
      ECI=0.0D0
C     PRINT*,'  READING TPDM FROM TAPE 53'
C     PRINT*,'  D8=',D8,'  D4=',D4,'  D2=',D2
      D8=0.125D0
      D4=0.25D0
      D2=0.5D0
      IF(CCSD) THEN
        D8=1.0D0
        D4=1.0D0
        D2=1.0D0
      END IF
      DO 120 II=1,NBF
      DO 110 JJ=1,NBF
      F(II,JJ)=0.0D0
      H(II,JJ)=0.0D0
  110 CONTINUE
  120 CONTINUE
C
C FIRST READ IN THE ONE AND TWO PARTICLE DENSITY MATRICES IN DRT
C ORDERING, THEN DO THE THE SAME FOR THE MO INTEGRALS.
C
      CALL SREW(IT53)
      CALL SRTONE(BKTPNT,START,ILAST,BKTSZ2,SRTAR,ISRTAR,INTOFF,IT91)
      SRIN=0
      IGRP=0
      DO 130 IOR=NORBS,1,-1
      ISM=ORBSYM(IOR)
      ITYP=1
      DO 140 JOR=IOR,1,-1
      IF (IGRP .NE. IJGRP(IOFF(IOR)+JOR)) THEN
C     CALL RGETSA(IT53,IX)
CGES  PRINT*,'  READING FROM IT53 AT ADR ',IX
      CALL SREAD(IT53,BUF,INTOWP(NMAX))
      WRITE(CHK,*) '  HERE IS THE TPDM AS READ FROM 53 :'
CJ    WRITE(6,*) ' NMAX ',NMAX
CJ    WRITE(*,2002) (BUF(IOP), IOP=1,NMAX)
 2002 FORMAT(1X,7F18.8)
      SRIN=SRIN+NMAX*2/112
      IGRP=IJGRP(IOFF(IOR)+JOR)
      END IF
      JSM=ORBSYM(JOR)
      IJEQ=IOR.EQ.JOR
      IJT=ITYP
      IF (IJEQ) IJT=IJT+2
      IJSYM=IEOR((ISM-1),(JSM-1))
      KOFF=IJSYM*NORBS
      JAD=IJADD(IOFF(IOR)+JOR)
      DO 150 KOR=1,JOR
      KSM=ORBSYM(KOR)
      JKEQ=JOR.EQ.KOR
      IJKT=IJT
      IF (JKEQ) IJKT=IJKT+1
      IJKEQ=IJEQ.AND.JKEQ
      IJKSYM=IEOR(IJSYM,(KSM-1))
      LOFF=IJKSYM*NORBS
      KAD=JAD+KADD(KOFF+KOR)
      DO 160 LOR=1,KOR
      IF (JOR.EQ.KOR .AND. KOR.EQ.LOR .AND. LOR.LT.IOR) GOTO 301
      LSM=ORBSYM(LOR)
      IF ((LSM-1) .NE. IJKSYM) GOTO 301
      IJKLT=IJKT
      IF (IJKEQ .AND. KOR.GT.LOR) IJKLT=IJKLT+1
      IF (KOR.EQ.LOR) IJKLT=IJKLT+3
      LAD=KAD+LADD(LOFF+LOR)
      IF (IJKLT.GT.7 .OR. IJKLT.LT.1) THEN
      WRITE(OUT,14)IJKLT,IOR,JOR,KOR,LOR,IBF,JBF,KBF,LBF,ISM,JSM,KSM,LSM
   14 FORMAT(1X,'  IN GETDM, IJKLT UNKNOWN TYPE ',I5/'  ORBITALS :',4I5/
     * '  BASIS FUNCTIONS :',4I5/'   SYMMETRIES :',4I5)
clj020589 Replace STOP with call to MABORT
          call mabort
      END IF
      IF (LAD .GT. NMAX) THEN
      WRITE(OUT,1005)LAD
 1005 FORMAT(1X,'  IN GETDM, LAD TOO BIG :',I6)
clj020589 Replace STOP with call to MABORT
      call mabort
      END IF
      GOTO (10,20,30,40,50,60,70)IJKLT
 10   VAL=BUF(LAD+1)*D8
      CALL GORDR(IOR,KOR,JOR,LOR)
      VAL=BUF(LAD+2)*D8
      CALL GORDR(IOR,JOR,KOR,LOR)
      VAL=BUF(LAD+3)*D8
      CALL GORDR(IOR,LOR,JOR,KOR)
      GOTO 301
 20   VAL=BUF(LAD+1)*D8
      CALL GORDR(IOR,JOR,JOR,LOR)
      VAL=BUF(LAD+2)*D4
      CALL GORDR(IOR,LOR,JOR,JOR)
      GOTO 301
 30   VAL=BUF(LAD+1)*D8
      CALL GORDR(IOR,KOR,IOR,LOR)
      VAL=BUF(LAD+2)*D4
      CALL GORDR(IOR,IOR,KOR,LOR)
      GOTO 301
 40   VAL=BUF(LAD+1)*D8
      CALL GORDR(IOR,LOR,JOR,LOR)
      VAL=BUF(LAD+2)*D4
      CALL GORDR(IOR,JOR,LOR,LOR)
      GOTO 301
 50   VAL=BUF(LAD+1)*D4
      CALL GORDR(IOR,IOR,IOR,LOR)
      VAL=BUF(LAD+2)*D4
      CALL GORDR(IOR,LOR,LOR,LOR)
      VAL=BUF(LAD+3)*D2
      F(IOR,LOR)=VAL
      F(LOR,IOR)=VAL
      GOTO 301
 60   VAL=BUF(LAD+1)*D4
      CALL GORDR(IOR,LOR,IOR,LOR)
      VAL=BUF(LAD+2)*D2
      CALL GORDR(IOR,IOR,LOR,LOR)
      GOTO 301
 70   VAL=BUF(LAD+1)
      CALL GORDR(IOR,IOR,IOR,IOR)
      VAL=BUF(LAD+2)
      F(IOR,IOR)=VAL
 301  CONTINUE
  160 CONTINUE
  150 CONTINUE
  140 CONTINUE
  130 CONTINUE
      CALL SRTLST
CGES  PRINT*,'  THE ONE PDM :'
CGES  CALL MATOUT(F,NBF,NBF,NBF,NBF,6)
CDEB  PRINT*,SRIN,'  SECTORS READ FROM IT53 AND SORTED ONTO TAPE ',IT91
CGES  ************************************
      CALL RCLOSE(IT53,4)
C     CALL RCLOSE(IT53,3)
      WRITE(CHK,1019)
      WRITE(6  ,1019)
 1019 FORMAT(1X,'  GETTING RID OF FILE 53')
CGES  ************************************
      WRITE(CHK,1006)
 1006 FORMAT(1X,'  READING MO INTEGRALS ')
C
C POSITION TAPE2 AT THE BEGINNING OF THE MO INTEGRALS, AND PICK UP
C THE NUCLEAR REPULSION ENERGY IN POSITION 31 OF REAL ARRAY DUM.
C
COUT  WRITE(6,*) ' CCSD ',CCSD
      IF (.NOT.CCSD) CALL SREAD(IT52,DUM,112)
CDEB  DO I=1,56
CDEB  WRITE(OUT,2032)I,DUM(I)
C2032 FORMAT(/5X,'I = ,DUM(I) = ',I5,F20.10)
CDEB  END DO
      REP=DUM(31)
CJ    WRITE(6,*) ' REP ',REP
      CALL SRTONE(BKTPNT,START,ILAST2,BKTSZ2,SRTAR,ISRTAR,INTOFF,IT93)
      SRIN=0
      IGRP2=0
      DO 170 IOR=NORBS,1,-1
      ISM=ORBSYM(IOR)
      ITYP=1
      DO 180 JOR=IOR,1,-1
      IJ=IOFF(IOR)+JOR
      JJ=IOFF(JOR)+JOR
      IF (IGRP2 .NE. IJGRP(IOFF(IOR)+JOR)) THEN
CDEB  CALL RGETSA(IT52,IX)
CGES  PRINT*,'  READING FROM IT52 AT ADR ',IX
      CALL SREAD(IT52,BUF,INTOWP(NMAX))
      WRITE(CHK,*) '  HERE IS THE INTS AS READ FROM 2 :'
CJ    WRITE(*,2003) (BUF(IOP), IOP=1,NMAX)
 2003 FORMAT(1X,7F18.8)
      SRIN=SRIN+NMAX*2/112
      IGRP2=IJGRP(IOFF(IOR)+JOR)
      END IF
      JSM=ORBSYM(JOR)
      IJEQ=IOR.EQ.JOR
      IJT=ITYP
      IF (IJEQ) IJT=IJT+2
      IJSYM=IEOR((ISM-1),(JSM-1))
      KOFF=IJSYM*NORBS
      JAD=IJADD(IOFF(IOR)+JOR)
      DO 190 KOR=1,JOR
      IK=IOFF(IOR)+KOR
      JK=IOFF(JOR)+KOR
      KK=IOFF(KOR)+KOR
      KSM=ORBSYM(KOR)
      JKEQ=JOR.EQ.KOR
      IJKT=IJT
      IF (JKEQ) IJKT=IJKT+1
      IJKEQ=IJEQ.AND.JKEQ
      IJKSYM=IEOR(IJSYM,(KSM-1))
      LOFF=IJKSYM*NORBS
      KAD=JAD+KADD(KOFF+KOR)
      DO 200 LOR=1,KOR
      IL=IOFF(IOR)+LOR
      JL=IOFF(JOR)+LOR
      KL=IOFF(KOR)+LOR
      LL=IOFF(LOR)+LOR
      IF (JOR.EQ.KOR .AND. KOR.EQ.LOR .AND. LOR.LT.IOR) GOTO 302
      LSM=ORBSYM(LOR)
      IF ((LSM-1) .NE. IJKSYM) GOTO 302
      IJKLT=IJKT
      IF (IJKEQ .AND. KOR.GT.LOR) IJKLT=IJKLT+1
      IF (KOR.EQ.LOR) IJKLT=IJKLT+3
      LAD=KAD+LADD(LOFF+LOR)
      IF (IJKLT.GT.7 .OR. IJKLT.LT.1) THEN
      WRITE(6,1007)IJKLT,IOR,JOR,KOR,LOR,IBF,JBF,KBF,LBF,ISM,JSM,KSM,LSM
 1007 FORMAT(1X,'  IN GETDM, IJKLT UNKNOWN TYPE ',I5/'  ORBITALS :',4I5/
     * '  BASIS FUNCTIONS :',4I5/'   SYMMETRIES :',4I5)
clj020589 Replace STOP with call to MABORT
      call mabort
      END IF
      IF (LAD .GT. NMAX) THEN
      WRITE(6,1008)LAD
 1008 FORMAT(1X,'  IN GETDM, LAD TOO BIG :',I6)
clj020589 Replace STOP with call to MABORT
      call mabort
      END IF
      GOTO (12,22,32,42,52,62,72)IJKLT
 12   VAL2=BUF(LAD+1)
      IFAC1=8
      IFAC2=8
      CALL IORDR(IOR,KOR,JOR,LOR,VAL2)
      VAL2=BUF(LAD+2)
      CALL IORDR(IOR,JOR,KOR,LOR,VAL2)
      VAL2=BUF(LAD+3)
      CALL IORDR(IOR,LOR,JOR,KOR,VAL2)
      GOTO 302
 22   VAL2=BUF(LAD+1)
      IFAC1=8
      IFAC2=8
      CALL IORDR(IOR,JOR,JOR,LOR,VAL2)
      VAL2=BUF(LAD+2)
      IFAC2=4
      CALL IORDR(IOR,LOR,JOR,JOR,VAL2)
      GOTO 302
 32   VAL2=BUF(LAD+1)
      IFAC1=8
      IFAC2=8
      CALL IORDR(IOR,KOR,IOR,LOR,VAL2)
      VAL2=BUF(LAD+2)
      IFAC1=4
      CALL IORDR(IOR,IOR,KOR,LOR,VAL2)
      GOTO 302
 42   VAL2=BUF(LAD+1)
      IFAC1=8
      IFAC2=8
      CALL IORDR(IOR,LOR,JOR,LOR,VAL2)
      VAL2=BUF(LAD+2)
      IFAC2=4
      CALL IORDR(IOR,JOR,LOR,LOR,VAL2)
      GOTO 302
 52   VAL2=BUF(LAD+1)
      IFAC1=4
      IFAC2=8
      CALL IORDR(IOR,IOR,IOR,LOR,VAL2)
      VAL2=BUF(LAD+2)
      IFAC1=8
      IFAC2=4
      CALL IORDR(IOR,LOR,LOR,LOR,VAL2)
      VAL=BUF(LAD+3)
      H(IOR,LOR)=VAL
      H(LOR,IOR)=VAL
      GOTO 302
 62   VAL2=BUF(LAD+1)
      IFAC1=8
      IFAC2=8
      CALL IORDR(IOR,LOR,IOR,LOR,VAL2)
      VAL2=BUF(LAD+2)
      IFAC1=4
      IFAC2=4
      CALL IORDR(IOR,IOR,LOR,LOR,VAL2)
      GOTO 302
 72   VAL2=BUF(LAD+1)
      IFAC1=4
      IFAC2=4
      CALL IORDR(IOR,IOR,IOR,IOR,VAL2)
      VAL=BUF(LAD+2)
      H(IOR,IOR)=VAL
 302  CONTINUE
  200 CONTINUE
  190 CONTINUE
  180 CONTINUE
  170 CONTINUE
      CALL SRTLST
C***********************************************************************
C     WRITE(CHK,*)SRIN,' SECTORS READ FROM IT52 AND SORTED ONTO TAPE '
C    & ,IT93
C***********************************************************************
C     WRITE(OUT,3100)
C3100 FORMAT(/5X,'THE ONE ELECTRON MO INTEGRALS '/)
C     CALL MATOUT(H,NBF,NBF,NBF,NBF,OUT)
      RETURN
      END
      SUBROUTINE INITG(IOFF,IJOFF,IJBKT,NGRPIJ,LENR)
          IMPLICIT INTEGER (A-Z)
C     EXTENDED DUMMY IOFF,IJOFF,IJBKT
      REAL*8 VAL,FACT,VAL2
      DIMENSION IOFF(NIJAO),IJOFF(NIJ),IJBKT(NIJ)
      COMMON /ORD/ IFAC1,IFAC2
      COMMON/TAPES/ OUT,CHK,IT30,IT47,IT52,IT53,IT55,IT58,IT91,IT93,IT95
      COMMON /DIMS/ ISYMRB,NUMIJ,NIJ,NBF,NIJAO,NBFAO,NORBS,NMAX,NSYMHF
      COMMON /SRT/ VAL,IADR,IBKT,NBKT,XGRPIJ,LGRPIJ
C
      DO 20 IJ=1,NIJ
      IJBKT(IJ)=IJ/NGRPIJ
      IF (NGRPIJ*IJBKT(IJ) .NE. IJ) IJBKT(IJ)=IJBKT(IJ)+1
   20 CONTINUE
      DO 30 IJ=1,NIJ
      IJOFF(IJ)=(IJ-(IJBKT(IJ)-1)*NGRPIJ-1)*NIJ
   30 CONTINUE
      RETURN
C
C
      ENTRY GORDR(I,J,K,L)
      IJ=IOFF(I)+J
      KL=IOFF(K)+L
      IBKT=IJBKT(IJ)
      IADR=IJOFF(IJ)+KL
CJ    WRITE(6,*) ' I,J,K,L,VAL ',I,J,K,L,VAL
      IF (IBKT.GT.NBKT .OR. IADR.GT.LENR) THEN
      WRITE(OUT,2301)I,J,K,L,IJ,KL,IBKT,IADR
 2301 FORMAT(/5X,'I,J,K,L,IJ,KL,IBKT,IADR = ',8I8)
clj020589 Replace STOP with call to MABORT
      call mabort
      END IF
      CALL SRTOUT
      IF (IJ .EQ. KL) RETURN
      IBKT=IJBKT(KL)
      IADR=IJOFF(KL)+IJ
      IF (IBKT.GT.NBKT .OR. IADR.GT.LENR) THEN
      WRITE(OUT,2301)I,J,K,L,IJ,KL,IBKT,IADR
clj020589 Replace STOP with call to MABORT
      call mabort
      END IF
      CALL SRTOUT
      RETURN
C
      ENTRY IORDR(I,J,K,L,VAL2)
      IJ=IOFF(I)+J
      KL=IOFF(K)+L
      IBKT=IJBKT(IJ)
      IADR=IJOFF(IJ)+KL
      VAL=VAL2*IFAC1
      IF (IBKT.GT.NBKT .OR. IADR.GT.LENR) THEN
      WRITE(OUT,2301)I,J,K,L,IJ,KL,IBKT,IADR
      END IF
      CALL SRTOUT
      IF (IJ .EQ. KL) RETURN
      IBKT=IJBKT(KL)
      IADR=IJOFF(KL)+IJ
      VAL=VAL2*IFAC2
      IF (IBKT.GT.NBKT .OR. IADR.GT.LENR) THEN
      WRITE(OUT,2301)I,J,K,L,IJ,KL,IBKT,IADR
      END IF
      CALL SRTOUT
      RETURN
      END
      SUBROUTINE OUTPUT(IOFF,F,H,X,EIV,ORBTBF,BUF,BUF2,XAO,ECINEW,
     1 IA47)
      IMPLICIT REAL*8 (A-H,O-Z)
C     EXTENDED DUMMY IOFF,F,H,X,EIV,ORBTBF,BUF,BUF2,XAO,IA47
      CHARACTER*6 CALTYP,CITYP,DERTYP
      COMMON /DIMS/ ISYMRB,NUMIJ,NIJ,NBF,NIJAO,NBFAO,NORBS,NMAX,NSYMHF
      COMMON/TAPES/ OUT,CHK,IT30,IT47,IT52,IT53,IT55,IT58,IT91,IT93,IT95
      COMMON /FILES/ IT40,IT54,CCSD
      COMMON /MSTR/ MASTER
      LOGICAL CCSD
      INTEGER IOFF(NIJAO),ORBTBF(NBF),LBL(26),IA47(192)
      INTEGER OUT,CHK,INDEX(100)
      REAL*8 X(NBF,NBF),H(NBF,NBF),F(NBF,NBF),XAO(NIJAO)
     1,EIV(NBF,NBFAO),BUF(NIJ),BUF2(NBFAO,NBF)
      DIMENSION LOC(112),LORD(200)
      DATA Z0 /0.0D0/
C
C     PRINT*,'  IN OUTPUT'
      TOL=1.0D-08
      IT49=49
      IT47=47
CIBM  CALL SREW(IT47)
      ECI=0.0D0
C     WRITE(3,'('   ENTER IDBG PRINT OPTION.')')
C     READ(3,'(I2)') IDBG
CSEL  READ(5,'(2I5)') IDBG,ISYMZ
      IDBG= 0
      ISYMZ=0
      IF(ISYMZ.NE.0) WRITE(6,1009)
 1009 FORMAT(1X,//'  THE LAGRANGIAN WILL BE SYMMETRIZED. '//)
C
C READ IN THE LORD ARRARY FROM TAPE47
C
      LORDL=IA47(152)
      LORDS=IA47(102)
      CALL WREADW(IT47,LORD,LORDL,LORDS,JUNK)
      DO 10 IOR=1,NORBS
C     IBF=ORBTBF(IOR)
C     IYY=LORD(IBF)
      DO 20 JOR=1,IOR
C     JBF=ORBTBF(JOR)
C     JYY=LORD(JBF)
      IJ=IOFF(MAX0(IOR,JOR))+MIN0(IOR,JOR)
      BUF(IJ)=H(IOR,JOR)
   20 CONTINUE
   10 CONTINUE
      IF ((IAND(IDBG,1)) .NE. 0) THEN
      WRITE(CHK,*) ' H IN MO BASIS AS WRITTEN TO 47'
C
C WRITE H, THE ONE ELECTRON MO INTEGRALS TO TAPE47.
C
CTJL  WRITE(CHK,2222)
C2222 FORMAT(/1X,'H IN MO BASIS AS WRITTEN TO 47'/)
CTJL  CALL PRINT(BUF,NIJ,NBF,OUT)
      END IF
      DO 30 IOR=1,NORBS
C     IBF=ORBTBF(IOR)
C     IYY=LORD(IBF)
      DO 40 JOR=1,IOR
C     JBF=ORBTBF(JOR)
C     JYY=LORD(JBF)
      IJ=IOFF(MAX0(IOR,JOR))+MIN0(IOR,JOR)
      BUF(IJ)=F(IOR,JOR)
   40 CONTINUE
   30 CONTINUE
C
C WRITE Q IN THE MO BASIS TO TAPE47.
C
CTJL  WRITE(CHK,*) ' Q IN MO BASIS AS WRITTEN TO  47'
CGES
      WRITE(*,2223)
 2223 FORMAT(/1X,'ONE PDM IN MO BASIS IS WRITTEN TO 47'/)
      MOPDPT = IA47(119)+INTOWP(NBF*NBF)+2*INTOWP(NIJAO)
      MOPDLN = INTOWP(NIJ)
      CALL WWRITW(IT47,MOPDPT,1,123,JUNK)
      CALL WWRITW(IT47,MOPDLN,1,173,JUNK)
      CALL WWRITW(IT47,BUF,MOPDLN,MOPDPT,JUNK)
CTJL  IF((IAND(IDBG,2)) .NE. 0) THEN
CGES
COUT  CALL PRINT(BUF,NIJ,NBF,6)
CTJL  END IF
      IF (ISYMZ.EQ.0) THEN
C     DO IOR=1,NORBS
C     IBF=ORBTBF(IOR)
C     IYY=LORD(IBF)
C     DO JOR=1,NORBS
C     JBF=ORBTBF(JOR)
C     JYY=LORD(JBF)
C     BUF2(JYY,IYY)=X(IOR,JOR)
C     END DO
C     END DO
      CONTINUE
      ELSE
      DO 50 IOR=1,NORBS
C     IYY=LORD(ORBTBF(IOR))
      DO 60 JOR=1,IOR
C     JYY=LORD(ORBTBF(JOR))
      VAL1=X(IOR,JOR)
      VAL2=X(JOR,IOR)
      VAL=(VAL1+VAL2)*0.50D0
      IF (VAL .EQ. 0.0D0) THEN
      IF (ABS(VAL1-VAL2) .GT. TOL) WRITE(6,200) IOR,JOR,VAL1,VAL2
      ELSE
      IF ((ABS((VAL1-VAL2)/VAL).GT.TOL).AND.(VAL.GT.1.0D-07))
     1  WRITE(6,200) IOR,JOR,VAL1,VAL2
      END IF
      BUF2(IOR,JOR)=VAL
      BUF2(JOR,IOR)=VAL
   60 CONTINUE
   50 CONTINUE
      DO 70 IOR=1,NORBS
      DO 80 JOR=1,NORBS
      X(IOR,JOR)=BUF2(IOR,JOR)
   80 CONTINUE
   70 CONTINUE
      END IF
  200 FORMAT(/'  *******  WARNING, THE LAGRANGIAN MATRIX IS NOT SYMMETRI
     1C: ',2I5,2G18.8)
C
C WRITE THE REORDERED LAGRANGIAN TO TAPE47.
C
C     IF((IAND(IDBG,4)) .NE. 0) THEN
C     PRINT*,'  REORDERED LAGRANGIAN AS WRITTEN TO 47'
C     WRITE(OUT,2224)
C2224 FORMAT(/5X,'REORDERED LAGRANGIAN AS WRITTEN TO 47'/)
C     CALL MATOUT(X,NBF,NBF,NBF,NBF,OUT)
C     END IF
C
C WRITE THE LAGRANGIAN IN DRT ORDERING TO TAPE47.
C
CTJL  IF ((IAND(IDBG,8)) .NE. 0) THEN
CTJL  PRINT*,'  LAGRANGIAN IN DRT ORDERING:'
CGES  WRITE(OUT,2225)
C2225 FORMAT(/5X,'LAGRANGIAN IN DRT ORDERING'/)
C     CALL MATOUT(X,NBF,NBF,NBF,NBF,OUT)
CTJL  WRITE(*,*) ' LORD ',LORD
CTJL  WRITE(*,*) ' ORBTBF ',ORBTBF
      LAGPT=IA47(119)+IA47(169)
CTJL  WRITE(OUT,833)LAGPT
C 833 FORMAT(/5X,' THE  LAGRANGIAN POINTER = ',I8)
      LAGLEN=NBF*NBF*2
      CALL WWRITW(IT47,LAGPT,1,120,JUNK)
      CALL WWRITW(IT47,LAGLEN,1,170,JUNK)
      CALL WWRITW(IT47,X,LAGLEN,LAGPT,JUNK)
C     END IF
C
C WRITE THE LAGRANGIAN IN DRT ORDERING TO TAPE40
C AND ALSO THE PITZER TO DRT ORDERING ARRAY, ORBTBF.
C
      IF(MASTER.EQ.1) CALL MWRIT(ORBTBF,5)
      IF(MASTER.EQ.1) CALL MWRIT(X,33)
      LAGFIL = 71
      CALL RFILE(LAGFIL)
      CALL SWRIT(LAGFIL,X,INTOWP(NBF*NBF))
      CALL RCLOSE(LAGFIL,3)
C     WRITE(*,*) ' WROTE TO FILE 40 '
C
C
C
C READ THE AO-MO EIGENVECTORS IN PITZER ORDERING FROM TAPE47.
C
      LEIV=IA47(160)
      LSEIV=IA47(110)
CTJL  CALL WREADW(IT47,BUF2,LEIV,LSEIV,JUNK)
CTJL  IF ((IAND(IDBG,32)) .NE. 0) THEN
CTJL  PRINT*,' '
CTJL  PRINT*,'  EIV AS READ FROM IT47'
C     WRITE(OUT,2226)
C2226 FORMAT(/5X,'EIV AS READ FROM IT47'/)
CTJL  CALL MATOUT(BUF2,NBFAO,NBF,NBFAO,NBF,OUT)
CTJL  END IF
C     PRINT*,'  NBF=',NBF,'  NIJ=',NIJ
C     PRINT*,'  IOFF:'
C     WRITE(6,'(10I7)') (IOFF(III),III=1,NIJ)
C
C  ROTATE COLUMNS OF VECTOR TO DRT TRANSPOSE ORDER; MOVE FROM BUF2 TO EI
C
CTJL  DO 90 IORB=1,NORBS
CTJL  IBF=ORBTBF(IORB)
CTJL  DO 100 II=1,NBFAO
CTJL  EIV(II,IORB)=BUF2(II,IBF)
C 100 CONTINUE
C  90 CONTINUE
C
C
C     WRITE(6,1401)
C1401 FORMAT(/'  THE VECTOR IN DRT ORDER:')
C     CALL MATOUT(EIV,NBFAO,NORBS,NBFAO,NORBS,6)
C  INVERT C MATRIX
C     CALL MATINV(EIV,BUF2,H,INDEX,NBF,NBF,DET,NBF)
C
CTJL  DO 110 II=1,NBFAO
CTJL  DO 120 JJ=1,II
CTJL  IIJJ=IOFF(II)+JJ
CTJL  VAL=0.0D0
CTJL  DO 130 I=1,NBF
CTL   DO 140 J=1,NBF
CTJL  VAL=VAL+EIV(I,II)*EIV(J,JJ)*X(I,J)
C 140 CONTINUE
C 130 CONTINUE
C     XAO(IIJJ)=VAL*0.5D0
C 120 CONTINUE
C 110 CONTINUE
      IF ((IAND(IDBG,16)) .NE. 0) THEN
      PRINT*,' '
      PRINT*,'  AO LAGRANGIAN:'
      WRITE(OUT,2227)
 2227 FORMAT(/5X,'AO LAGRANGIAN'/)
CTJL  CALL PRINT(XAO,NIJAO,NBFAO,OUT)
      END IF
      IPTAO=LAGPT+INTOWP(NBF*NBF)
      LENAO=INTOWP(NIJAO)
      CALL WWRITW(IT47,IPTAO,1,121,JUNK)
      CALL WWRITW(IT47,LENAO,1,171,JUNK)
      CALL WWRITW(IT47,XAO,LENAO,IPTAO,JUNK)
C
C NOW PUT 1PDM INTO AO BASIS
C
CTJL  CALL WREADW(IT47,BUF2,LEIV,LSEIV,JUNK)
CTJL  DO 150 IORB=1,NORBS
CTJL  IBF=ORBTBF(IORB)
CTJL  DO 160 II=1,NBFAO
CTJL  EIV(II,IORB)=BUF2(II,IBF)
C     EIV(II,IBF)=BUF2(II,IORB)
C 160 CONTINUE
C 150 CONTINUE
C
C************ THIS NEEDS TO BE CHANGED *******************************
CTJL  DO 170 II=1,NBFAO
CTJL  DO 180 JJ=1,II
CTJL  IIJJ=IOFF(II)+JJ
CTJL  VAL=0.0D0
CTJL  DO 190 I=1,NBF
CTJL  DO 210 J=1,NBF
CTJL  VAL=VAL+EIV(I,II)*EIV(J,JJ)*F(I,J)
C 210 CONTINUE
C 190 CONTINUE
C     XAO(IIJJ)=VAL
C 180 CONTINUE
C 170 CONTINUE
      CALL ZERO(BUF2,NBF*NBFAO)
      CALL MXMB(EIV,1,NBFAO,F,1,NBF,BUF2,1,NBFAO,NBFAO,NBF,NBF)
      CALL ZERO(XAO,NIJAO)
CTJL  MUNU = 0
      DO 110 MU = 1,NBFAO
      IX = IOFF(MU) + 1
      CALL MXMB(BUF2,1,NBF,EIV(MU,1),NBFAO,1,XAO(IX),1,NBFAO,MU,NBF,1)
  110 CONTINUE
C
CTJL  IF ((IAND(IDBG,16)) .NE. 0) THEN
      WRITE(OUT,*) ' '
CTJL  WRITE(OUT,*) ' AO ONE PDM:'
C     WRITE(OUT,2228)
C2228 FORMAT(/1X,'AO ONE PDM'/)
CTJL  CALL PRINT(XAO,NIJAO,NBFAO,OUT)
CTJL  END IF
      IPQAO=IPTAO+INTOWP(NIJAO)
      LENAO=INTOWP(NIJAO)
      CALL WWRITW(IT47,IPQAO,1,122,JUNK)
      CALL WWRITW(IT47,LENAO,1,172,JUNK)
      CALL WWRITW(IT47,XAO,LENAO,IPQAO,JUNK)
CTJL
CTJL  WRITE THE AO ONE PDM IN THE AO BASIS TO FILE 40.
CTJL
      IF(MASTER.EQ.1) CALL MWRIT(XAO,34)
CTJL
C
CSEL  CALL SFILE(49,FCB49)
CSEL  CALL SREW(49)
CSEL  READ(49) CALTYP,CITYP,DERTYP,NTYP,NBFAO,NBATR,VAL
C     IF (NBFAO .NE. NBF) THEN
C     WRITE(6,'(' NBFAO FROM TAPE 49= ',I6/' NBF FROM TAPE 8= ',I6)')
C    1 NBFAO,NBF
C     STOP
C     END IF
C     IF (NBATR .NE. NIJ) THEN
C     WRITE(6,'('   NBATR FROM TAPE 49=',I6/'   NIJ FROM TAPE 8=',I6)')
C    1 NBATR,NIJ
C     STOP
C     END IF
CSEL  CALL SREW(49)
CSEL  WRITE(49) CALTYP,CITYP,DERTYP,NTYP,NBFAO,NBATR,ECINEW
CSEL  DO ITYP=1,NTYP
CSEL  CALL LREADW(49,BUF,NBATR*2)
CSEL  END DO
CSEL  CALL LREADW(49,BUF,NBATR*2)
CSEL  IF (CALTYP.NE.6HGRSCF  .AND. CALTYP.NE.6HTCSCF  ) GOTO 209
CSEL  READ(49)
CSEL  READ(49)
C209  CALL LWRITW(49,F,NBATR*2)
CSEL  CALL LWRITW(49,XAO,NBATR*2)
      RETURN
      END
      SUBROUTINE SRTONE(BKTPNT,START,ILAST,BKTSZ2,TTT,ITTT,INTOFF,
     1 ITXXX)
      IMPLICIT INTEGER (A-Z)
C     EXTENDED DUMMY START,ILAST,TTT,ITTT,INTOFF,BKTPNT
      REAL*8 TTT(IBIG2),VAL
      COMMON /BIGD/ IBIG,IBIG2
      COMMON /DIMS/ ISYMRB,NUMIJ,NIJ,NBF,NIJAO,NBFAO,NORBS,NMAX,NSYMHF
      COMMON/TAPES/ OUT,CHK,IT30,IT47,IT52,IT53,IT55,IT58,IT91,IT93,IT95
      COMMON /OFF/ MAXINT
      COMMON /SRT/VAL,IADR,IDUM,NBKT
      DIMENSION ITTT(IBIG),BKTPNT(NBKT),START(NBKT),
     1 ILAST(NBKT),INTOFF(NBKT)
C     PRINT*, '  IN SRTONE'
      CALL SREW(ITXXX)
      BKTPNT(1)=1
      START(1)=0
      ILAST(1)=0
      DO 110 II=2,NBKT
      ILAST(II)=0
      START(II)=START(II-1)+BKTSZ2
      BKTPNT(II)=1
  110 CONTINUE
C***************** IMPORTANT!! **********************************
C   POINTR SHOULD BE SET EQUAL TO THE SECTOR ADDRESS OF THE FIRST
C   SECTOR ON A DIRECT ACCESS DISK FILE.
      POINTR=1
      PTAD = BKTSZ2/SEC2I(1)
      IF(SEC2I(1)*PTAD.NE.BKTSZ2) PTAD = PTAD + 1
      MAXINT=((BKTSZ2-2)/6)*INTOWP(1)
      IF(MAXINT.LE.0) THEN
      CALL MABORT
      END IF
      DO 120 II=1,NBKT
      INTOFF(II)=(START(II)+MAXINT)/INTOWP(1)+1
  120 CONTINUE
 22   CONTINUE
C     PRINT*,' NPASS= ',NPASS
C     PRINT*,' IADBK= ',IADBK
C     PRINT*,' NBKT= ',NBKT
C     PRINT*,' BKTSZ= ',BKTSZ
C     PRINT*,' MAXINT= ',MAXINT
C     PRINT*,' BKTPNT= ',BKTPNT
C     PRINT*,' START= ',START
C     PRINT*,' ILAST= ',ILAST
C     PRINT*,' INTOFF= ',INTOFF
C     PRINT*,' DONE SRTONE  NUM=',NUM
      RETURN
C
      ENTRY SRTOUT
C
      STRT=START(IDUM)
      PNT=BKTPNT(IDUM)
      OFSET=INTOFF(IDUM)
      ADRL=STRT+PNT+2
      ADRV=OFSET+PNT
      ITTT(ADRL)=IADR
      TTT(ADRV)=VAL
      BKTPNT(IDUM)=BKTPNT(IDUM)+1
      IF (ADRL .LT. INTOWP(OFSET)  ) RETURN
      ITTT(STRT+1)=ILAST(IDUM)
      ILAST(IDUM)=POINTR
      POINTR=POINTR+PTAD
      ITTT(STRT+2)=MAXINT
      CALL RGETSA(ITXXX,IX)
CGES  WRITE(*,*)'NOW WRITING FILE',ITXXX,' AT ADDRESS ',IX
      CALL RWRIT(ITXXX,ITTT(STRT+1),BKTSZ2,IX)
CIBM  CALL SWRIT(ITXXX,ITTT(STRT+1),BKTSZ)
      BKTPNT(IDUM)=1
      RETURN
C
      ENTRY SRTLST
C
      DO 130 II=1,NBKT
      STRT=START(II)
      IF (BKTPNT(II) .EQ. 1) GOTO 201
      ITTT(STRT+1)=ILAST(II)
      ILAST(II)=POINTR
      POINTR=POINTR+PTAD
      ITTT(STRT+2)=BKTPNT(II)-1
      CALL RGETSA(ITXXX,IX)
CIBM  CALL SWRIT(ITXXX,ITTT(STRT+1),BKTSZ)
CGES  WRITE(*,*)'NOW WRITING FILE',ITXXX,' AT ADDRESS ',IX
      CALL RWRIT(ITXXX,ITTT(STRT+1),BKTSZ2,IX)
  201 CONTINUE
  130 CONTINUE
C
      RETURN
      END
      SUBROUTINE MAKEX(X,F,H,TPDM,INTS,BUF,IBUF,ORBSYM,NGRPIJ,LEN,LENR,
     1 BKTSZ,INTOFF,ILAST,ILAST2,IJOFF,IJBKT,ECINEW,EIV,IOFF,BKTSZ2,
     2 SQ,MAPIJ)
      IMPLICIT INTEGER (A-Z)
C     EXTENDED DUMMY X,F,H,TPDM,INTS,BUF,IBUF,ORBSYM,INTOFF,ILAST,
C    1 ILAST2,IJOFF,IJBKT,EIV,IOFF
      INTEGER IBUF(BKTSZ2),ORBSYM(NORBS),INTOFF(1),ILAST(NBKT)
      INTEGER ILAST2(NBKT),IJOFF(NIJ),IJBKT(NIJ),ILBL(26)
      INTEGER IOFF(NIJAO),MAPIJ(NIJAO)
      REAL*8 X(NBF,NBF),F(NBF,NBF),H(NBF,NBF),TPDM(LENR),VAL
      REAL*8 INTS(LENR),BUF(BKTSZ),ECIOLD,ESCF,REP,ECINEW
      REAL*8  ECI1,ECI2,ECITOT,EIV(NBFAO,NBF),SQ(NBFAO*NBFAO),Z0
      COMMON/TAPES/ OUT,CHK,IT30,IT47,IT52,IT53,IT55,IT58,IT91,IT93,IT95
      COMMON /FILES/ IT40,IT54,CCSD
      COMMON /TUM/ IJSYM,IJSRT,II,JJ
      COMMON /SRT/ VAL,IADR,IBKT,NBKT,XGRPIJ,LGRPIJ
      COMMON /DIMS/ ISYMRB,NUMIJ,NIJ,NBF,NIJAO,NBFAO,NORBS,NMAX,NSYMHF
      COMMON /NREP/ REP
      COMMON /TRANS/ NMNB,BLEN,IBPT,ILPT
      LOGICAL CCSD
      DATA Z0 /0.0D0/
C
      CALL INITUM(ORBSYM,X,TPDM,INTS,TPDM,INTS,LENR)
C
      ECI1 = Z0
      ECI2 = Z0
      ECITOT = Z0
      CALL ZERO(X,NBF*NBF)
C
C SET UP IBPT FOR THE FIRST HALF TRANSFORMATION ---------------
C
      IBPT=1
      GRPIJ = NGRPIJ
C
      INTF=INTOFF(1)
      IIJJ=0
      IGRP=0
C
C  START MAIN LOOP
C
      DO 130 II=1,NORBS
      ISYM=ORBSYM(II)-1
      DO 140 JJ=1,II
      IIJJ=IIJJ+1
      IJSRT=IJOFF(IIJJ)
C
C  CHECK TO SEE IF A NEW READ IS NEEDED
C
      IF (IGRP .NE. IJBKT(IIJJ)) THEN
C
      IF(IIJJ.EQ.1) GOTO 100
      CALL TRANDM(TPDM,INTS,EIV,LENR,GRPIJ,BUF,SQ,MAPIJ)
  100 CONTINUE
C
      IGRP=IJBKT(IIJJ)
      IF (IGRP .GT. NBKT) THEN
      WRITE(CHK,*)' IN MAKEX II=',II,' JJ=',JJ,' IGRP=',IGRP,
     1 ' NBKT=',NBKT
      CALL MABORT
      END IF
      CALL ZERO(TPDM,LENR)
      CALL ZERO(INTS,LENR)
      IADR=ILAST(IGRP)
      IF (IADR .EQ. 0) GOTO 11
      IF (IADR.LT.0) THEN
      PRINT*,'  FOR IGRP=',IGRP,'  IADR=',IADR
      CALL MABORT
      END IF
C10   CALL RSETSA(IT91,IADR)
 10   CONTINUE
      CALL RREAD(IT91,IBUF,BKTSZ2,IADR)
      IADR=IBUF(1)
      NUM=IBUF(2)
      DO 160 I=1,NUM
      TPDM(IBUF(I+2))=BUF(I+INTF)
  160 CONTINUE
 11   CONTINUE
      IF (IADR .NE. 0) GOTO 10
CDEB  WRITE(CHK,*) '  TPDM:'
CDEB  DO 7474 IKO=1,NIJ*NIJ
CDEB  WRITE(OUT,2230) IKO,TPDM(IKO)
C2230 FORMAT(5X,I5,F20.10)
C7474 CONTINUE
      IADR=ILAST2(IGRP)
      IF (IADR.EQ.0) GOTO 21
      IF (IADR.LT.0) THEN
      PRINT*,'  FOR IGRP=',IGRP,'  IADR=',IADR
      CALL MABORT
      END IF
C20   CALL RSETSA(IT93,IADR-1) NOTE: POINTR=1,AND 1ST SECTOR=0
 20   CONTINUE
      CALL RREAD(IT93,IBUF,BKTSZ2,IADR)
      IADR=IBUF(1)
      NUM=IBUF(2)
      DO 170 I=1,NUM
      INTS(IBUF(I+2))=BUF(I+INTF)
  170 CONTINUE
      IF (IADR .NE. 0) GOTO 20
 21   CONTINUE
CDEB  PRINT*,'  INTS:'
CDEB  DO 3833 IKO=1,NIJ*NIJ
CDEB  WRITE(OUT,2231)IKO,INTS(IKO)
C2231 FORMAT(5X,I5,E20.10)
C3833 CONTINUE
      END IF
CDEB  WRITE(OUT,'('  II=',I5,'  JJ=',I5,'  IJSRT=',I7)') II,JJ,IJSRT
CDEB  WRITE(OUT,'('  TPDM:')')
CDEB  CALL PRINT(TPDM(IJSRT+1),NUMIJ,NBF,OUT)
CDEB  WRITE(OUT,'('  INTS:')')
CDEB  CALL PRINT(TPDM(IJSRT+1),NUMIJ,NBF,OUT)
      JSYM=ORBSYM(JJ)-1
      IJSYM=IEOR(ISYM,JSYM)
      CALL TUMULT
  140 CONTINUE
  130 CONTINUE
C
      GRPIJ = LGRPIJ
      CALL TRANDM(TPDM,INTS,EIV,LENR,GRPIJ,BUF,SQ,MAPIJ)
C
CTJL  WRITE(CHK,*) '  X WITHOUT 1E PART'
CTJL  WRITE(CHK,2222)
C2222 FORMAT(/1X,'THE LAGRANGIAN MINUS THE 1E PART'/)
CTJL  CALL MATOUT(X,NORBS,NORBS,NORBS,NORBS,OUT)
      DO 180 I=1,NORBS
      DO 190 M=1,NORBS
      DO 200 J=1,NORBS
      X(I,M)=X(I,M)+H(M,J)*F(I,J)*2.0D0
      IF (I.EQ.M) ECI1=ECI1+H(M,J)*F(I,J)
  200 CONTINUE
  190 CONTINUE
  180 CONTINUE
CTJL  WRITE(CHK,2223)
C2223 FORMAT(/1X,'THE LAGRANGIAN MATRIX'/)
CTJL  CALL MATOUT(X,NORBS,NORBS,NORBS,NORBS,OUT)
      DO 210 I=1,NORBS
      ECITOT=ECITOT+X(I,I)
  210 CONTINUE
      ECI2=(ECITOT-2*ECI1)*0.25D0
      NINR=NBF*NORBS*2
      NIJR=NIJ*2
      NBFSQ=NBF*NBF*2
CSEL  CALL RSETSA(IT52,(NINR+111)/112+(NBFSQ+111)/112+((NIJR+111)/112)
CSEL 1 *2+6)
CSEL  CALL DCDLBL(IT52,ILBL,ILBL,N,N,N,VAL,VAL,REP)
CIBM  CALL SFILE(12,FCB12)
CTJL  CALL SREW(IT54) THIS DONE IN RFILE
      IF(.NOT.CCSD) CALL DCDLBL(IT54,ILBL,ILBL,N,N,N,ESCF,ECIOLD,VAL)
      ECINEW=ECI1+ECI2+REP
      WRITE(6,1011)ECI1,ECI2,REP,ECINEW,ECIOLD,ESCF
 1011 FORMAT(1X,/' ONE ELECTRON CI ENERGY    = ',F20.15/
     2           ' TWO ELECTRON CI ENERGY    = ',F20.15/
     7           ' NUCLEAR REPULSION ENERGY  = ',F20.15/
     3           ' TOTAL CI ENERGY           = ',F20.15/
     4           ' CI ENERGY FROM TAPE 54    = ',F20.15/
     5           ' SCF ENERGY FROM TAPE 54   = ',F20.15/)
      RETURN
      END
      SUBROUTINE INITUM(ISYM,F,TPDM,INTS,G,W,LENR)
      IMPLICIT REAL*8 (A-H,O-Z)
C     EXTENDED DUMMY ISYM,F,TPDM,INTS,G,W
      INTEGER OUT,CHK,ISYM(NORBS)
      REAL*8 F(NBF,NBF),TPDM(LENR),INTS(LENR)
      REAL*8 G(LENR),W(LENR)
C     REAL*8 G(NBF,NBF),W(NBF,NBF)
      COMMON/TAPES/ OUT,CHK,IT30,IT47,IT52,IT53,IT55,IT58,IT91,IT93,IT95
      COMMON /TUM/ IJSYM,IJSRT,ISUP,JSUP
      COMMON /DIMS/ ISYMRB,NUMIJ,NIJ,NBF,NIJAO,NBFAO,NORBS,NMAX,NSYMHF
C *** EQUIVALENCE (G(1),TPDM(1)), (W(1),INTS(1))
C
C  INITUM JUST PASSES LARGE ARRAYS TO THIS ROUTINE
C
      RETURN
C
      ENTRY TUMULT
C
       IWPT=IJSRT
       IGPT=IJSRT
C  ARRAY G CONTAINS DENSITY MATRIX ELEMENTS ?
C  ARRAY W CONTAINS INTEGRALS               ?
       IPT=IGPT
       IJ=0
       DO 100 I=1,NBF
       JPT=IWPT
       DO 90 J=1,NBF
       IJ=IJ+1
       IF(ISYM(I).NE.ISYM(J)) GO TO 90
       IK=IPT
       JK=JPT
CTJL   IF(I.LT.J) GO TO 40
       KMX=J-1
       IF(I.LT.J) KMX = I - 1
CTJL   GO TO 50
CT40   KMX=I-1
CT50   CONTINUE
CTJL   IF(KMX.EQ.0) GO TO 90
       DO 80 K=1,KMX
       IK=IK+1
       JK=JK+1
CTJL   IF(G(IK).EQ.0.0D0) GO TO 80
       F(I,J)=F(I,J)+G(IK)*W(JK)
CDEB  IF (I.EQ.1 .AND. J.EQ.1)
CDEB 1 WRITE(6,'('  CONTRIBUTION TO 1,1:',2I5,5X,2I5,5X,2I5,5X,2G18.8)')
CDEB 2 ISUP,JSUP,I,K,J,K,G(IK),W(JK)
  80   CONTINUE
  90   JPT=JPT+J
       IPT=IPT+I
 100   CONTINUE
       IK=IGPT
       KPT=IWPT
       DO 200 K=1,NBF
       IPT=0
       LSM=IEOR((ISYM(K)-1),IJSYM)
       DO 190 I=1,K
       IK=IK+1
       IF((ISYM(I)-1).NE.LSM) GO TO 190
       JK=KPT
       IJ=IPT
       DO 180 J=1,K
       JK=JK+1
       IJ=IJ+1
CTJL   IF(W(JK).EQ.0.0D0) GO TO 180
       F(I,J)=F(I,J)+G(IK)*W(JK)
CDEB  IF (I.EQ.1 .AND. J.EQ.1)
CDEB 1 WRITE(6,'('  CONTRIBUTION TO 1,1:',2I5,5X,2I5,5X,2I5,5X,2G18.8)')
CDEB 2 ISUP,JSUP,I,K,J,K,G(IK),W(JK)
 180   CONTINUE
 190   IPT=IPT+NBF
       KPT=KPT+K
 200   CONTINUE
       IPT=0
       IK=IGPT
       DO 300 I=1,NBF
      LSM=IEOR((ISYM(I)-1),IJSYM)
       KMX=I-1
       KPT=IWPT
CTJL   IF(KMX.EQ.0) GO TO 295
       DO 290 K=1,KMX
       IK=IK+1
       IF((ISYM(K)-1).NE.LSM) GO TO 290
       JK=KPT
       IJ=IPT
       DO 280 J=1,K
       JK=JK+1
       IJ=IJ+1
CTJL   IF(W(JK).EQ.0.0D0) GO TO 280
       F(I,J)=F(I,J)+G(IK)*W(JK)
CDEB  IF (I.EQ.1 .AND. J.EQ.1)
CDEB 1 WRITE(6,'('  CONTRIBUTION TO 1,1:',2I5,5X,2I5,5X,2I5,5X,2G18.8)')
CDEB 2 ISUP,JSUP,I,K,J,K,G(IK),W(JK)
 280   CONTINUE
 290   KPT=KPT+K
 295   IPT=IPT+NBF
       IK=IK+1
 300   CONTINUE
       JK=IWPT
       DO 400 J=1,NBF
      LSM=IEOR((ISYM(J)-1),IJSYM)
       KMX=J-1
       KPT=IGPT
CTJL   IF(KMX.EQ.0) GO TO 400
       DO 390 K=1,KMX
       JK=JK+1
       IF((ISYM(K)-1).NE.LSM) GO TO 390
       IK=KPT
       IJ=J
       DO 380 I=1,K
       IK=IK+1
CTJL   IF(G(IK).EQ.0.0D0) GO TO 375
       F(I,J)=F(I,J)+G(IK)*W(JK)
CDEB  IF (I.EQ.1 .AND. J.EQ.1)
CDEB 1 WRITE(6,'('  CONTRIBUTION TO 1,1:',2I5,5X,2I5,5X,2I5,5X,2G18.8)')
CDEB 2 ISUP,JSUP,I,K,J,K,G(IK),W(JK)
 375   IJ=IJ+NBF
 380   CONTINUE
 390   KPT=KPT+K
 400   JK=JK+1
       RETURN
       END
      SUBROUTINE WRT40S(EIV,ORBTBF,BUF,IA47,NOCC,FLAG)
CGES  SUBROUTINE READ47(EIV,ORBTBF,BUF,IA47)
CGES  WRITE VECTOR ON FILE47 AFTER READING IT FROM FILE30
CGES                         AND DRT-REORDERING IN VECS.
      IMPLICIT INTEGER (A-Z)
C     EXTENDED DUMMY EIV,ORBTBF,BUF,IA47
      REAL*8 EIV(NBFAO*NBF),BUF(NBFAO,NBF)
      INTEGER ORBTBF(NORBS),IA47(192)
      COMMON /DIMS/ ISYMRB,NUMIJ,NIJ,NBF,NIJAO,NBFAO,NORBS,NMAX,NSYMHF
      COMMON/TAPES/ OUT,CHK,IT30,IT47,IT52,IT53,IT55,IT58,IT91,IT93,IT95
C
C THE POINTER FOR THE EIGENVECTOR ON TAPE47 IS AT IA47(110)
C AND THE LENGTH IS AT IA47(160) ------------------------------
C
      IT49=49
      LEIV=IA47(160)
      LSEIV=IA47(110)
      CALL WWRITW(IT47,BUF,LEIV,LSEIV,JUNK)
CGES
C     CONSTRUCT 1/2 REFERENCE DENSITY MATRIX AND WRITE TO 49
CGES
      IF(FLAG.NE.0) THEN
      CALL ZERO(EIV,NBFAO*NBF)
      DO 31 I=1,NBF
      DO 31 J=1,I
      IJ=(I*(I-1))/2+J
      DO 21 K=1,NOCC
      EIV(IJ)=EIV(IJ)+BUF(I,K)*BUF(J,K)
   21 CONTINUE
   31 CONTINUE
      WRITE(*,*)' 1/2 REFERENCE 1PDM CONSTRUCTED & WRITTEN TO FILE49'
      NBF2=(NBF*(NBF+1))/2
CGES  CALL PRINT(EIV,NBF2,NBF,6)
      CALL RFILE(IT49)
      CALL SREAD(IT49,IDUM,4)
      CALL SWRIT(IT49,EIV,INTOWP(NBF2))
      CALL RCLOSE(IT49,3)
      END IF
C     WRITE(OUT,10)
C  10 FORMAT(/5X,'IN READ47 EIV IS ')
C     CALL MATOUT(BUF,NBF,NBF,NBF,NBF,OUT)
C     WRITE(*,*) ' ORBTBF ',ORBTBF
C
C REORDER THE EIGENVECTOR FROM PITZER ORDER INTO DRT ORDERING.
C
C     DO 30 IORB=1,NORBS
C     IBF=ORBTBF(IORB)
C     DO 20 II=1,NBFAO
C     EIV(II,IORB)=BUF(II,IBF)
C  20 CONTINUE
C  30 CONTINUE
CGES
C     WRITE(*,*) ' EIGENVECTOR FROM TAPE 47 '
C     CALL MATOUT(EIV,NBF,NBF,NBF,NBF,OUT)
      RETURN
      END
      SUBROUTINE TRANDM(TPDM,BUF,EIV,LENR,GRPIJ,XTP,SQ,MAPIJ)
      IMPLICIT INTEGER (A-Z)
C     EXTENDED DUMMY TPDM,BUF,IOFF,EIV
      INTEGER MAPIJ(NIJAO)
      REAL*8 TPDM(LENR),BUF(LENR),EIV(NBFAO,NBF),XTP(NBF,NBFAO)
      REAL*8 SQ(NBFAO*NBFAO),Z0
      COMMON /DIMS/ ISYMRB,NUMIJ,NIJ,NBF,NIJAO,NBFAO,NORBS,NMAX,NSYMHF
      COMMON/TAPES/ OUT,CHK,IT30,IT47,IT52,IT53,IT55,IT58,IT91,IT93,IT95
      COMMON /SRT/ VAL,IADR,IBKT,NBKT,NGRPIJ,LGRPIJ,NMUNU
      COMMON /TRANS/ NMNB,BLEN,IBPT,ILPT
      COMMON /TRN2/ NSHELL,NST,NSTN,NTBUF,SPACE,AOSTRT,MAXSSQ,BEGI(1000)
      DATA Z0 /0.0D0/
C**********************************************************************
C
      DO 170 IJ = 1,GRPIJ
      OFSET = (IJ-1)*NIJ + 1
      CALL SQUR(TPDM(OFSET),SQ,NBF)
      CALL ZERO(XTP,NBF*NBFAO)
      CALL MXMB(EIV,1,NBFAO,SQ,1,NBF,XTP,1,NBFAO,NBFAO,NBF,NBF)
      MUNU = 0
      DO 110 MU = 1,NBFAO
      DO 120 NU = 1,MU
      SQ(NU) = Z0
  120 CONTINUE
      CALL MXMB(XTP,1,NBFAO,EIV(MU,1),NBFAO,1,SQ,1,NBFAO,MU,NBF,1)
      DO 130 NU = 1,MU
      MUNU = MUNU + 1
      NWMUNU = MAPIJ(MUNU)
      INDEX = GRPIJ*(NWMUNU-1) + IJ
      BUF(INDEX) = SQ(NU)
  130 CONTINUE
  110 CONTINUE
  170 CONTINUE
C
CTJL  WRITE(CHK,*) ' NIJAO*GRPIJ,NIJAO = ',NIJAO*GRPIJ,NIJAO
      CALL WWRITW(IT95,BUF,INTOWP(NIJAO*GRPIJ),IBPT,ILPT)
CTJL  WRITE(*,50)IBPT,ILPT
CTJ50 FORMAT(/5X,'IBPT,ILPT FROM TRANSDM = ',2I10)
      IBPT = ILPT
C
C GO BACK TO MAKEX AND READ IN ANOTHER BUFFER OF TPDM ---------
C
      RETURN
      END
C
C-----------------------------------------------------------------------
C
      SUBROUTINE TRNSEC(AOPS,FAOS,IOFF,EIV,UBUF,TBUF,SHBKT,KATOM,
     .                  XTP,MAPIJ,WBUF,P,KTYPE,LSNR,IJOFF,KLOFF)
      IMPLICIT INTEGER (A-Z)
      REAL*8 UBUF(1),TBUF(1),WBUF(1),EIV(NBFAO,NBF),XTP(NBFAO*NBFAO),
     .       TEMP,TEM,Z0,C1,C2,C3,C4,P(NBFAO*NBFAO),VAL,UBUFKL
      INTEGER AOPS(NSHELL),FAOS(NSHELL),KATOM(NSHELL),KTYPE(NSHELL),
     .        IOFF(NIJAO),SHBKT(NST),MAPIJ(NIJAO),NMUNU
      INTEGER LSNR(*),IJOFF(*),KLOFF(*)
      COMMON/SRT/VAL,IADR,IBKT,NBKT,NGRPIJ,LGRPIJ,NMUNU
      COMMON/TRN2/NSHELL,NST,NSTN,NTBUF,SPACE,AOSTRT,MAXSSQ,BEGI(1000)
      COMMON/TAPES/OUT,CHK,IT30,IT47,IT52,IT53,IT55,IT58,IT91,IT93,IT95
      COMMON/DIMS/ISYMRB,NUMIJ,NIJ,NBF,NIJAO,NBFAO,NORBS,NMAX,NSYMHF
      DATA Z0 /0.0D0/
C
      INDEX = 0
      PT55 = AOSTRT
      XIADR = AOSTRT
      XBKT = 0
      MNOF = 0
      IDMR = SEC2I(10 )
CGES  IDMR = SEC2I(100)
      IDMSZ = INTOWP(IDMR)
      RS = 0
C
      DO 10 R=1,NSHELL
         NMU = AOPS(R)
         FMU = FAOS(R)
         LMU = FMU + NMU - 1
         KTR=KTYPE(R)
         DO 20 S=1,R
            RS = RS + 1
            NNU = AOPS(S)
            FNU = FAOS(S)
            LNU = FNU + NNU - 1
            IF(XBKT.NE.SHBKT(RS)) THEN
               XBKT = SHBKT(RS)
               MNOF = BEGI(XBKT)
               CALL READDM(UBUF,WBUF,XBKT)
            END IF
            SC = 0
C
            DO 50 MU=FMU,FMU+NMU-1
               IF(R.EQ.S) LNU = MU
               DO 60 NU=FNU,LNU
                  MUNU = IOFF(MU) + NU
                  NWMUNU = MAPIJ(MUNU) - MNOF
                  UBOFF = NWMUNU*NIJ + 1
                  CALL SQUR(UBUF(UBOFF),P,NBF)
                  CALL ZERO(XTP,NBFAO*NBFAO)
CTJL            CALL MXMB(EIV,1,NBFAO,P,1,NBF,XTP,1,NBFAO,NBFAO,NBF,NBF)
                  CALL MXMB(EIV,1,NBFAO,P,1,NBF,XTP,1,LMU,LMU,NBF,NBF)
                  CALL ZERO(UBUF(UBOFF),NIJ)
                  DO 21 R2=1,LMU
                     UI=UBOFF+IOFF(R2)
CTJL  CALL MXMB(XTP,1,NBFAO,EIV(R2,1),NBFAO,1,UBUF(UI),1,NBFAO,R2,NBF,1)
          CALL MXMB(XTP,1,LMU,EIV(R2,1),NBFAO,1,UBUF(UI),1,LMU,R2,NBF,1)
   21             CONTINUE
   60          CONTINUE
   50       CONTINUE
C
            DO 30 T=1,R
               NRHO = AOPS(T)
               FRHO = FAOS(T)
               TT = T
               IF(T.EQ.R) TT = S
               DO 40 V=1,TT
                  NSG = AOPS(V)
                  FSG = FAOS(V)
                  SC = 0
                  ICNT=0
                  SIZE=NMU*NNU*NRHO*NSG
                  DO 51 MU = FMU,FMU+NMU-1
                     DO 61 NU = FNU,FNU+NNU-1
                        MUNU = IOFF(MAX(MU,NU)) + MIN(NU,MU)
                        NWMUNU = MAPIJ(MUNU) - MNOF
                        UBOFF=NWMUNU*NIJ
                        IF(R.EQ.S)
     .                     SC=IOFF(MAX(MU,NU)-FMU+1)+MIN(MU,NU)-FNU+1
                        DO 70 RHO = FRHO,FRHO+NRHO-1
                           DO 80 SG = FSG,FSG+NSG-1
                              UI=UBOFF+IOFF(MAX(RHO,SG))+MIN(RHO,SG)
                              INDEX = INDEX + 1
                              ICNT=ICNT+1
                              TBUF(ICNT)=UBUF(UI)
C                             TBUF(INDEX) = UBUF(UI)
C                             IF(INDEX.EQ.IDMR) THEN
C                                CALL SWRIT(IT55,TBUF,IDMSZ)
C                                INDEX = 0
C                             END IF
   80                      CONTINUE
   70                   CONTINUE
   61                CONTINUE
   51             CONTINUE
                  IF(ICNT.NE.SIZE)
     .               WRITE(6,*)'ICNT=',ICNT,' SIZE=',SIZE
                  RSX=IOFF(R)+S
                  TVX=IOFF(T)+V
                  XIADR=INTOWP(IJOFF(RSX)+KLOFF(TVX)*LSNR(RSX))+AOSTRT
C                 WRITE(6,6754) R,S,T,V,XIADR,PT55
C6754 FORMAT(4(I5,1X),' IADR=',I6,' PT55=',I6)
                  CALL WWRITW(IT55,TBUF,INTOWP(ICNT),PT55,PT55)
   40          CONTINUE
   30       CONTINUE
   20    CONTINUE
   10 CONTINUE
C
C     WRITE OUT LAST BUFFER
C
CGES  IF(INDEX.NE.IDMR) THEN
C        DO 100 I = INDEX+1,IDMR
C           TBUF(I) = Z0
C 100    CONTINUE
C        CALL SWRIT(IT55,TBUF,IDMSZ)
C     END IF
C
      RETURN
      END
C
C----------------------------------------------------------------------
C
      SUBROUTINE SETUP1(AOPS,KTYPE,MAPIJ,IOFF,FAOS)
      IMPLICIT INTEGER (A-Z)
      INTEGER AOPS(NSHELL),KTYPE(NSHELL),MAPIJ(NIJAO)
      INTEGER IOFF(NIJAO)
      INTEGER FAOS(NSHELL)
      COMMON/TAPES/ OUT,CHK,IT30,IT47,IT52,IT53,IT55,IT58,IT91,IT93,IT95
      COMMON /TRN2/ NSHELL,NST,NSTN,NTBUF,SPACE,AOSTRT,MAXSSQ,BEGI(1000)
      COMMON /TRANS/ NMNB,BLEN,IBPT,ILPT
      COMMON /DIMS/ ISYMRB,NUMIJ,NIJ,NBF,NIJAO,NBFAO,NORBS,NMAX,NSYMHF
C
      NSHL = 0
      FLAG = 0
      MAXSSQ = 0
      DO 10 XSHL=1,NSHELL
      MUTYP = KTYPE(XSHL)*(KTYPE(XSHL)+1)/2
      MAXSQ = MUTYP*MUTYP
      IF(MAXSQ.GT.MAXSSQ) MAXSSQ = MAXSQ
      AOPS(XSHL) = MUTYP
   10 CONTINUE
C
      DO 210 II=1,NIJAO
      IOFF(II)=II*(II-1)/2
  210 CONTINUE
C
      NWMUNU = 0
      DO 110 R = 1,NSHELL
      FMU = FAOS(R)
      LMU = FMU + AOPS(R) - 1
      DO 120 S = 1,R-1
      FNU = FAOS(S)
      LNU = FNU + AOPS(S) - 1
      DO 130 MU = FMU,LMU
      DO 140 NU = FNU,LNU
      MUNU = IOFF(MU) + NU
      NWMUNU = NWMUNU + 1
      MAPIJ(MUNU) = NWMUNU
  140 CONTINUE
  130 CONTINUE
  120 CONTINUE
      DO 150 MU = FMU,LMU
      DO 160 NU = FMU,MU
      MUNU = IOFF(MU) + NU
      NWMUNU = NWMUNU + 1
      MAPIJ(MUNU) = NWMUNU
  160 CONTINUE
  150 CONTINUE
  110 CONTINUE
C
      RETURN
      END
C
C----------------------------------------------------------------------
C
      SUBROUTINE READ30(KATOM,KTYPE,KLOC,TENBUF)
      IMPLICIT INTEGER (A-Z)
      INTEGER KATOM(NSHELL),KTYPE(NSHELL),KLOC(NSHELL)
      INTEGER TENBUF(200)
      COMMON /DIMS/ ISYMRB,NUMIJ,NIJ,NBF,NIJAO,NBFAO,NORBS,NMAX,NSYMHF
      COMMON/TAPES/ OUT,CHK,IT30,IT47,IT52,IT53,IT55,IT58,IT91,IT93,IT95
      COMMON /TRN2/ NSHELL,NST,NSTN,NTBUF,SPACE,AOSTRT,MAXSSQ,BEGI(1000)
C
C     THE POINTERS FOR THE BASIS SET INFO ON TAPE 30 START AT 301
C     AND EXTEND FOR 200 INTEGER WORDS.
C
      CALL WREADW(IT30,TENBUF,200,301,JUNK)
C
      KATPT  = TENBUF( 8)
      KTPPT  = TENBUF( 9)
      KLOCPT = TENBUF(11)
      CALL WREADW(IT30,KATOM,NSHELL,KATPT,JUNK)
      CALL WREADW(IT30,KTYPE,NSHELL,KTPPT,JUNK)
      CALL WREADW(IT30,KLOC,NSHELL,KLOCPT,JUNK)
C
C     WRITE(6,*) ' HERE IS I, KATOM(I),KTYPE(I),KLOC(I) '
C     DO 10 I = 1, NSHELL
C     WRITE(6,20) I,KATOM(I),KTYPE(I),KLOC(I)
C  20 FORMAT(5X,4I5)
   10 CONTINUE
C
      RETURN
      END
C
C-----------------------------------------------------------------------
C
      SUBROUTINE SQUR(T,SQ,N)
      IMPLICIT REAL*8 (A-H,O-Z)
      DIMENSION SQ(2),T(2)
      IJ=0
      II=0
      DO 20 I=1,N
      JJ=0
      DO 10 J=1,I
      IJ=IJ+1
      SQ(II+J)=T(IJ)
      SQ(JJ+I)=T(IJ)
10    JJ=JJ+N
20    II=II+N
      RETURN
      END
C
C-----------------------------------------------------------------------
C
      SUBROUTINE SETUP2(AOPS,KTYPE,LNSR,SHBKT,IJOFF,KLOFF,IOFF,
     .                  FAOS)
      IMPLICIT INTEGER (A-Z)
      INTEGER AOPS(NSHELL),KTYPE(NSHELL),LNSR(NST),
     .        SHBKT(NSTN),KLOFF(NST),IJOFF(NST),IOFF(NIJAO),
     .        FAOS(NSHELL)
      COMMON/TAPES/ OUT,CHK,IT30,IT47,IT52,IT53,IT55,IT58,IT91,IT93,IT95
      COMMON /TRN2/ NSHELL,NST,NSTN,NTBUF,SPACE,AOSTRT,MAXSSQ,BEGI(1000)
      COMMON /TRANS/ NMNB,BLEN,IBPT,ILPT
      COMMON /DIMS/ ISYMRB,NUMIJ,NIJ,NBF,NIJAO,NBFAO,NORBS,NMAX,NSYMHF
C
      NNST = 0
      KLOFF(1) = 0
      DO 20 S=1,NSHELL
      APS = AOPS(S)
      DO 30 T=1,S
      NNST = NNST + 1
      LNSR(NNST) = APS*AOPS(T)
      IF(NNST.NE.NST) KLOFF(NNST+1) = KLOFF(NNST) + LNSR(NNST)
   30 CONTINUE
   20 CONTINUE
C
C NOW FOR STSRM ------------------------------------------------------
C
      NTBUF = 1
      BEGI(1) = 1
      PNTSR = 1
      SRMN = 0
      IJOFF(1) = 0
      DO 40 ST = 1,NST
      LNST = LNSR(ST)
      IJOF = 0
      DO 50 MN = 1,ST
      SRMN = SRMN + 1
      IJOF = IJOF + LNST*LNSR(MN)
   50 CONTINUE
      IF(ST.NE.NST) IJOFF(ST+1) = IJOFF(ST) + IJOF
   40 CONTINUE
C**********************************************************************
C     WRITE(6,*) '    NST        IJOFF        KLOFF      LNSR '
C     DO 3010 I = 1,NST
C     WRITE(6,*) I,IJOFF(I),KLOFF(I),LNSR(I)
C3010 CONTINUE
C**********************************************************************
C
C WRITE THE ARRAYS OF POINTERS TO FILE 55
C
      CALL WWRITW(IT55,AOPS,NSHELL,1,JUNK)
      CALL WWRITW(IT55,IJOFF,NST,JUNK,JUNK)
      CALL WWRITW(IT55,KLOFF,NST,JUNK,JUNK)
      CALL WWRITW(IT55,LNSR,NST,JUNK,JUNK)
C
      TPDMEL = IJOFF(NST) + IJOF
      WRITE(OUT,*) '  THE NUMBER OF TPDM ELEMENTS IS ',TPDMEL
C
C AOSTRT IS THE POINTER FOR THE BEGINNING OF THE TWO PARTICLE DENSITY
C MATRIX -------------------------------------------------------------
C
      AOSTRT = JUNK
C     AOSTRT = I2SEC(JUNK) + 1
C     CALL RSETSA(IT55,AOSTRT)
C
C
      BFNT = 1
      XBKT = 1
      A = 0
      IJ = 0
      BEGI(1) = 1
      DO 200 I = 1,NSHELL
      DO 210 J = 1,I
      IJ = IJ+1
      SIZS = AOPS(I) * AOPS(J)
      IF ( I.EQ.J ) SIZS = AOPS(I)*(AOPS(I)+1)/2
      SIZN=SIZS*NIJ
      A = SIZN+A
      IF ( A.GT.SPACE) THEN
      A = SIZN
      XBKT = XBKT+1
      BEGI(XBKT)=BFNT
      END IF
      BFNT = BFNT+SIZS
      SHBKT(IJ) = XBKT
  210 CONTINUE
  200 CONTINUE
      BEGI(XBKT+1) = -1
COUT  WRITE(OUT,*) ' THERE ARE ',XBKT,'  BUCKETS OF H-T TPDM TO READ'
      RETURN
      END
C
C----------------------------------------------------------------------
C
      SUBROUTINE READDM(UBUF,WBUF,XBKT)
      IMPLICIT INTEGER (A-Z)
      REAL*8 UBUF(1),WBUF(1),VAL
      COMMON /SRT/ VAL,IADR,IBKT,NBKT,NGRPIJ,LGRPIJ,NMUNU
      COMMON /TRN2/ NSHELL,NST,NSTN,NTBUF,SPACE,AOSTRT,MAXSSQ,BEGI(1000)
      COMMON/TAPES/ OUT,CHK,IT30,IT47,IT52,IT53,IT55,IT58,IT91,IT93,IT95
      COMMON /DIMS/ ISYMRB,NUMIJ,NIJ,NBF,NIJAO,NBFAO,NORBS,NMAX,NSYMHF
C
C**********************************************************************
CTJL  WRITE(CHK,*)' NBKT,NGRPIJ,LGRPIJ,NIJAO=',NBKT,NGRPIJ,LGRPIJ,NIJAO
CTJL  WRITE(CHK,*)' XBKT,BEGI=',XBKT,BEGI(XBKT+1)
      FMUNU = BEGI(XBKT)
      LMUNU = NIJAO
      IF(BEGI(XBKT+1).NE.-1) LMUNU = BEGI(XBKT+1) - 1
      NMNX = LMUNU - FMUNU + 1
CTJL  WRITE(CHK,*) ' NMNX,FMUNU,LMUNU=',NMNX,FMUNU,LMUNU
      DO 10 I = 1,NBKT-1
      TRIOFF = (I-1)*NGRPIJ
      PT105 = TRIOFF*NIJAO + (FMUNU-1)*NGRPIJ
      PT105 = INTOWP(PT105) + 1
      INTLEN = INTOWP(NMNX*NGRPIJ)
CTJL  WRITE(CHK,*) ' PT105,INTLEN=',PT105,INTLEN
      CALL WREADW(IT95,WBUF,INTLEN,PT105,JUNK)
      WIND = 0
      DO 20 J = 1,NMNX
      UBOFF = (J-1)*NIJ + TRIOFF
      DO 30 K = 1,NGRPIJ
      WIND = WIND + 1
      UIND = UBOFF + K
      UBUF(UIND) = WBUF(WIND)
   30 CONTINUE
   20 CONTINUE
   10 CONTINUE
C
C DON'T FORGET ABOUT THE LAST BUCKET!!!!
C
      TRIOFF = (NBKT-1)*NGRPIJ
      PT105 = TRIOFF*NIJAO + (FMUNU-1)*LGRPIJ
      PT105 = INTOWP(PT105) + 1
      INTLEN = INTOWP(NMNX*LGRPIJ)
CTJL  WRITE(CHK,*) ' PT105,INTLEN=',PT105,INTLEN
      CALL WREADW(IT95,WBUF,INTLEN,PT105,JUNK)
      WIND = 0
      DO 40 J = 1,NMNX
      UBOFF = TRIOFF + (J-1)*NIJ
      DO 50 K = 1,LGRPIJ
      WIND = WIND + 1
      UIND = UBOFF + K
      UBUF(UIND) = WBUF(WIND)
   50 CONTINUE
   40 CONTINUE
C
      RETURN
      END
C
C===============================================================
C
      SUBROUTINE VECS(D,IOUT,ACRCY,XVEC,WVEC,NO,IFLAG)
C
C  THIS SUBROUTINE READS IN THE SCF VECTOR AND ADJUSTS IT TO THE
C  DRT REPRESENTATION.
C
      IMPLICIT REAL*8 (A-H,O-Z)
C
      COMMON /FILES/ IT40,IT54,CCSD
      COMMON/TAPES/ OUT,CHK,IT30,IT47,IT52,IT53,IT55,IT58,IT91,IT93,IT95
      COMMON /DIMS/ ISYMRB,NUMIJ,NIJ,NBF,NIJAO,NBFAO,NORBS,NMAX,NSYMHF
      COMMON /TAPE30/ I30(200)
C
      LOGICAL CCSD
      INTEGER IOUT(NBF),NLAMDA(8),NC(8),OUT,CHK,ITYP(8)
      REAL * 8 EIG(500)
      INTEGER IOR(500)
      REAL*8 D(NBFAO,NBF),XVEC(1),WVEC(NBFAO,NBFAO),ACRCY
C
      WRITE(6,*)'         '
      WRITE(6,*)'CCSD =   ', CCSD
      WRITE(6,*)'         '
C
C     WRITE(*,*) ' IOUT',IOUT
COUT  WRITE(OUT,701) ACRCY
  701 FORMAT (1X,'THRESHOLD FOR ELIMINATION OF VECTOR ELEMENTS = ',
     #1PE10.2,/)
C
      CALL ZERO(D,NBF**2)
C
C
C     ----- OPEN TAPE30 AND GET CONSTANTS AND POINTER TO CALC ----
C
C     ITAP30=30
C     CALL RFILE(ITAP30)
C     CALL WREADW(ITAP30,I10,200,101,JUNK)
      MPOINT=I30(2)
      MCONST=I30(3)
      MCALCS=I30(4)
      NCALCS=I30(5)
      MSFRU = I30(18)
      NUM = I30(22)
      NSYMHF=I30(41)
      MXCF=I30(42)
C
      JUNK=101+MCONST+MPOINT
      CALL WREADW(IT30,I30,MCALCS,JUNK,JUNK)
C
      LOCCAL=I30(NCALCS)
      JUNK=LOCCAL+60
      CALL WREADW(IT30,LOCVEC,1,JUNK,JUNK)
C
C     ----- READ VECTOR -----
C
CTJL  WRITE(*,*) ' LOCVEC ',LOCVEC
      CALL WREADW(IT30,XVEC,INTOWP(MXCF),LOCVEC,LOCVEC)
CGES  WRITE(*,*)'PACKED SYMMETRY EIGENVECTOR FROM TAPE 30'
CTJL  CALL MATOUT(XVEC,NBFAO,NBF,NBFAO,NBF,6)
C
CGES  LOCVEC=LOCVEC+INTOWP(NBF)+NSYMHF
      CALL WREADW(IT30,EIG,INTOWP(NBF),LOCVEC,LOCVEC)
      CALL WREADW(IT30,ITYP,NSYMHF    ,LOCVEC,LOCVEC)
      CALL WREADW(IT30,NLAMDA,NSYMHF,LOCVEC,LOCVEC)
      CALL WREADW(IT30,NC    ,NSYMHF,LOCVEC,LOCVEC)
CGES
      NO=0
      DO 33 I=1,NSYMHF
  33  NO=NO+NC(I)
COUT  WRITE(6,*)  ' NO FROM FILE30',NO
      CALL LOCATE (5,'# MONGO ###',IERR)
      IF(IERR.NE.0) THEN
      WRITE ( 6,6007)
 6007 FORMAT(//,2X,'  NO INPUT TO MONGO HAS BEEN FOUND.',/,
     .          2X,'      NORMAL RUN WILL BE DONE             ')
C     STOP
      ELSE
      READ(5,6004)IFLAG
 6004 FORMAT(I5)
      IF (IFLAG.NE.0)THEN
      WRITE ( 6,6008)
 6008 FORMAT(//,2X,' FLAG IN MONGO NE ZERO. NON-SCF MOS CALCULATION',/)
      ENDIF
      ENDIF
CGES
C
CTJL  CLOSE (ITAP30)
C
C     ----- TRANSFER VECTOR TO D MATRIX -----
C
      DO 1 I=1,MXCF
           IF (ABS(XVEC(I)).LT.ACRCY) XVEC(I)=0.0D+00
    1 CONTINUE
      IOF=0
      IJ=0
      DO 10 ISYM=1,NSYMHF
           N=NLAMDA(ISYM)
           DO 9 J=1,N
                DO 8 I=1,N
                     IJ=IJ+1
                     D(IOF+I,IOF+J)=XVEC(IJ)
    8           CONTINUE
    9      CONTINUE
           IOF=IOF+N
   10 CONTINUE
C
CGES  WRITE(*,*)'UNPACKED SYMMETRY EIGENVECTOR FROM TAPE 30'
C     CALL MATOUT(D,NBFAO,NBF,NBFAO,NBF,6)
C
      JUNK=101+MCONST
      CALL WREADW(IT30,I30,MPOINT,JUNK,JUNK)
C
      LAOTSO=I30(29)
      CALL WREADW(IT30,XVEC,INTOWP(NUM*MSFRU),LAOTSO,LAOTSO)
CTJL  WRITE(*,*) ' SO TO AO TRANSFORMATION MATRIX '
CTJL  CALL MATOUT(XVEC,NBFAO,NBF,NBFAO,NBF,6)
C
      CALL ZERO(WVEC,NBFAO*NBFAO)
      CALL MXMB(XVEC,1,NBFAO,D,1,NBF,WVEC,1,NBFAO,NBFAO,NBF,NBF)
      IF(IFLAG.NE.0)THEN
      WRITE(*,*) ' AO TO MO EIGENVECTOR FROM TAPE 30 '
      CALL MATOUT(WVEC,NBFAO,NBF,NBFAO,NBF,6)
      ENDIF
C
      IF(CCSD)THEN
      WRITE(*,*)' '
      WRITE(*,*)'CCSD OPTION, EIGENVALUES AND EIGENVECTORS ARE SORTED'
      WRITE(*,*)' '
      DO 205 I=1,NBF
COUT  WRITE(*,*)I,EIG(I)
      IOR(I)=I
  205 CONTINUE
  210 IFK=0
      I=0
  220 I=I+1
      IF(EIG(I).GT.EIG(I+1))THEN
      VAL=EIG(I)
      EIG(I)=EIG(I+1)
      EIG(I+1)=VAL
      IDU=IOR(I)
      IOR(I)=IOR(I+1)
      IOR(I+1)=IDU
      IFK=1
      ENDIF
      IF(I.LT.(NBF-1))GO TO 220
      IF(IFK.EQ.1)GO TO 210
      DO 225 I=1,NBF
COUT  WRITE(*,*)I,EIG(I),IOR(I)
  225 CONTINUE
      DO 240 I=1,NBF
      NIB=IOR(I)
      DO 235 J=1,NBF
      D(J,I)=WVEC(J,NIB)
  235 CONTINUE
  240 CONTINUE
      DO 250 I=1,NBF
      DO 250 J=1,NBF
  250 WVEC(I,J)=D(I,J)
CGES  WRITE(*,*) ' RESORTED EIGENVECTOR FROM TAPE 30 '
CGES  CALL MATOUT(WVEC,NBFAO,NBF,NBFAO,NBF,6)
      ENDIF
CGES
      DO 20 IBF = 1,NBF
      NIBF = IOUT(IBF)
      DO 30 IAO = 1,NBFAO
      D(IAO,NIBF) = WVEC(IAO,IBF)
   30 CONTINUE
   20 CONTINUE
C
CGES  WRITE(*,*)' AO TO MO VECTOR FROM TAPE 30 AFTER DRT-REORDERING'
C     CALL MATOUT(D,NBFAO,NBF,NBFAO,NBF,6)
      RETURN
      END
