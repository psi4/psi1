      SUBROUTINE FENTRY(CC,IA,MAXCOR)
C  THE CARTESIAN-INTERNAL COORDINATE CONVERSION PROGRAM
C**********************************************************************
c Moved to PSI distribution disk on 020389 - clj.                     *
C**********************************************************************
C*  MODIFICATION FOR IMS VERSION                                      *
C*  BY: YUKIO YAMAGUCHI                                               *
C*  DATE: FEBRUARY 20, 1989                                           *
C**********************************************************************
C***LAST UPDATED ON FEBRUARY 06, 1985 BY YUKIO YAMAGUCHI              *
C**********************************************************************
C   THIS PROGRAM CAN TREAT MOLECULES WITH '50' ATOMS
C   DIMENSION STATEMENTS
      IMPLICIT REAL*8 (A-H,O-Z)
C2-20-89  DIMENSION CC(360000),IA(1)
      DIMENSION CC(MAXCOR),IA(1)
      DIMENSION I30(200),COORD(3,50),GRAD(3,50)
C   COMMON STATEMENTS
      COMMON/VIB101/NATOM,NAT1,N3N,NINT
      COMMON/VIB102/ESCF
      COMMON/VIB103/NST,NBND,NLIB,NDEF,NTORS
      COMMON/VIB104/IFORCE,IGRAD,IATOM,ICOOD,IPRNT
      COMMON/VIB201/CHG(50),X(50),Y(50),Z(50)
      COMMON/VIB202/R(1275)
      COMMON/VIB203/ENGX(50),ENGY(50),ENGZ(50)
      COMMON/VIB204/RINT(150),ENGR(150)
      COMMON/VIB205/IOFF(150)
      COMMON/VIB301/KR(150),LR(150)
      COMMON/VIB302/KA(150),LA(150),MA(150),AGLB(150)
      COMMON/VIB303/KB(100),LB(100),MB(100),AGLL(100)
      COMMON/VIB304/KD(100),LD(100),MD(100),ND(100)
      COMMON/VIB305/KT(100),LT(100),MT(100),NT(100)
      COMMON/VIB306/AGLT(100),AGLO(100),AGLR(100)
      COMMON/VIB307/AGLD(100),AGLE(100),AGLF(100)
C2-20-89  EQUIVALENCE (CC,IA)
C   FORMAT STATEMENTS
    1 FORMAT(//,2X,' THE INTERNAL ENERGY GRADIENT PROGRAM'//)
    2 FORMAT(16I5)
    3 FORMAT(3X,20A4)
    4 FORMAT(//,2X,' NATOM = ',I5/
     1 2X,' SCF ENERGY = ',F20.10)
    5 FORMAT(//,2X,' MOLECULAR GEOMETRY'/
     1 5X,4H NO.,11X,7H CHARGE,13X,2H X,18X,2H Y,18X,2H Z/)
    6 FORMAT(2X,I7,5X,4F20.10)
    7 FORMAT(//,2X,' CARTESIAN ENERGY GRADIENTS'/
     1 5X,4H NO.,11X,7H CHARGE,13X,2H X,18X,2H Y,18X,2H Z/)
    8 FORMAT(I5,F20.10)
    9 FORMAT(4F20.10)
   10 FORMAT(20A4)
C
      CALL TSTART(6)
      CALL NOUNFL
C
      INPUT=5
      ITAPE6=6
      ITAP11=11
      ITAP13=13
      ITAP30=30
C2-20-89  MAXCOR=360000
C
      CALL LOCATE(INPUT,'# INTCOS #',IERR)
C
      IOFF(1)=0
      DO 101 I=1,149
      IOFF(I+1)=IOFF(I)+I
  101 CONTINUE
      WRITE(6,1)
      READ(5,2) NST,NBND,NLIB,NDEF,NTORS,IFORCE,IGRAD,IATOM,ICOOD,
     1          IPRNT
      IF(IGRAD.NE.0) GO TO 201
C
      CALL RFILE(ITAP30)
      CALL WREADW(ITAP30,I30,200,101,JUNK)
      IEND=I30(1)
      MPOINT=I30(2)
      MCONST=I30(3)
      MCALCS=I30(4)
      NCALCS=I30(5)
      NATOM=I30(19)
      NAT1=NATOM-1
      N3N=NATOM*3
      JUNK=101+MCONST
      CALL WREADW(ITAP30,IPT,1,JUNK,JUNK)
      CALL WREADW(ITAP30,CHG,NATOM*2,IPT,JUNK)
      IGEOP=100+MCONST+MPOINT+NCALCS
      CALL WREADW(ITAP30,LOCCAL,1,IGEOP,JUNK)
      CALL WREADW(ITAP30,I30,20,LOCCAL,JUNK)
      WRITE(6,3) (I30(I),I=1,20)
      IGEOP=LOCCAL+60
      CALL WREADW(ITAP30,I30,20,IGEOP,IGEOP)
      CALL WREADW(ITAP30,COORD,N3N*2,IGEOP,JUNK)
      JUNK=JUNK+INTOWP(1)
      CALL WREADW(ITAP30,ESCF,2,JUNK,JUNK)
      JUNK=I30(2)
      CALL WREADW(ITAP30,GRAD,N3N*2,JUNK,JUNK)
      WRITE(6,4) NATOM,ESCF
      WRITE(6,5)
      DO 102 I=1,NATOM
      X(I)=COORD(1,I)
      Y(I)=COORD(2,I)
      Z(I)=COORD(3,I)
      WRITE(6,6) I,CHG(I),X(I),Y(I),Z(I)
  102 CONTINUE
      CALL DIST(IPRNT)
      WRITE(6,7)
      DO 103 I=1,NATOM
      ENGX(I)=GRAD(1,I)
      ENGY(I)=GRAD(2,I)
      ENGZ(I)=GRAD(3,I)
      WRITE(6,6) I,CHG(I),ENGX(I),ENGY(I),ENGZ(I)
  103 CONTINUE
      GO TO 203
C
  201 CONTINUE
      NTAPE=IGRAD/100
      IF(NTAPE.EQ.13) GO TO 202
      NSETS=MOD(IGRAD,100)
      IF(NSETS.EQ.0) NSETS=IGRAD
      REWIND ITAP11
      DO 106 II=1,NSETS
      READ(ITAP11,10) (I30(I),I=1,20)
      READ(ITAP11,8) NATOM,ESCF
      DO 104 I=1,NATOM
      READ(ITAP11,9) CHG(I),X(I),Y(I),Z(I)
  104 CONTINUE
      DO 105 I=1,NATOM
      READ(ITAP11,9) CHG(I),ENGX(I),ENGY(I),ENGZ(I)
  105 CONTINUE
  106 CONTINUE
      WRITE(6,3) (I30(I),I=1,20)
      WRITE(6,4) NATOM,ESCF
      NAT1=NATOM-1
      N3N=NATOM*3
      WRITE(6,5)
      DO 107 I=1,NATOM
      WRITE(6,6) I,CHG(I),X(I),Y(I),Z(I)
  107 CONTINUE
      CALL DIST(IPRNT)
      WRITE(6,7)
      DO 108 I=1,NATOM
      WRITE(6,6) I,CHG(I),ENGX(I),ENGY(I),ENGZ(I)
  108 CONTINUE
      GO TO 203
C
  202 CONTINUE
      NSETS=MOD(IGRAD,100)
      REWIND ITAP13
      NATOM=IATOM
      READ(ITAP13,2) NSTORE
      DO 113 II=1,NSETS
      READ(ITAP13,8) NUM,ESCF
      DO 110 I=1,NATOM
      READ(ITAP13,9) CHG(I),X(I),Y(I),Z(I)
  110 CONTINUE
      DO 111 I=1,NATOM
      READ(ITAP13,9) CHG(I),ENGX(I),ENGY(I),ENGZ(I)
  111 CONTINUE
      DO 112 I=1,ICOOD
      READ(ITAP13,9) RR,GR
  112 CONTINUE
  113 CONTINUE
      WRITE(6,4) NATOM,ESCF
      NAT1=NATOM-1
      N3N=NATOM*3
      WRITE(6,5)
      DO 114 I=1,NATOM
      WRITE(6,6) I,CHG(I),X(I),Y(I),Z(I)
  114 CONTINUE
      CALL DIST(IPRNT)
      WRITE(6,7)
      DO 115 I=1,NATOM
      WRITE(6,6) I,CHG(I),ENGX(I),ENGY(I),ENGZ(I)
  115 CONTINUE
C
  203 CONTINUE
C   NINT IS NUMBER OF INTERNAL COORDINATES
      NINT=NST+NBND+NLIB+NDEF+NTORS
      NMAX=MAX0(NINT,N3N)
      NMAXSQ=NMAX*NMAX
      NATOM2=NATOM*NATOM
      IC1=1
      IC2=IC1+NMAXSQ
      IC3=IC2+NMAXSQ
      IC4=IC3+NMAXSQ
      IC5=IC4+NMAXSQ
      IC6=IC5+NMAXSQ
      IC7=IC6+NMAX
      IA7=IC7*2-1
      IC8=IC7+NMAX
      IC9=IC8+NATOM2
      IC10=IC9+NATOM2
      ICMAX=IC10+NATOM2
C................B       BIN     AA      BB      FX      FF......
      CALL VIBGF(CC(IC1),CC(IC2),CC(IC3),CC(IC4),CC(IC5),CC(IC5),
C................PIVOT   INDEX   EX      EY      EZ............
     1           CC(IC6),IA(IA7),CC(IC8),CC(IC9),CC(IC10),NMAX)
C
      CALL TSTOP(6)
C
C2-20-89 STOP
      RETURN
      END
      SUBROUTINE DIST(IPRNT)
      IMPLICIT REAL*8 (A-H,O-Z)
      COMMON/VIB101/NATOM,NAT1,N3N,NINT
      COMMON/VIB201/CHG(50),X(50),Y(50),Z(50)
      COMMON/VIB202/R(1275)
      DATA ZERO / 0.0D+00 /
      DATA LDIM / 1275 /
    1 FORMAT(//,2X,' INTERATOMIC DISTANCE MATRIX'/)
C
      IJ=0
      DO 101 I=1,NATOM
      DO 101 J=1,I
      IJ=IJ+1
      R(IJ)=ZERO
      IF(I.EQ.J) GO TO 101
      XD=X(I)-X(J)
      YD=Y(I)-Y(J)
      ZD=Z(I)-Z(J)
      R(IJ)=DSQRT(XD*XD+YD*YD+ZD*ZD)
  101 CONTINUE
      IF(IPRNT.EQ.0) GO TO 201
      WRITE(6,1)
      CALL PRINT(R,LDIM,NATOM,6)
  201 RETURN
      END
      SUBROUTINE VIBGF(B,BIN,AA,BB,FX,FF,PIVOT,INDEX,EX,EY,EZ,NMAX)
C   DIMENSION AND COMMON STATEMENTS
      IMPLICIT REAL*8 (A-H,O-Z)
      DIMENSION B(NMAX,NMAX),BIN(NMAX,NMAX),AA(NMAX,NMAX),BB(NMAX,NMAX)
      DIMENSION FX(NMAX,NMAX),FF(NMAX,NMAX)
      DIMENSION PIVOT(NMAX),INDEX(NMAX*2)
      DIMENSION EX(NATOM,NATOM),EY(NATOM,NATOM),EZ(NATOM,NATOM)
      COMMON/VIB101/NATOM,NAT1,N3N,NINT
      COMMON/VIB102/ESCF
      COMMON/VIB103/NST,NBND,NLIB,NDEF,NTORS
      COMMON/VIB104/IFORCE,IGRAD,IATOM,ICOOD,IPRNT
      COMMON/VIB201/CHG(50),X(50),Y(50),Z(50)
      COMMON/VIB202/R(1275)
      COMMON/VIB203/ENGX(50),ENGY(50),ENGZ(50)
      COMMON/VIB204/RINT(150),ENGR(150)
      COMMON/VIB205/IOFF(150)
      COMMON/VIB301/KR(150),LR(150)
      COMMON/VIB302/KA(150),LA(150),MA(150),AGLB(150)
      COMMON/VIB303/KB(100),LB(100),MB(100),AGLL(100)
      COMMON/VIB304/KD(100),LD(100),MD(100),ND(100)
      COMMON/VIB305/KT(100),LT(100),MT(100),NT(100)
      COMMON/VIB306/AGLT(100),AGLO(100),AGLR(100)
      COMMON/VIB307/AGLD(100),AGLE(100),AGLF(100)
      DATA ITAP12,ITAP15 / 12 , 15 /
      DATA ZERO,ONE / 0.0D+00 , 1.0D+00 /
      DATA PI / 3.1415926536D+00 /
C   FORMAT STATEMENTS
    1 FORMAT(//)
    2 FORMAT(10I5)
    3 FORMAT(2X,' PARAMETERS FOR THE CALCULATION'//
     * 2X,' NST    = ',I5/
     * 2X,' NBND   = ',I5/
     $ 2X,' NLIB   = ',I5/
     * 2X,' NDEF   = ',I5/
     * 2X,' NTORS  = ',I5/
     * 2X,' IFORCE = ',I5/
     * 2X,' IGRAD  = ',I5/
     * 2X,' IATOM  = ',I5/
     * 2X,' ICOOD  = ',I5/
     * 2X,' IPRNT  = ',I5/
     * 2X,' NINT   = ',I5/
     * 2X,' NATOM  = ',I5/
     * 2X,' N3N    = ',I5)
    4 FORMAT(2I5)
    5 FORMAT(//,2X,21H INTERNAL COORDINATES,50X,11H COORDINATE/
     1 73X,4H NO.)
    6 FORMAT(2X,12H BOND LENGTH/
     1 2X,20H   R   K-L    K    L/)
    7 FORMAT(2X,F10.5,2I5,51X,2H (,I2,1H))
    8 FORMAT(3I5)
    9 FORMAT(/,2X,11H BOND ANGLE/
     1 2X,25H ANG-KLM      K    L    M/)
   10 FORMAT(2X,F10.5,3I5,46X,2H (,I2,1H))
   11 FORMAT(/,2X,' LINEAR BOND ANGLE'/
     1 2X,8H ANG-KLM,5X,2H K,3X,2H L,3X,2H M/)
   12 FORMAT(4I5)
   13 FORMAT(/,2X,' OUT OF PLANE ANGLE'/
     1 2X,8H ANG-LNM,7X,8H ANG-KNM,7X,8H ANG-KNL,
     2 8X,2H K,3X,2H L,3X,2H M,3X,2H N/)
   14 FORMAT(2X,F10.5,5X,F10.5,5X,F10.5,3X,4I5,8X,2H (,I2,1H))
   15 FORMAT(/,2X,' TORSIONAL ANGLE'/
     1 2X,8H ANG-KLM,7X,8H ANG-LMN,7X,8H ANG-TOR,
     2 8X,2H K,3X,2H L,3X,2H M,3X,2H N/)
   16 FORMAT(//,2X,' EX MATRIX'/)
   17 FORMAT(//,2X,' EY MATRIX'/)
   18 FORMAT(//,2X,' EZ MATRIX'/)
   19 FORMAT(//,2X,' B MATRIX'/)
   20 FORMAT(//,2X,' B INVERSE MATRIX'/)
   21 FORMAT(//,2X,' DETERM OF B MATRIX = ',D15.7)
   22 FORMAT(//,2X,' B * B(-1) = E'/)
   23 FORMAT(//,2X,' INTERNAL ENERGY GRADIENTS '/
     1 5X,4H NO.,10X,7H COORD.,13X,6H GRAD./)
   24 FORMAT(2X,I7,5X,2F20.10)
   25 FORMAT(2I5)
   26 FORMAT(3F20.10)
   27 FORMAT(//,2X,' FX MATRIX'/)
   28 FORMAT(//,2X,' BIN * FX  MATRIX'/)
   29 FORMAT(//,2X,' F MATRIX'/)
   30 FORMAT(2I5,F20.10,I5)
   31 FORMAT(4F20.10)
   32 FORMAT(2F20.10)
   33 FORMAT(3F20.10)
C
      INPUT=5
      CALL LOCATE(INPUT,'# INTCOS #',IERR)
      READ(5,2) ID1,ID2,ID3,ID4,ID5,ID6,ID7,ID8,ID9,ID10
C
      WRITE(6,1)
      AR=PI/180.0D+00
      WRITE(6,3) NST,NBND,NLIB,NDEF,NTORS,IFORCE,IGRAD,IATOM,ICOOD,
     1           IPRNT,NINT,NATOM,N3N
C
C   THE CALCULATION OF B VECTORS
C   THE CALCULATION OF UNIT VECTORS
      DO 101 I=1,NATOM
      DO 101 J=1,NATOM
      EX(I,J)=ZERO
      EY(I,J)=ZERO
  101 EZ(I,J)=ZERO
      DO 102 I=1,NINT
      DO 102 J=1,N3N
  102 B(I,J)=ZERO
      DO 103 I=1,NAT1
      IR=I+1
      DO 103 J=IR,NATOM
      IJ=IOFF(MAX0(I,J))+MIN0(I,J)
      EX(I,J)=-(X(I)-X(J))/R(IJ)
      EY(I,J)=-(Y(I)-Y(J))/R(IJ)
      EZ(I,J)=-(Z(I)-Z(J))/R(IJ)
      EX(J,I)=-EX(I,J)
      EY(J,I)=-EY(I,J)
      EZ(J,I)=-EZ(I,J)
  103 CONTINUE
C***INPUT DATA FOR STRETCHINGS***
      READ(5,4) (KR(I),LR(I),I=1,NST)
      WRITE(6,5)
      WRITE(6,6)
      DO 104 I=1,NST
      K=KR(I)
      L=LR(I)
      II=I
      KL=IOFF(MAX0(K,L))+MIN0(K,L)
      RINT(II)=R(KL)
      WRITE(6,7) R(KL),KR(I),LR(I),II
  104 CONTINUE
      CALL STRNG(B,NMAX,EX,EY,EZ)
      IF(NBND.EQ.0) GO TO 201
C***INPUT DATA FOR BENDINGS***
      READ(5,8) (KA(I),LA(I),MA(I),I=1,NBND)
      WRITE(6,9)
      DO 105 I=1,NBND
      K=KA(I)
      L=LA(I)
      M=MA(I)
      II=I+NST
      AKLM=EX(L,K)*EX(L,M)+EY(L,K)*EY(L,M)+EZ(L,K)*EZ(L,M)
      AGLB(I)=DACOS(AKLM)
      ANG=AGLB(I)/AR
      RINT(II)=AGLB(I)
      WRITE(6,10) ANG,KA(I),LA(I),MA(I),II
  105 CONTINUE
      CALL BENDNG(B,NMAX,EX,EY,EZ)
  201 IF(NLIB.EQ.0) GO TO 202
C***INPUT DATA FOR LINEAR BENDINGS***
      NLHF=NLIB/2
      READ(5,8) (KB(I),LB(I),MB(I),I=1,NLHF)
      WRITE(6,11)
      DO 106 I=1,NLHF
      I1=2*I-1+NST+NBND
      I2=I1+1
      K=KB(I)
      L=LB(I)
      M=MB(I)
      AKLM=EX(L,K)*EX(L,M)+EY(L,K)*EY(L,M)+EZ(L,K)*EZ(L,M)
      IF(DABS(AKLM).GT.ONE) AKLM=DSIGN(ONE,AKLM)
      AGLL(I)=DACOS(AKLM)
      ANG=AGLL(I)/AR
      RINT(I1)=AGLL(I)
      RINT(I2)=AGLL(I)
      WRITE(6,10) ANG,KB(I),LB(I),MB(I),I1
      WRITE(6,10) ANG,KB(I),LB(I),MB(I),I2
  106 CONTINUE
      CALL LINBND(B,NMAX,EX,EY,EZ)
  202 IF(NDEF.EQ.0) GO TO 203
C***INPUT DATA FOR DEFORMATIONS***
      READ(5,12) (KD(I),LD(I),MD(I),ND(I),I=1,NDEF)
      WRITE(6,13)
      DO 107 I=1,NDEF
      II=I+NST+NBND+NLIB
      K=KD(I)
      L=LD(I)
      M=MD(I)
      N=ND(I)
      ALNM=EX(N,L)*EX(N,M)+EY(N,L)*EY(N,M)+EZ(N,L)*EZ(N,M)
      AGLD(I)=DACOS(ALNM)
      AKNM=EX(N,K)*EX(N,M)+EY(N,K)*EY(N,M)+EZ(N,K)*EZ(N,M)
      AGLE(I)=DACOS(AKNM)
      AKNL=EX(N,K)*EX(N,L)+EY(N,K)*EY(N,L)+EZ(N,K)*EZ(N,L)
      AGLF(I)=DACOS(AKNL)
      DLM=AGLD(I)/AR
      DKM=AGLE(I)/AR
      DKL=AGLF(I)/AR
      RINT(II)=AGLD(I)
      WRITE(6,14) DLM,DKM,DKL,KD(I),LD(I),MD(I),ND(I),II
  107 CONTINUE
      CALL DEFORM(B,NMAX,EX,EY,EZ)
  203 IF(NTORS.EQ.0) GO TO 204
C***INPUT DATA FOR TORSIONS***
      READ(5,12) (KT(I),LT(I),MT(I),NT(I),I=1,NTORS)
      WRITE(6,15)
      DO 108 I=1,NTORS
      II=I+NST+NBND+NLIB+NDEF
      K=KT(I)
      L=LT(I)
      M=MT(I)
      N=NT(I)
      AKLM=EX(L,K)*EX(L,M)+EY(L,K)*EY(L,M)+EZ(L,K)*EZ(L,M)
      AGLT(I)=DACOS(AKLM)
      ALMN=EX(M,L)*EX(M,N)+EY(M,L)*EY(M,N)+EZ(M,L)*EZ(M,N)
      AGLO(I)=DACOS(ALMN)
C     PX=(EY(K,L)*EZ(L,M)-EZ(K,L)*EY(L,M))
C     PY=(EZ(K,L)*EX(L,M)-EX(K,L)*EZ(L,M))
C     PZ=(EX(K,L)*EY(L,M)-EY(K,L)*EX(L,M))
C     QX=(EY(L,M)*EZ(M,N)-EZ(L,M)*EY(M,N))
C     QY=(EZ(L,M)*EX(M,N)-EX(L,M)*EZ(M,N))
C     QZ=(EX(L,M)*EY(M,N)-EY(L,M)*EX(M,N))
C     SINPQ=DSQRT(ONE-AKLM*AKLM)*DSQRT(ONE-ALMN*ALMN)
C     AKLMN=(PX*QX+PY*QY+PZ*QZ)/SINPQ
      PX=(EY(L,K)*EZ(L,M)-EZ(L,K)*EY(L,M))
      PY=(EZ(L,K)*EX(L,M)-EX(L,K)*EZ(L,M))
      PZ=(EX(L,K)*EY(L,M)-EY(L,K)*EX(L,M))
      QX=(EY(M,L)*EZ(M,N)-EZ(M,L)*EY(M,N))
      QY=(EZ(M,L)*EX(M,N)-EX(M,L)*EZ(M,N))
      QZ=(EX(M,L)*EY(M,N)-EY(M,L)*EX(M,N))
      SINPQ=DSQRT(ONE-AKLM*AKLM)*DSQRT(ONE-ALMN*ALMN)
      AKLMN=(PX*QX+PY*QY+PZ*QZ)/SINPQ
      IF(DABS(AKLMN).GT.ONE) AKLMN=DSIGN(ONE,AKLMN)
      AGLR(I)=DACOS(AKLMN)
      ATL=AGLT(I)/AR
      ATM=AGLO(I)/AR
      ATT=AGLR(I)/AR
      RINT(II)=AGLR(I)
      WRITE(6,14) ATL,ATM,ATT,KT(I),LT(I),MT(I),NT(I),II
  108 CONTINUE
      CALL TORS(B,NMAX,EX,EY,EZ)
C
C   PRINT OUT E VECTORS
  204 IF(IPRNT.LE.2) GO TO 301
      WRITE(6,16)
      CALL MATOUT(EX,NATOM,NATOM,NATOM,NATOM,6)
      WRITE(6,17)
      CALL MATOUT(EY,NATOM,NATOM,NATOM,NATOM,6)
      WRITE(6,18)
      CALL MATOUT(EZ,NATOM,NATOM,NATOM,NATOM,6)
C
  301 IF(IPRNT.LE.2) GO TO 302
      WRITE(6,19)
      CALL MATOUT(B,NMAX,NMAX,NINT,N3N,6)
C   THE CALCULATION OF INVERSE B MATRIX
  302 DO 111 I=1,NINT
      DO 111 J=1,NINT
      BB(I,J)=ZERO
      DO 111 K=1,N3N
      BB(I,J)=BB(I,J)+B(I,K)*B(J,K)
  111 CONTINUE
      DO 112 I=1,NINT
      DO 112 J=1,NINT
  112 BIN(I,J)=BB(I,J)
      CALL MATINV(BIN,AA,PIVOT,INDEX,NINT,NINT,DETERM,NMAX)
      IF(IPRNT.LE.2) GO TO 303
      WRITE(6,20)
      CALL MATOUT(BIN,NMAX,NMAX,NINT,NINT,6)
  303 WRITE(6,21) DETERM
      DO 113 I=1,NINT
      DO 113 J=1,NINT
      AA(I,J)=ZERO
      DO 113 K=1,NINT
      AA(I,J)=AA(I,J)+BIN(I,K)*BB(K,J)
  113 CONTINUE
      IF(IPRNT.LE.2) GO TO 304
      WRITE(6,22)
      CALL MATOUT(AA,NMAX,NMAX,NINT,NINT,6)
  304 DO 114 I=1,NINT
      DO 114 J=1,N3N
      BB(I,J)=ZERO
      DO 114 K=1,NINT
      BB(I,J)=BB(I,J)+BIN(I,K)*B(K,J)
  114 CONTINUE
C
C***********************************************************
C***TRANSFORM GRADIENTS FROM CARTESIAN TO INTERNAL SYSTEM***
C***********************************************************
      DO 116 I=1,NINT
      ENGR(I)=ZERO
      DO 115 J=1,NATOM
      JX=3*J-2
      JY=3*J-1
      JZ=3*J
      ENGR(I)=ENGR(I)+ENGX(J)*BB(I,JX)+ENGY(J)*BB(I,JY)
     1 +ENGZ(J)*BB(I,JZ)
  115 CONTINUE
  116 CONTINUE
      WRITE(6,23)
      DO 117 I=1,NINT
      WRITE(6,24) I,RINT(I),ENGR(I)
  117 CONTINUE
C
C***********************************************************************
C***TRANSFORM FORCE CONSTANT MATRIX FROM CARTESIAN TO INTERNAL SYSTEM***
C***********************************************************************
      IF(IFORCE.EQ.0) GO TO 310
C   READ IN FORCE CONSTANT MATRIX
      REWIND ITAP15
      READ(ITAP15,25) NATOM,NNC
      READ(ITAP15,26) ((FX(I,J),J=1,N3N),I=1,N3N)
      IF(IPRNT.LE.2) GO TO 305
      WRITE(6,27)
      CALL MATOUT(FX,NMAX,NMAX,NNB,N3N,N3N,6)
C   TRANSFORM FX INTO F
  305 DO 121 I=1,NINT
      DO 121 J=1,N3N
      AA(I,J)=ZERO
      DO 120 K=1,N3N
      AA(I,J)=AA(I,J)+BB(I,K)*FX(K,J)
  120 CONTINUE
  121 CONTINUE
      IF(IPRNT.LE.2) GO TO 306
      WRITE(6,28)
      CALL MATOUT(AA,NMAX,NMAX,NINT,N3N,6)
  306 DO 123 I=1,NINT
      DO 123 J=1,NINT
      FF(I,J)=ZERO
      DO 122 K=1,N3N
      FF(I,J)=FF(I,J)+AA(I,K)*BB(J,K)
  122 CONTINUE
  123 CONTINUE
      IF(IPRNT.LE.1) GO TO 307
      WRITE(6,29)
      CALL MATOUT(FF,NMAX,NMAX,NINT,NINT,6)
  307 REWIND ITAP15
C
C   SEND INFORMATION TO GEOMETRY OPTIMIZATION PROGRAM WITH TAPE12
  310 CONTINUE
      REWIND ITAP12
      WRITE(ITAP12,30) NATOM,NINT,ESCF,IFORCE
      DO 125 I=1,NATOM
      WRITE(ITAP12,31) CHG(I),X(I),Y(I),Z(I)
  125 CONTINUE
      DO 126 I=1,NATOM
      WRITE(ITAP12,31) CHG(I),ENGX(I),ENGY(I),ENGZ(I)
  126 CONTINUE
      DO 127 I=1,NINT
      WRITE(ITAP12,32) RINT(I),ENGR(I)
  127 CONTINUE
      IF(IFORCE.EQ.0) GO TO 315
      WRITE(ITAP12,33) ((FF(I,J),J=1,NINT),I=1,NINT)
  315 CONTINUE
      REWIND ITAP12
C
      RETURN
      END
      SUBROUTINE STRNG(B,NMAX,EX,EY,EZ)
      IMPLICIT REAL*8 (A-H,O-Z)
      DIMENSION B(NMAX,NMAX)
      DIMENSION EX(NATOM,NATOM),EY(NATOM,NATOM),EZ(NATOM,NATOM)
      COMMON/VIB101/NATOM,NAT1,N3N,NINT
      COMMON/VIB103/NST,NBND,NLIB,NDEF,NTORS
      COMMON/VIB301/KR(150),LR(150)
C
C   THE CALCULATION OF S VECTORS FOR STRETCHINGS
      DO 101 I=1,NST
      K=KR(I)
      L=LR(I)
      KX=3*K-2
      KY=3*K-1
      KZ=3*K
      LX=3*L-2
      LY=3*L-1
      LZ=3*L
      B(I,KX)=EX(L,K)
      B(I,KY)=EY(L,K)
      B(I,KZ)=EZ(L,K)
      B(I,LX)=EX(K,L)
      B(I,LY)=EY(K,L)
  101 B(I,LZ)=EZ(K,L)
      RETURN
      END
      SUBROUTINE BENDNG(B,NMAX,EX,EY,EZ)
      IMPLICIT REAL*8 (A-H,O-Z)
      DIMENSION B(NMAX,NMAX)
      DIMENSION EX(NATOM,NATOM),EY(NATOM,NATOM),EZ(NATOM,NATOM)
      COMMON/VIB101/NATOM,NAT1,N3N,NINT
      COMMON/VIB103/NST,NBND,NLIB,NDEF,NTORS
      COMMON/VIB202/R(1275)
      COMMON/VIB205/IOFF(150)
      COMMON/VIB302/KA(150),LA(150),MA(150),AGLB(150)
C
C   THE CALCULATION OF S VECTORS FOR ANGLE BENDINGS
      DO 101 I=1,NBND
      II=I+NST
      K=KA(I)
      L=LA(I)
      M=MA(I)
      KX=3*K-2
      KY=3*K-1
      KZ=3*K
      LX=3*L-2
      LY=3*L-1
      LZ=3*L
      MX=3*M-2
      MY=3*M-1
      MZ=3*M
      AG=AGLB(I)
      LK=IOFF(MAX0(L,K))+MIN0(L,K)
      LM=IOFF(MAX0(L,M))+MIN0(L,M)
      B(II,KX)=(DCOS(AG)*EX(L,K)-EX(L,M))/(R(LK)*DSIN(AG))
      B(II,KY)=(DCOS(AG)*EY(L,K)-EY(L,M))/(R(LK)*DSIN(AG))
      B(II,KZ)=(DCOS(AG)*EZ(L,K)-EZ(L,M))/(R(LK)*DSIN(AG))
      B(II,MX)=(DCOS(AG)*EX(L,M)-EX(L,K))/(R(LM)*DSIN(AG))
      B(II,MY)=(DCOS(AG)*EY(L,M)-EY(L,K))/(R(LM)*DSIN(AG))
      B(II,MZ)=(DCOS(AG)*EZ(L,M)-EZ(L,K))/(R(LM)*DSIN(AG))
      B(II,LX)=-B(II,KX)-B(II,MX)
      B(II,LY)=-B(II,KY)-B(II,MY)
  101 B(II,LZ)=-B(II,KZ)-B(II,MZ)
      RETURN
      END
      SUBROUTINE LINBND(B,NMAX,EX,EY,EZ)
      IMPLICIT REAL*8 (A-H,O-Z)
      DIMENSION B(NMAX,NMAX)
      DIMENSION EX(NATOM,NATOM),EY(NATOM,NATOM),EZ(NATOM,NATOM)
      COMMON/VIB101/NATOM,NAT1,N3N,NINT
      COMMON/VIB103/NST,NBND,NLIB,NDEF,NTORS
      COMMON/VIB201/CHG(50),X(50),Y(50),Z(50)
      COMMON/VIB202/R(1275)
      COMMON/VIB205/IOFF(150)
      COMMON/VIB303/KB(100),LB(100),MB(100),AGLL(100)
      DATA ONE,TWO,THREE / 1.0D+00 , 2.0D+00 , 3.0D+00 /
      DATA PI / 3.1415926536D+00 /
C
 
      NLHF=NLIB/2
C   N IS A DUMMY ATOM
      DO 101 I=1,NLHF
      I1=2*I-1+NST+NBND
      I2=I1+1
      K=KB(I)
      L=LB(I)
      M=MB(I)
      KX=3*K-2
      KY=3*K-1
      KZ=3*K
      LX=3*L-2
      LY=3*L-1
      LZ=3*L
      MX=3*M-2
      MY=3*M-1
      MZ=3*M
      XN=X(M)+ONE
      YN=Y(M)+ONE
      ZN=Z(M)+ONE
      RMN=DSQRT(THREE)
      ML=IOFF(MAX0(M,L))+MIN0(M,L)
      RML=R(ML)
      KL=IOFF(MAX0(K,L))+MIN0(K,L)
      RNL=DSQRT((XN-X(L))**2+(YN-Y(L))**2+(ZN-Z(L))**2)
      SQCOS=(RNL**2-RMN**2-RML**2)/(TWO*RML*RMN)
      AGM=PI-DACOS(SQCOS)
      EXMN=ONE/RMN
      EYMN=ONE/RMN
      EZMN=ONE/RMN
      B(I1,KX)=(DCOS(AGM)*EX(M,L)-EXMN)/(R(KL)*DSIN(AGM))
      B(I1,KY)=(DCOS(AGM)*EY(M,L)-EYMN)/(R(KL)*DSIN(AGM))
      B(I1,KZ)=(DCOS(AGM)*EZ(M,L)-EZMN)/(R(KL)*DSIN(AGM))
      B(I1,MX)=(DCOS(AGM)*EX(M,L)-EXMN)/(R(ML)*DSIN(AGM))
      B(I1,MY)=(DCOS(AGM)*EY(M,L)-EYMN)/(R(ML)*DSIN(AGM))
      B(I1,MZ)=(DCOS(AGM)*EZ(M,L)-EZMN)/(R(ML)*DSIN(AGM))
      B(I1,LX)=-B(I1,KX)-B(I1,MX)
      B(I1,LY)=-B(I1,KY)-B(I1,MY)
      B(I1,LZ)=-B(I1,KZ)-B(I1,MZ)
      B(I2,KX)=-(EYMN*EZ(M,L)-EZMN*EY(M,L))/(R(KL)*DSIN(AGM))
      B(I2,KY)=-(EZMN*EX(M,L)-EXMN*EZ(M,L))/(R(KL)*DSIN(AGM))
      B(I2,KZ)=-(EXMN*EY(M,L)-EYMN*EX(M,L))/(R(KL)*DSIN(AGM))
      B(I2,MX)=-(EYMN*EZ(M,L)-EZMN*EY(M,L))/(R(ML)*DSIN(AGM))
      B(I2,MY)=-(EZMN*EX(M,L)-EXMN*EZ(M,L))/(R(ML)*DSIN(AGM))
      B(I2,MZ)=-(EXMN*EY(M,L)-EYMN*EX(M,L))/(R(ML)*DSIN(AGM))
      B(I2,LX)=-B(I2,KX)-B(I2,MX)
      B(I2,LY)=-B(I2,KY)-B(I2,MY)
      B(I2,LZ)=-B(I2,KZ)-B(I2,MZ)
  101 CONTINUE
      RETURN
      END
      SUBROUTINE DEFORM(B,NMAX,EX,EY,EZ)
      IMPLICIT REAL*8 (A-H,O-Z)
      DIMENSION B(NMAX,NMAX)
      DIMENSION EX(NATOM,NATOM),EY(NATOM,NATOM),EZ(NATOM,NATOM)
      COMMON/VIB101/NATOM,NAT1,N3N,NINT
      COMMON/VIB103/NST,NBND,NLIB,NDEF,NTORS
      COMMON/VIB202/R(1275)
      COMMON/VIB205/IOFF(150)
      COMMON/VIB304/KD(100),LD(100),MD(100),ND(100)
C
C   THE CALCULATION OF S VECTORS FOR OUT OF PLANE DEFORMATIONS
      DO 101 I=1,NDEF
      II=I+NST+NBND+NLIB
      K=KD(I)
      L=LD(I)
      M=MD(I)
      N=ND(I)
      KX=3*K-2
      KY=3*K-1
      KZ=3*K
      LX=3*L-2
      LY=3*L-1
      LZ=3*L
      MX=3*M-2
      MY=3*M-1
      MZ=3*M
      NX=3*N-2
      NY=3*N-1
      NZ=3*N
      NK=IOFF(MAX0(N,K))+MIN0(N,K)
      NL=IOFF(MAX0(N,L))+MIN0(N,L)
      NM=IOFF(MAX0(N,M))+MIN0(N,M)
      CEXLM=EY(N,L)*EZ(N,M)-EZ(N,L)*EY(N,M)
      CEYLM=EZ(N,L)*EX(N,M)-EX(N,L)*EZ(N,M)
      CEZLM=EX(N,L)*EY(N,M)-EY(N,L)*EX(N,M)
      CEXMK=EY(N,M)*EZ(N,K)-EZ(N,M)*EY(N,K)
      CEYMK=EZ(N,M)*EX(N,K)-EX(N,M)*EZ(N,K)
      CEZMK=EX(N,M)*EY(N,K)-EY(N,M)*EX(N,K)
      CEXKL=EY(N,K)*EZ(N,L)-EZ(N,K)*EY(N,L)
      CEYKL=EZ(N,K)*EX(N,L)-EX(N,K)*EZ(N,L)
      CEZKL=EX(N,K)*EY(N,L)-EY(N,K)*EX(N,L)
      B(II,KX)=CEXLM/R(NK)
      B(II,KY)=CEYLM/R(NK)
      B(II,KZ)=CEZLM/R(NK)
      B(II,LX)=CEXMK/R(NL)
      B(II,LY)=CEYMK/R(NL)
      B(II,LZ)=CEZMK/R(NL)
      B(II,MX)=CEXKL/R(NM)
      B(II,MY)=CEYKL/R(NM)
      B(II,MZ)=CEZKL/R(NM)
      B(II,NX)=-B(II,KX)-B(II,LX)-B(II,MX)
      B(II,NY)=-B(II,KY)-B(II,LY)-B(II,MY)
  101 B(II,NZ)=-B(II,KZ)-B(II,LZ)-B(II,MZ)
      RETURN
      END
      SUBROUTINE TORS(B,NMAX,EX,EY,EZ)
      IMPLICIT REAL*8 (A-H,O-Z)
      DIMENSION B(NMAX,NMAX)
      DIMENSION EX(NATOM,NATOM),EY(NATOM,NATOM),EZ(NATOM,NATOM)
      COMMON/VIB101/NATOM,NAT1,N3N,NINT
      COMMON/VIB103/NST,NBND,NLIB,NDEF,NTORS
      COMMON/VIB202/R(1275)
      COMMON/VIB205/IOFF(150)
      COMMON/VIB305/KT(100),LT(100),MT(100),NT(100)
      COMMON/VIB306/AGLT(100),AGLO(100),AGLR(100)
C
C   THE CALCULATION OF S VECTORS FOR TORSIONS
      DO 101 I=1,NTORS
      II=I+NST+NBND+NLIB+NDEF
      K=KT(I)
      L=LT(I)
      M=MT(I)
      N=NT(I)
      KX=3*K-2
      KY=3*K-1
      KZ=3*K
      LX=3*L-2
      LY=3*L-1
      LZ=3*L
      MX=3*M-2
      MY=3*M-1
      MZ=3*M
      NX=3*N-2
      NY=3*N-1
      NZ=3*N
      KL=IOFF(MAX0(K,L))+MIN0(K,L)
      MN=IOFF(MAX0(M,N))+MIN0(M,N)
      ML=IOFF(MAX0(M,L))+MIN0(M,L)
      AL=AGLT(I)
      AM=AGLO(I)
CCC   CEXKM=EY(L,K)*EZ(L,M)-EZ(L,K)*EY(L,M)
CCC   CEYKM=EZ(L,K)*EX(L,M)-EX(L,K)*EZ(L,M)
CCC   CEZKM=EX(L,K)*EY(L,M)-EY(L,K)*EX(L,M)
CCC   CEXNL=EY(M,N)*EZ(M,L)-EZ(M,N)*EY(M,L)
CCC   CEYNL=EZ(M,N)*EX(M,L)-EX(M,N)*EZ(M,L)
CCC   CEZNL=EX(M,N)*EY(M,L)-EY(M,N)*EX(M,L)
      CEXKM=EY(K,L)*EZ(L,M)-EZ(K,L)*EY(L,M)
      CEYKM=EZ(K,L)*EX(L,M)-EX(K,L)*EZ(L,M)
      CEZKM=EX(K,L)*EY(L,M)-EY(K,L)*EX(L,M)
      CEXNL=EY(N,M)*EZ(M,L)-EZ(N,M)*EY(M,L)
      CEYNL=EZ(N,M)*EX(M,L)-EX(N,M)*EZ(M,L)
      CEZNL=EX(N,M)*EY(M,L)-EY(N,M)*EX(M,L)
      RS2K=R(KL)*DSIN(AL)**2
      RS2M=R(ML)*DSIN(AM)**2
      RS2N=R(MN)*DSIN(AM)**2
      RS2L=R(ML)*DSIN(AL)**2
      B(II,KX)=-CEXKM/RS2K
      B(II,KY)=-CEYKM/RS2K
      B(II,KZ)=-CEZKM/RS2K
      B(II,LX)=(R(ML)-R(KL)*DCOS(AL))*CEXKM/(R(ML)*RS2K)+
     1 DCOS(AM)*CEXNL/RS2M
      B(II,LY)=(R(ML)-R(KL)*DCOS(AL))*CEYKM/(R(ML)*RS2K)+
     1 DCOS(AM)*CEYNL/RS2M
      B(II,LZ)=(R(ML)-R(KL)*DCOS(AL))*CEZKM/(R(ML)*RS2K)+
     1 DCOS(AM)*CEZNL/RS2M
      B(II,MX)=(R(ML)-R(MN)*DCOS(AM))*CEXNL/(R(ML)*RS2N)+
     1 DCOS(AL)*CEXKM/RS2L
      B(II,MY)=(R(ML)-R(MN)*DCOS(AM))*CEYNL/(R(ML)*RS2N)+
     1 DCOS(AL)*CEYKM/RS2L
      B(II,MZ)=(R(ML)-R(MN)*DCOS(AM))*CEZNL/(R(ML)*RS2N)+
     1 DCOS(AL)*CEZKM/RS2L
      B(II,NX)=-CEXNL/RS2N
      B(II,NY)=-CEYNL/RS2N
  101 B(II,NZ)=-CEZNL/RS2N
      RETURN
      END
