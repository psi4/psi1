      PROGRAM NEW3RD
C**********************************************************************
C                                                                     *
C   THIRD DERIVATIVE PROGRAM PART 1 : "DER3RD"                        *
C                                                                     *
C   THIS IS THE DRIVER FOR A THRID DERIVATIVE INTEGRAL PROGRAM        *
C                                                                     *
C**********************************************************************
C*   NOTICE OF PROGRAM MODIFICATION                                   *
C**********************************************************************
C*  BY:  RICHARD REMINGTON                         SEARCH: C02-01-89  *
C*  DATE:  FEBRUARY  1, 1989                                          *
C*  REASON: DECREASE CORE FROM 15MB ON 3090 TO 7MB ON 9370.           *
C*          ALSO, MAKE CODE FORTRAN 77 STANDARD WITH GOTO'S.          *
C**********************************************************************
C                                                                     *
C   LAST MODIFIED ON :   JANUARY  02, 1985 BY JFG                     *
C   LAST UPDATED  ON :   APRIL    27, 1987 BY YUKIO YAMAGUCHI         *
C   INCREASED CORE MEMORY FROM 1500K TO 1700K                         *
C                                                                     *
C**********************************************************************
      IMPLICIT INTEGER (B-Z)
      IMPLICIT REAL*8 (A)
C02-01-89   DIMENSION AI(1700000),IA(1),I30(200)
      DIMENSION AI(700000),IA(1),I30(200)
      REAL*8 X,Y,Z,CHG,EX,EY,EZ,BET,TOL
      CHARACTER*8 SCFTYP,CITYP,DERTYP
      COMMON/CALIF/LPARA(1024),APARA(1024)
      COMMON/CALQN/ISTYPE,ICTYPE,NDERIV,NTYPES,NBSET
      COMMON/COORD/X(50),Y(50),Z(50),CHG(50)
      COMMON/EXYZS/EX(686),EY(686),EZ(686)
      COMMON/FILES/IOUT,INPUT,IDBG
      COMMON/IADRS/IPASS(35)
      COMMON/IPAR1/NS,N3N,I2N3N,I3N3N
      COMMON/IPAR2/NBFAO,NUMIJ,NUMNUM
      COMMON/IPAR3/TSHELL,TPRIM
      COMMON/IPAR4/IMEM,IMEM2,IMEM4
      COMMON/IPAR5/IANG,IANGSQ,LARGL,LARGL2,I2LARL,I4LARL
      COMMON/IPAR6/IMTOT
      COMMON/KEEPS/IDRVT,IDRVF
      COMMON/MFSEC/MASTER,NSECT
      COMMON/MINFO/ALP(30,30),BET(30,30)
      COMMON/SIGNS/IOFF(256),IPRNT
      COMMON/TAPES/ITAP30,ITAP38,ITAP42,ITAP45,ITAP46
      COMMON/TOLER/TOL(10)
      COMMON/WORKS/JTAPE1,JTAPE2
      EQUIVALENCE (AI,IA)
    1 FORMAT(/,2X,' HERMITE-GAUSSIAN TYPE ORBITAL INTEGRAL PROGRAM'
     1       /,2X,' VERSION OF 01/23/87'/)
    2 FORMAT(3(A8,2X))
    3 FORMAT(/,3X,3(A8,2X)/)
    4 FORMAT(5I5)
  106 FORMAT(/,2X,' ONE ELECTRON SIZE =',I10)
  107 FORMAT(/,2X,' CALLING READIN')
  108 FORMAT(/,2X,' AMOUNT OF CORE NEEDS TO BE INCREASED TO AT LEAST '
     *        ,I10)
  110 FORMAT(/,2X,' WE HAVE TO PLAY AROUND WITH THE SIZES OF ARRAYS '/
     *,        2X,' RDENOM =',I10,' RDIV =',I10)
  111 FORMAT(/,2X,' TWO ELECTRON SIZE =',I10,5X,' IUNIT =',I10)
  112 FORMAT(/,2X,' AMOUNT OF CORE NEEDS TO BE INCREASED TO',I10,' STOP!
     1!!'/)
  115 FORMAT(/,2X,' CALLING RDVEC')
  116 FORMAT(/,2X,' CALLING INT1')
  117 FORMAT(/,2X,' CALLING INT2')
  120 FORMAT(/,2X,' CALLING NUCLEAR REPULSION DERIVATIVES')
  125 FORMAT(/,2X,' SPACE USED BEFORE STORING DERIVATIVES =',I10,/
     *,        2X,' SPACE LEFT =',I10)
  126 FORMAT(/,2X,' MISSING TYPE OF CALCULATION !'/)
  127 FORMAT(/,2X,' MISSING THE DER3RD STATEMENT !'/)
  128 FORMAT(/,3X,60('*')
     *,/,2X,' **THE 38 FILE NEEDS TO BE',I9,' RECORDS (1K BYTES EACH)**'
     *,/,3X,60('*')/)
  129 FORMAT(/,2X,' CALLING BRIDGE')
C
      CALL TSTART(6)
      CALL NOUNFL
      CALL INITMF(1)
C
C::::::::::::::::::::::::::::::::::
C:::DEFINE MAXCOR AND TOLERANCES:::
C::::::::::::::::::::::::::::::::::
C
C   MAXCOR : MAXIMUM CORE MEMORY ALLOWED
C   TOL(1) : BASIS SET CUTOFF
C   TOL(2) : KAB CUTOFF
C   TOL(3) : ONE ELECTRON CUTOFF
C   TOL(4) : TWO ELECTRON CUTOFF
C02-01-89   MAXCOR=1700000
      MAXCOR= 700000
      TOL(1)=1.0D-10
      TOL(2)=2.30258D+00*DBLE(20)
      TOL(3)=1.0D-10
      TOL(4)=1.0D-10
      TOL(5)=1.0D-10
      TOL(6)=1.0D-10
      TOL(7)=1.0D-10
      TOL(8)=1.0D-10
      TOL(9)=1.0D-10
      TOL(10)=1.0D-10
C
C   DEFINE TAPE NUMBERS
      INPUT=5
      IOUT=6
      IDBG=3
      ITAP11=11
      ITAP30=30
      ITAP38=38
      ITAP42=42
      ITAP45=45
      ITAP46=46
      JTAPE1=91
C
C===============================
C===READ IN THE INPUT OPTIONS===
C===============================
C
      CALL LOCATE(INPUT,'# NEW3RD #',IERR)
      IF(IERR .EQ. 1) THEN
        WRITE(IOUT,127)
        CALL DUMP
      END IF
C
      WRITE(IOUT,1)
      READ(INPUT,2) SCFTYP,CITYP,DERTYP
      WRITE(IOUT,3) SCFTYP,CITYP,DERTYP
C
      ISTYPE=0
      IF(SCFTYP.EQ.'CLSCF   ') ISTYPE=1
      IF(SCFTYP.EQ.'GRSCF   ') ISTYPE=2
      IF(SCFTYP.EQ.'TCSCF   ') ISTYPE=3
      IF(SCFTYP.EQ.'GVBSCF  ') ISTYPE=4
      IF(SCFTYP.EQ.'MCSCF   ') ISTYPE=5
      ICTYPE=0
      IF(CITYP.EQ.'SCF      ') ICTYPE=1
      IF(CITYP.EQ.'CI       ') ICTYPE=2
      IF(CITYP.EQ.'MCSCF    ') ICTYPE=3
      NDERIV=0
      IF(DERTYP.EQ.'FIRST   ') NDERIV=1
      IF(DERTYP.EQ.'SECOND  ') NDERIV=2
      IF(DERTYP.EQ.'THIRD   ') NDERIV=3
      IF(DERTYP.EQ.'FOURTH  ') NDERIV=4
      IF(NDERIV .EQ. 0) THEN
        WRITE(IOUT,126)
        CALL DUMP
      END IF
      IF(NDERIV .GE. 4) THEN
        WRITE(IOUT,126)
        CALL DUMP
      END IF
C
C   IDRVT IS AN OPTION TO STORE DERIVATIVE TWO ELECTRON INTEGRALS
C            ON TAPE38
C   IDRVT = 1 : KEEP ONLY THE 2E- FIRST DERIVATIVES
C   IDRVT = 2 : KEEP THE 2E- FIRST AND SECOND DERIVATIVES
C   IDRVT = 3 : KEEP THE 2E- FIRST, SECOND, AND THIRD DERIVATIVES
C
C   IDRVF IS AN OPTION TO CALCULATE DERIVATIVE FOCK MATRICES
C   IDRVF = 1 : KEEP ONLY FIRST DERIVATIVE FOCK'S
C   IDRVF = 2 : KEEP FIRST AND SECOND DERIVATIVE FOCK'S
C   IDRVF = 3 : KEEP FIRST, SECOND, AND THIRD DERIVATIVE FOCK'S
      READ(INPUT,4) IPRNT,IDRVT,IDRVF
      IF(IDRVT.EQ.0) IDRVT=1
      IF(IDRVF.EQ.0) IDRVF=2
      IF(IDRVT.GE.4) THEN
        WRITE(IOUT,126)
        CALL DUMP
      END IF
      IF(IDRVF.GE.4) THEN
        WRITE(IOUT,126)
        CALL DUMP
      END IF
C
      ITWO=0
      ITHREE=0
      IF(IDRVT.EQ.2) ITWO=1
      IF(IDRVT.EQ.3) THEN
        ITWO=1
        ITHREE=1
      END IF
C
C   SET UP THE IOFF ARRARY
C
      IOFF(1)=0
      DO 100 I=1,255
        IOFF(I+1)=IOFF(I) + I
  100 CONTINUE
C
C   READ IN SOME INFORMATION FROM TAPE30
C
      CALL RFILE(ITAP30)
      CALL WREADW(ITAP30,I30,200,101,JUNK)
      IEND=I30(1)
      MPOINT=I30(2)
      MCONST=I30(3)
      MCALCS=I30(4)
      NCALCS=I30(5)
      NBFSO=I30(18)
      NS=I30(19)
      NBFAO=I30(22)
      TSHELL=I30(27)
      TPRIM=I30(32)
      NSYM=I30(41)
      IOPEN=I30(43)
      NBASIS=NBFSO
C
      NTYPES=LPARA(18)
C
C:::::::::::::::::::::::::::::::::::
C:::READ IN BASIS SET INFORMATION:::
C:::::::::::::::::::::::::::::::::::
C
      NMEM=1
      LMNP1=NMEM + TSHELL
      NCON=LMNP1 + TSHELL
      NF=NCON + TSHELL
      NSHELL=NF + NS
      NFIRST=NSHELL + NS*TSHELL
      KST=NFIRST + NS*TSHELL
      INTSV=KST + NS*NS*NS
      ISTOP=INTSV +500*4
C
      ZET=(ISTOP + 1)/2 + 1
      ETA=ZET + TSHELL*TPRIM
      RSTOP=ETA + TSHELL*TPRIM
C
      CALL IZERO(IA(1),ISTOP)
      CALL ZERO(AI(ZET),RSTOP-ZET)
      WRITE(IDBG,107)
      CALL RDBAS(IA(NMEM),IA(LMNP1),IA(NCON),IA(NF),IA(NSHELL)
     *,          IA(NFIRST),AI(ZET),AI(ETA)
     *,          MPOINT,MCONST,NCALCS)
C
C:::::::::::::::::::::::::::::::::::::::::::::::::
C:::CALCULATE THE NUCLEAR REPULSION DERIVATIVES:::
C:::::::::::::::::::::::::::::::::::::::::::::::::
C
      CALL RFILE(JTAPE1)
C
      REP1=ETA + TSHELL*TPRIM
      REP2=REP1 + N3N
      REP3=REP2 + I2N3N
      RSTOP=REP3 + I3N3N
      CALL ZERO(AI(REP1),RSTOP-REP1)
      WRITE(IDBG,120)
      CALL REPUL(IA(KST),AI(REP1),AI(REP2),AI(REP3))
C
C:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
C:::READS VECTOR FROM THE MASTER TAPE AND FORM DENSITY MATRICES:::
C:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
C
      DENA=ETA + TSHELL*TPRIM
      DENB=DENA + NUMIJ*NTYPES
      DENC=DENB + NUMIJ*NTYPES
      DEN1T=DENC + NUMIJ*NTYPES
      OCC=DEN1T + NUMIJ
      EIG=OCC + NBFSO
      ESO=EIG + NBFSO
      RSTOP=ESO + NBFSO*NBFSO
      CALL ZERO(AI(DENA),RSTOP-DENA)
      WRITE(IDBG,115)
      CALL RDVECS(AI(DENA),AI(DENB),AI(DENC),AI(DEN1T),AI(OCC),AI(EIG)
     *,           AI(ESO),NBFSO)
C
C   SIZES OF THE G ARRAYS   I2LAR (2 E-) AND LARGL (1E-)
C
      IANG=LARGL
      IANGSQ=IANG*IANG
      IANG4 =IANGSQ*IANGSQ
      I2LARL=(LARGL*4-4)/2 + 1  + NDERIV
      I4LARL=LARGL*4 - 3  + NDERIV
      LARGL2=LARGL*2-1 + NDERIV
      LARGL=(LARGL*2-2)/2+1 + NDERIV
C
C::::::::::::::::::::::::::::::::::::::::::::
C:::CALCULATE THE ONE ELECTRON DERIVATIVES:::
C::::::::::::::::::::::::::::::::::::::::::::
C
      IJORB=EIG + EIG +1
      ISTOP=IJORB + IMEM2
      RSTART=(ISTOP + 1)/2 + 1
      EONE1=RSTART
      EONE2=EONE1 + N3N
      EONE3=EONE2 + I2N3N
      GT=EONE3 + I3N3N
      GU=GT + LARGL*NS*LARGL2
      GV=GU + LARGL*NS*LARGL2
      SX=GV + LARGL*NS*LARGL2
      SY=SX + IANGSQ
      SZ=SY + IANGSQ
      TX=SZ + IANGSQ
      TY=TX + IANGSQ
      TZ=TY + IANGSQ
      VX=TZ + IANGSQ
      VY=VX + IANGSQ
      VZ=VY + IANGSQ
      LAG=VZ + IANGSQ
      SXD=LAG + NUMIJ
      SYD=SXD + IANGSQ
      SZD=SYD + IANGSQ
      S1DER=SZD + IANGSQ
      S1LAG=S1DER + NUMIJ*N3N
      TXD=S1LAG + N3N
      TYD=TXD + IANGSQ
      TZD=TYD + IANGSQ
      VXD=TZD + IANGSQ
      VYD=VXD + IANGSQ*2
      VZD=VYD + IANGSQ*2
      V1DER=VZD + IANGSQ*2
      T1DER=V1DER
      STWO=V1DER + N3N*NUMIJ
      S2DER=STWO + IANGSQ*3
      S2LAG=S2DER + NUMIJ*I2N3N
      TTWO=S2LAG + I2N3N
C
      VXTWO=TTWO + IANGSQ*3
      VYTWO=VXTWO + IANGSQ*2
      VZTWO=VYTWO + IANGSQ*2
      V2DER=VZTWO + IANGSQ*2
      T2DER=V2DER
      V1B1K=V2DER + NUMIJ*I2N3N
      FIRB=V1B1K + IANGSQ*3
      FIRK=FIRB + IMEM2*3
      SECMXB=FIRK + IMEM2*3
      SECMXK=SECMXB + IMEM2*6
      MX1B1K=SECMXK + IMEM2*6
      STHRE=MX1B1K + IMEM2*9
      S3LAG=STHRE + IANGSQ*3
      S3DER=S3LAG
      TTHRE=S3LAG + I3N3N
C
      IF(IDRVF.EQ.3) THEN
        S3DER=S3LAG + I3N3N
        TTHRE=S3DER + NUMIJ*I3N3N
      END IF
C
      VXTHRE=TTHRE + IANGSQ*3
      VYTHRE=VXTHRE + IANGSQ*2
      VZTHRE=VYTHRE + IANGSQ*2
      V2B1K=VZTHRE + IANGSQ*2
      V1B2K=V2B1K + IANGSQ*3
      V3DER=V1B2K + IANGSQ*3
      T3DER=V3DER
      THRMXB=V3DER +I3N3N
C
      IF(IDRVF.EQ.3) THEN
         THRMXB=V3DER + NUMIJ*I3N3N
      END IF
C
      THRMXK=THRMXB + IMEM2*10 +100
      MX2B1K=THRMXK + IMEM2*10 +100
      MX1B2K=MX2B1K + IMEM2*18 +100
      R1STOP=MX1B2K + IMEM2*18 +100
      WRITE(IOUT,106) R1STOP
      IF(R1STOP .GT. MAXCOR) THEN
        WRITE(IOUT,108) R1STOP
        STOP
      END IF
      CALL IZERO(IA(IJORB),IMEM2)
      CALL ZERO(AI(EONE1),R1STOP-EONE1)
C
      WRITE(IDBG,116)
      CALL INT1(IA(NMEM),IA(LMNP1),IA(NCON),IA(NF),IA(NSHELL)
     1,    IA(NFIRST),IA(KST),IA(IJORB)
     2,    AI(ZET),AI(ETA),AI(DEN1T),AI(EONE1),AI(EONE2),AI(EONE3)
     3,    AI(GT),AI(GU),AI(GV),AI(SX),AI(SY),AI(SZ)
     4,    AI(TX),AI(TY),AI(TZ),AI(VX),AI(VY),AI(VZ),AI(LAG)
     5,    AI(SXD),AI(SYD),AI(SZD),AI(S1DER),AI(S1LAG)
     6,    AI(TXD),AI(TYD),AI(TZD),AI(VXD),AI(VYD),AI(VZD)
     7,    AI(V1DER),AI(T1DER),AI(STWO),AI(S2DER),AI(S2LAG),AI(TTWO)
     8,    AI(VXTWO),AI(VYTWO),AI(VZTWO),AI(V2DER),AI(T2DER)
     9,    AI(V1B1K),AI(FIRB),AI(FIRK),AI(SECMXB),AI(SECMXK),AI(MX1B1K)
     X,    AI(STHRE),AI(S3LAG),AI(S3DER),AI(TTHRE)
     1,    AI(VXTHRE),AI(VYTHRE),AI(VZTHRE)
     2,    AI(V2B1K),AI(V1B2K),AI(V3DER),AI(T3DER)
     3,    AI(THRMXB),AI(THRMXK),AI(MX2B1K),AI(MX1B2K))
C
C::::::::::::::::::::::::::::::::::::::::::::
C:::CALCULATE THE TWO ELECTRON DERIVATIVES:::
C::::::::::::::::::::::::::::::::::::::::::::
C
      ITOTDG=N3N+I2N3N
      IF(IDRVF.EQ.3) THEN
        ITOTDG=N3N+I2N3N+I3N3N
      END IF
C
      ETWO1=RSTART
      ETWO2=ETWO1 + N3N
      ETWO3=ETWO2 + I2N3N
      DAO=ETWO3 + I3N3N
      GT2=DAO + IMEM4
      GU2=GT2 + I2LARL*I4LARL
      GV2=GU2 + I2LARL*I4LARL
      DENT=GV2 + I2LARL*I4LARL
      DNTYP=DENT
      DNJ=DENT
      DNK=DENT
      XX0=DNTYP + NUMIJ*ITOTDG*NTYPES
C!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
C!!!NOTE : THE DERIVATIVE J AND K MATRICES WILL BE STORED SEPARATELY!!!
C!!!     : FOR TCSCF AND GVSCF WAVEFUNCTIONS                        !!!
C!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
      IF(ISTYPE.EQ.3.OR.ISTYPE.EQ.4) THEN
        DNJ=DENT
        DNK=DNJ + NUMIJ*ITOTDG*NTYPES
        XX0=DNK + NUMIJ*ITOTDG*NTYPES
      END IF
      XY0=XX0 + IANG4
      XZ0=XY0 + IANG4
      XXFIR=XZ0 + IANG4
      XYFIR=XXFIR + IANG4*3
      XZFIR=XYFIR + IANG4*3
      XXSEC=XZFIR + IANG4*3
      XYSEC=XXSEC + IANG4*3
      XZSEC=XYSEC + IANG4*3
      XXMXFF=XZSEC + IANG4*3
      XYMXFF=XXMXFF + IANG4*3
      XZMXFF=XYMXFF + IANG4*3
      GMXFIR=XZMXFF + IANG4*3
      GMXSEC=GMXFIR + IMEM4*3*3
      GMXFF= GMXSEC + IMEM4*6*3
      XXTHR=GMXFF + IMEM4*9*3
      XYTHR=XXTHR + IANG4*3
      XZTHR=XYTHR + IANG4*3
      XXFFF=XZTHR + IANG4*3
      XYFFF=XXFFF + IANG4
      XZFFF=XYFFF + IANG4
      XXFSMX=XZFFF + IANG4
      XYFSMX=XXFSMX + IANG4*6
      XZFSMX=XYFSMX + IANG4*6
      GMXTHR=XZFSMX + IANG4*6
      GMXFFF=GMXTHR + IMEM4*10*3
      GMXFS=GMXFFF + IMEM4*27
      RSTOP=GMXFS + IMEM4*18*6
      LO=RSTOP + RSTOP + 1
      ITYPE=LO + IMEM4*5
      ISTOP=ITYPE + IMEM4
      RLST=(ISTOP+1)/2 +1
C
C
C   FIGURE OUT HOW MUCH OF THE 2 E- DERIVATIVES WE CAN HOLD
C
      RTEST=MAXCOR-RLST
      RDIV=NUMNUM
      WRITE(IOUT,125) RLST,RTEST
      IUNIT1=NUMNUM*N3N + ITWO*NUMNUM*I2N3N+ ITHREE*NUMNUM*I3N3N
      ILAB=(NUMNUM*4+1)/2
      NEED=IUNIT1 + ILAB
      IF(NEED .LE. RTEST) THEN
        IUNIT=NUMNUM
        IUNIT4=NUMNUM*4
      ELSE
        RDENOM=N3N + 2 + ITWO*I2N3N + ITHREE*I3N3N
        RDIV=RTEST/RDENOM
        WRITE(IOUT,110) RDENOM,RDIV
        IUNIT=RDIV
        IUNIT4=IUNIT*4
      END IF
      IF(IUNIT.GT.10000) THEN
        IUNIT=10000
        IUNIT4=IUNIT*4
      END IF
C
      LOUT=ISTOP
      ISTOP=LOUT + IUNIT4
      VALU1=(ISTOP+1)/2 + 1
      VALU2=VALU1 + IUNIT*N3N
      VALU3=VALU2
      R2STOP=VALU2
      IF(IDRVT.EQ.2) THEN
        VALU3=VALU2 + IUNIT*I2N3N
        R2STOP=VALU3
      END IF
      IF(IDRVT.EQ.3) THEN
        VALU3=VALU2 + IUNIT*I2N3N
        R2STOP=VALU3 + IUNIT*I3N3N
      END IF
      WRITE(IOUT,111) R2STOP,IUNIT
      IF(R2STOP .GT. MAXCOR) THEN
        WRITE(IOUT,112) R2STOP
        STOP
      END IF
C
C   FIGURE OUT HOW MUCH SPACE IS NEEDED ON THE TAPE38
C
      ITIME=NUMNUM/RDIV
      IF(ITIME*RDIV .NE. NUMNUM) ITIME=ITIME+1
      I38ADD=ITIME*IUNIT*N3N*2 + ITIME*IUNIT4 + ITIME*IUNIT*ITWO*2*I2N3N
     *      + ITIME*IUNIT*ITHREE*2*I3N3N
      NREC38=NREC(I38ADD)
      WRITE(IOUT,128) NREC38
C
      CALL RFILE(ITAP38)
      CALL ZFILE(ITAP38,NREC38)
      CALL IZERO(IA(LO),IMEM4*5)
      CALL IZERO(IA(ITYPE),IMEM4)
      CALL IZERO(IA(LOUT),IUNIT4)
      CALL ZERO(AI(ETWO1),RSTOP-ETWO1)
      CALL ZERO(AI(VALU1),R2STOP-VALU1)
C
      WRITE(IDBG,117)
C     WRITE(6,*) ' NMEM,LMNP1,NCON,NF,NSHELL'
C     WRITE(6,*)   NMEM,LMNP1,NCON,NF,NSHELL
C     WRITE(6,*) ' NFIRST,KST,INTSV,LO,ITYPE,LOUT'
C     WRITE(6,*)   NFIRST,KST,INTSV,LO,ITYPE,LOUT
C     WRITE(6,*) ' ZET,ETA,DENA,DENB,DENC'
C     WRITE(6,*)   ZET,ETA,DENA,DENB,DENC
C     WRITE(6,*) ' ETWO1,ETWO2,ETWO3,DAO,GT2,GU2,GV2'
C     WRITE(6,*)   ETWO1,ETWO2,ETWO3,DAO,GT2,GU2,GV2
C     WRITE(6,*) ' DENT,DNTYP,DNJ,DNK,XX0,XY0,XZ0'
C     WRITE(6,*)   DENT,DNTYP,DNJ,DNK,XX0,XY0,XZ0
C     WRITE(6,*) ' XXFIR,XYFIR,XZFIR,XXSEC,XYSEC,XZSEC'
C     WRITE(6,*)   XXFIR,XYFIR,XZFIR,XXSEC,XYSEC,XZSEC
C     WRITE(6,*) ' XXMXFF,XYMXFF,XZMXFF'
C     WRITE(6,*)   XXMXFF,XYMXFF,XZMXFF
C     WRITE(6,*) ' GMXFIR,GMXSEC,GMXFF'
C     WRITE(6,*)   GMXFIR,GMXSEC,GMXFF
C     WRITE(6,*) ' XXTHR,XYTHR,XZTHR,XXFFF,XYFFF,XZFFF'
C     WRITE(6,*)   XXTHR,XYTHR,XZTHR,XXFFF,XYFFF,XZFFF
C     WRITE(6,*) ' XXFSMX,XYFSMX,XZFSMX'
C     WRITE(6,*)   XXFSMX,XYFSMX,XZFSMX
C     WRITE(6,*) ' GMXTHR,GMXFFF,GMXFS,VALU1,VALU2,VALU3'
C     WRITE(6,*)   GMXTHR,GMXFFF,GMXFS,VALU1,VALU2,VALU3
C     WRITE(6,*) ' ITOTDG,IUNIT,IUNIT4'
C     WRITE(6,*)   ITOTDG,IUNIT,IUNIT4
      CALL INT2(IA(NMEM),IA(LMNP1),IA(NCON),IA(NF),IA(NSHELL)
     1,    IA(NFIRST),IA(KST),IA(INTSV),IA(LO),IA(ITYPE),IA(LOUT)
     2,    AI(ZET),AI(ETA),AI(DENA),AI(DENB),AI(DENC)
     3,    AI(ETWO1),AI(ETWO2),AI(ETWO3),AI(DAO),AI(GT2),AI(GU2),AI(GV2)
     4,    AI(DENT),AI(DNTYP),AI(DNJ),AI(DNK),AI(XX0),AI(XY0),AI(XZ0)
     5,    AI(XXFIR),AI(XYFIR),AI(XZFIR),AI(XXSEC),AI(XYSEC),AI(XZSEC)
     6,    AI(XXMXFF),AI(XYMXFF),AI(XZMXFF)
     7,    AI(GMXFIR),AI(GMXSEC),AI(GMXFF)
     8,    AI(XXTHR),AI(XYTHR),AI(XZTHR),AI(XXFFF),AI(XYFFF),AI(XZFFF)
     9,    AI(XXFSMX),AI(XYFSMX),AI(XZFSMX)
     X,    AI(GMXTHR),AI(GMXFFF),AI(GMXFS),AI(VALU1),AI(VALU2),AI(VALU3)
     1,    ITOTDG,IUNIT,IUNIT4)
C
C:::::::::::::::::::::::::::
C:::MAKE DERIVATIVE FILES:::
C:::::::::::::::::::::::::::
C
 1234 CONTINUE
      WRITE(IDBG,129)
      CALL BRIDGE(AI,IA,MAXCOR)
C
      CALL RCLOSE(MASTER,3)
      CALL RCLOSE(ITAP30,3)
      CALL RCLOSE(ITAP38,3)
      CALL RCLOSE(ITAP42,3)
      CALL RCLOSE(ITAP45,3)
      CALL RCLOSE(ITAP46,3)
      CALL RCLOSE(JTAPE1,3)
      CALL TSTOP(6)
      STOP
      END
      SUBROUTINE RDBAS(NMEM,LMNP1,NCON,NF,NSHELL,NFIRST,ZET,ETA
     *,                MPOINT,MCONST,NCALCS)
      IMPLICIT REAL*8 (A-H,O-Z)
      INTEGER TSHELL,TPRIM
      DIMENSION NMEM(TSHELL),LMNP1(TSHELL),NCON(TSHELL),NF(NS)
     *,         NSHELL(NS,TSHELL),NFIRST(NS,TSHELL)
     *,         ZET(TSHELL,TPRIM),ETA(TSHELL,TPRIM)
      DIMENSION I30(200),A30(100),IXX(300),IZET(600),ICHG(200),IETA(600)
     *,         KPRIM(200),KNUC(200),KTYPE(200),KNG(200),KLOC(200)
     *,         KMIN(200),KMAX(200),CONTR(300),GEOM(3,50),EXP(300)
     *,         ZAN(100),COEFF(100),ISAVE(100)
      COMMON/CALIF/LPARA(1024),APARA(1024)
      COMMON/CALQN/ISTYPE,ICTYPE,NDERIV,NTYPES,NBSET
      COMMON/COORD/X(50),Y(50),Z(50),CHG(50)
      COMMON/EINFO/IPLACE(49),ISAME(49)
      COMMON/FILES/IOUT,INPUT,IDBG
      COMMON/IPAR1/NS,N3N,I2N3N,I3N3N
      COMMON/IPAR2/NBFAO,NUMIJ,NUMNUM
      COMMON/IPAR3/TSHELL,TPRIM
      COMMON/IPAR4/IMEM,IMEM2,IMEM4
      COMMON/IPAR5/IANG,IANGSQ,LARGL,LARGL2,I2LARL,I4LARL
      COMMON/IPAR6/IMTOT
      COMMON/KEEPS/IDRVT,IDRVF
      COMMON/SIGNS/IOFF(256),IPRNT
      COMMON/STSTP/NTU(200),NTL(200)
      COMMON/TAPES/ITAP30,ITAP38,ITAP42,ITAP45,ITAP46
      EQUIVALENCE (IXX,GEOM),(I30,A30),(IZET,EXP),(ICHG,ZAN)
     *,           (IETA,CONTR)
      DATA PI32 / 5.56832799683170D00/
    1 FORMAT(/,2X,' RUNNING A FIRST DERIVATIVE CALCULATION ',/)
    2 FORMAT(/,2X,' RUNNING A SECOND DERIVATIVE CALCULATION ',/)
    3 FORMAT(/,2X,' RUNNING A THIRD DERIVATIVE CALCULATION ',/)
    4 FORMAT(/,3X,20A4)
    5 FORMAT(20A4)
    6 FORMAT(I5,F20.10)
    7 FORMAT(4F20.10)
    8 FORMAT(//,2X,' NS     = ',I8,/,
     *          2X,' TSHELL = ',I8,/,
     *          2X,' NBFAO  = ',I8,/,
     *          2X,' NUMIJ  = ',I8,/,
     *          2X,' IOCC   = ',I8,/,
     *          2X,' KOCC   = ',I8,/,
     *          2X,' JOCC   = ',I8,/,
     *          2X,' ISTYPE = ',I8,/,
     *          2X,' ICTYPE = ',I8,/,
     *          2X,' NDERIV = ',I8,/,
     *          2X,' NTYPES = ',I8)
    9 FORMAT(   2X,' IMEM   = ',I8,/,
     *          2X,' IMEM2  = ',I8,/,
     *          2X,' IMEM4  = ',I8,/,
     *          2X,' LARGL  = ',I8,/,
     *          2X,' NUMNUM = ',I8,/,
     *          2X,' IDRVT  = ',I8,/,
     *          2X,' IDRVF  = ',I8,/,
     *          2X,' N3N    = ',I8,/,
     *          2X,' I2N3N  = ',I8,/,
     *          2X,' I3N3N  = ',I8,/,
     *          2X,' IPRNT  = ',I8)
   10 FORMAT(//,2X,' ENUC =',F20.10,/,
     *          2X,' ESCF =',F20.10,/)
   11 FORMAT(/,2X,' CHARGE AND GEOMETRY OF THE SYSTEM ',/)
   12 FORMAT(2X,F4.1,2X,3F20.10)
   13 FORMAT(/,2X,' EXPONENTS AND CONTRANCTION COEFFICIENTS',/)
   14 FORMAT(/,2X,' PRINCIPLE QUANTUM NUMBER =',I2,'     SHELL = ',I5)
   15 FORMAT(2F20.10)
C
      IF(NDERIV .EQ. 1) WRITE(IOUT,1)
      IF(NDERIV .EQ. 2) WRITE(IOUT,2)
      IF(NDERIV .EQ. 3) WRITE(IOUT,3)
      NUMIJ=IOFF(NBFAO+1)
C
C   ESTABLISH THE SIZES OF THE DERIVATIVES
C
      N3N=NS*3
      I2N3N=IOFF(N3N) + N3N
      I3N3N=0
      DO 110 I=1,N3N
        I3N3N=I3N3N + IOFF(I) + I
  110 CONTINUE
C
C   READ IN LABELS
C
      CALL SREW(ITAP30)
      JUNK=101+MCONST+MPOINT+NCALCS-1
      CALL WREADW(ITAP30,LOCCAL,1,JUNK,JUNK)
      CALL WREADW(ITAP30,I30,60,LOCCAL,LOCCAL)
      WRITE(IOUT,4) (I30(I),I=1,20)
C
C   STORE INFORMATION ON TAPE11
      ITAP11=11
      REWIND ITAP11
      WRITE(ITAP11,5) (I30(I),I=1,20)
C
C   READ IN GEOMETRY
C
      LOCCAL=LOCCAL+20
      CALL WREADW(ITAP30,IXX,INTOWP(N3N),LOCCAL,LOCCAL)
C
      DO 120 I=1,NS
        X(I)=GEOM(1,I)
        Y(I)=GEOM(2,I)
        Z(I)=GEOM(3,I)
  120 CONTINUE
C
C   READ IN THE NUCLEAR REPULSION AND SCF ENERGIES
C
      CALL WREADW(ITAP30,I30,INTOWP(10),LOCCAL,LOCCAL)
      ENUC=A30(1)
      ESCF=A30(2)
C
      JUNK=101+MCONST
      CALL WREADW(ITAP30,I30,MPOINT,JUNK,JUNK)
C
C   READ IN BASIS SET
C
      CALL WREADW(ITAP30,ICHG,INTOWP(NS),I30(1),JUNK)
      CALL WREADW(ITAP30,IZET,INTOWP(TPRIM),I30(5),JUNK)
      CALL WREADW(ITAP30,IETA,INTOWP(TPRIM*3),I30(6),JUNK)
      CALL WREADW(ITAP30,KPRIM,TSHELL,I30(7),JUNK)
      CALL WREADW(ITAP30,KNUC,TSHELL,I30(8),JUNK)
      CALL WREADW(ITAP30,KTYPE,TSHELL,I30(9),JUNK)
      CALL WREADW(ITAP30,KNG,TSHELL,I30(10),JUNK)
      CALL WREADW(ITAP30,KLOC,TSHELL,I30(11),JUNK)
      CALL WREADW(ITAP30,KMIN,TSHELL,I30(12),JUNK)
      CALL WREADW(ITAP30,KMAX,TSHELL,I30(13),JUNK)
C
      IJ=0
      DO 135 I=1,3
        DO 130 J=1,TPRIM
          IJ=IJ+1
          VALU=CONTR(IJ)
          IF(VALU .NE. 0.0) THEN
            COEFF(J)=VALU
          END IF
  130   CONTINUE
  135 CONTINUE
      DO 138 I=1,NS
        CHG(I)=ZAN(I)
  138 CONTINUE
C
      WRITE(ITAP11,6) NS,ESCF
      DO 125 I=1,NS
      WRITE(ITAP11,7) CHG(I),X(I),Y(I),Z(I)
  125 CONTINUE
      REWIND ITAP11
C
      LARGL=0
      NSHELL(1,1)=1
      NFIRST(1,1)=1
      NF(1)=1
      IMEM=NBFAO - KLOC(TSHELL) + 1
      NMEM(TSHELL)=IMEM
      DO 145 I=1,TSHELL
        ISAVE(I)=0
        NTU(I)=KMAX(I)
        NTL(I)=KMIN(I)
        LMNP1(I)=KTYPE(I)
        IF(LMNP1(I) .GT. LARGL) LARGL=LMNP1(I)
        NCON(I)=KNG(I)
        NPRIMS=KPRIM(I)
        NCNG=KNG(I)
        NPRIME=NPRIMS+NCNG-1
        K=0
        DO 140 J=NPRIMS,NPRIME
          K=K+1
          ZET(I,K)=EXP(J)
          ETA(I,K)=COEFF(J)
  140   CONTINUE
        IF(I .LE. (TSHELL-1)) THEN
          IMEM=KLOC(I+1) - KLOC(I)
          NMEM(I)=IMEM
        END IF
        IF(I .GE. 2) THEN
          IATOM=KNUC(I)
          IATMM1=KNUC(I-1)
          IF(IATOM .EQ. IATMM1) THEN
            NF(IATOM)=NF(IATOM) + 1
          ELSE
            NF(IATOM)=1
          END IF
          NSHELL(IATOM,NF(IATOM))=I
          NFIRST(IATOM,NF(IATOM))=KLOC(I)
        END IF
  145 CONTINUE
C
      ISAVE(1)=NMEM(1)
      DO 155 I=2,TSHELL
        DO 150 J=1,I-1
          IF(NMEM(I) .EQ. ISAVE(J)) GO TO 150
          IF(J .EQ. (I-1)) ISAVE(J)=NMEM(I)
  150   CONTINUE
  155 CONTINUE
      IMTOT=0
      DO 158 I=1,TSHELL
        IMTOT=IMTOT + ISAVE(I)
  158 CONTINUE
C
C   FIGURE OUT SIZE OF E MATRICES
C
      IESZ=343
C
      IMEM2=0
      IMEM4=0
      NUMNUM=0
      DO 174 II=1,NS
        INFNS=NF(II)
        DO 172 JJ=1,II
          JNFNS=NF(JJ)
          DO 170 I=1,INFNS
            ISHELL=NSHELL(II,I)
            IMEM=NMEM(ISHELL)
            JNFNMX=JNFNS
            IF(II .EQ. JJ) JNFNMX=I
            DO 168 J=1,JNFNMX
              JSHELL=NSHELL(JJ,J)
              JMEM=NMEM(JSHELL)
              IJMEM=IMEM*JMEM
              IF(ISHELL .EQ. JSHELL) IJMEM=IOFF(IMEM) + IMEM
              IF(IJMEM .GT. IMEM2) IMEM2=IJMEM
              IF(II .EQ. 1) GO TO 168
              DO 166 KK=1,II
                KNFNS=NF(KK)
                LLMAX=KK
                DO 164 LL=1,LLMAX
                  LNFNS=NF(LL)
                  LNFNMX=LNFNS
                  IF(KK.EQ.LL) THEN
                    IF(II .EQ. KK .AND. JJ .EQ. KK) GO TO 164
                  END IF
                  DO 162 K=1,KNFNS
                    KSHELL=NSHELL(KK,K)
                    IF(KSHELL .GT. ISHELL) GO TO 162
                    KMEM=NMEM(KSHELL)
                    IF(KK .EQ. LL) LNFNMX=K
                    DO 160 L=1,LNFNMX
                      LSHELL=NSHELL(LL,L)
                      IF(ISHELL .EQ. KSHELL) THEN
C                       IF(LSHELL .GT. JSHELL) GO TO 160
                      END IF
                      LMEM=NMEM(LSHELL)
                      KLMEM=KMEM*LMEM
                      IF(KSHELL .EQ. LSHELL) KLMEM=IOFF(KMEM) + KMEM
                      IJKLMM=IJMEM*KLMEM
                      IF(ISHELL .EQ. KSHELL) THEN
                        IF(JSHELL .EQ. LSHELL) THEN
                          IJKLMM=(IOFF(IMEM)+IMEM)*(IOFF(JMEM)+JMEM)
                        ELSE
                          IJKLMM=(IOFF(IMEM)+IMEM)*JMEM*LMEM
                        END IF
                      END IF
                      IF(IJKLMM .GT. IMEM4) IMEM4=IJKLMM
                      NUMNUM=NUMNUM + IJKLMM
  160               CONTINUE
  162             CONTINUE
  164           CONTINUE
  166         CONTINUE
  168       CONTINUE
  170     CONTINUE
  172   CONTINUE
  174 CONTINUE
C
C   PLAY WITH CONTRACTION COEFFICIENTS
C
C   (ACTUALLY WE GET THE COEFFICIENTS*NORMALIZATION CONSTANTS FROM
C   TAPE30, BUT THEY NEED TO BE MODIFIED SO AS TO WORK WITH MY INTEGRALS
C   THEY EXTRA SQRT(PI**3/2))
C
      PIFAC=DSQRT(PI32)
      DO 185 I=1,TSHELL
        NCNG=KNG(I)
        DO 180 J=1,NCNG
          ETA(I,J)=ETA(I,J)*PIFAC
  180   CONTINUE
  185 CONTINUE
C
C   WRITE OUT THE INFORMATION GATHERED
C
      IOCC=LPARA(7)
      KOCC=LPARA(8)
      JOCC=LPARA(9)
      WRITE(IOUT,8) NS,TSHELL,NBFAO,NUMIJ,IOCC,KOCC,JOCC,
     *              ISTYPE,ICTYPE,NDERIV,NTYPES
      WRITE(IOUT,9) IMEM,IMEM2,IMEM4,LARGL,NUMNUM,IDRVT,IDRVF,
     *              N3N,I2N3N,I3N3N,IPRNT
      WRITE(IOUT,10) ENUC,ESCF
      IF(IPRNT.LE.3) GO TO 220
      WRITE(IOUT,11)
      DO 190 I=1,NS
        WRITE(IOUT,12) CHG(I),X(I),Y(I),Z(I)
  190 CONTINUE
      WRITE(IOUT,13)
      DO 210 I=1,TSHELL
        WRITE(IOUT,14) LMNP1(I),I
        NOCNG=NCON(I)
        DO 200 J=1,NOCNG
          WRITE(IOUT,15) ZET(I,J),ETA(I,J)
  200   CONTINUE
  210 CONTINUE
  220 CONTINUE
CCC   WRITE(6,*) ' NMEM'
CCC   WRITE(6,*)   NMEM
CCC   WRITE(6,*) ' LMNP1'
CCC   WRITE(6,*)   LMNP1
CCC   WRITE(6,*) ' NCON'
CCC   WRITE(6,*)   NCON
CCC   WRITE(6,*) ' NF'
CCC   WRITE(6,*)   NF
CCC   WRITE(6,*) ' NSHELL AND NFIRST'
CCC   DO 230 I=1,NS
CCC   DO 230 J=1,TSHELL
CC230 WRITE(6,*) NSHELL(I,J),NFIRST(I,J)
CCC   WRITE(6,*) ' NTU AND NTL'
CCC   DO 240 I=1,TSHELL
CC240 WRITE(6,*) NTU(I),NTL(I)
C
      CALL SREW(ITAP30)
      RETURN
      END
      SUBROUTINE REPUL(KST,REP1,REP2,REP3)
      IMPLICIT REAL*8(A-H,O-Z)
      DIMENSION KST(NS,NS,NS)
      DIMENSION REP1(N3N),REP2(I2N3N),REP3(I3N3N)
      DIMENSION IDER(3),JDER(3),IIDER(6),JJDER(6),IJDER(9)
      DIMENSION IIIDER(10),JJJDER(10),IIJDER(18),IJJDER(18)
      COMMON/CALQN/ISTYPE,ICTYPE,NDERIV,NTYPES,NBSET
      COMMON/COORD/X(50),Y(50),Z(50),CHG(50)
      COMMON/FILES/IOUT,INPUT,IDBG
      COMMON/IADRS/IPASS(35)
      COMMON/IPAR1/NS,N3N,I2N3N,I3N3N
      COMMON/IPAR2/NBFAO,NUMIJ,NUMNUM
      COMMON/KEEPS/IDRVT,IDRVF
      COMMON/SIGNS/IOFF(256),IPRNT
      COMMON/WORKS/JTAPE1,JTAPE2
      DATA A00 / 0.0D+00 /
    1 FORMAT(/,2X,' NUCLEAR REPULSION = ',F20.10)
    2 FORMAT(/,2X,' NUCLEAR REPULSION FIRST DERIVATIVES',/)
    3 FORMAT(3F20.10)
    4 FORMAT(/,2X,' NUCLEAR REPULSION SECOND DERIVATIVES',/)
    5 FORMAT(/,2X,' NUCLEAR REPULSION THIRD DERIVATIVES',/)
C
      CALL ZERO(REP1,N3N)
      CALL ZERO(REP2,I2N3N)
      CALL ZERO(REP3,I3N3N)
      CALL ARRAY(KST)
C
      REP=A00
      DO 200 I=2,NS
        CALL IARRY(KST,I,IDER,IIDER,IIIDER)
        DO 100 J=1,I-1
          CALL IARRY(KST,J,JDER,JJDER,JJJDER)
          CALL IJARRY(KST,I,J,IDER,JDER,IJDER,IIJDER,IJJDER)
          XAB=X(I)-X(J)
          YAB=Y(I)-Y(J)
          ZAB=Z(I)-Z(J)
          RAB=XAB*XAB + YAB*YAB + ZAB*ZAB
          CAB=CHG(I)*CHG(J)
          SQRTR=DSQRT(RAB)
          REP0=CAB/SQRTR
          REP=REP + REP0
          REP0R=REP0/RAB
          DERX=-REP0*XAB/RAB
          DERY=-REP0*YAB/RAB
          DERZ=-REP0*ZAB/RAB
          DERXX=3.0D0*DERX*XAB/RAB
          DERYY=3.0D0*DERY*YAB/RAB
          DERZZ=3.0D0*DERZ*ZAB/RAB
          DERXY=3.0D0*DERX*YAB/RAB
          DERYZ=3.0D0*DERY*ZAB/RAB
          DERXZ=3.0D0*DERX*ZAB/RAB
          DERXR=DERX/RAB
          DERYR=DERY/RAB
          DERZR=DERZ/RAB
          DERXXX=5.0D0*DERXX*XAB/RAB
          DERYYY=5.0D0*DERYY*YAB/RAB
          DERZZZ=5.0D0*DERZZ*ZAB/RAB
          DERXXY=5.0D0*DERXX*YAB/RAB
          DERXXZ=5.0D0*DERXX*ZAB/RAB
          DERYYX=5.0D0*DERYY*XAB/RAB
          DERYYZ=5.0D0*DERYY*ZAB/RAB
          DERZZX=5.0D0*DERZZ*XAB/RAB
          DERZZY=5.0D0*DERZZ*YAB/RAB
          DERXYZ=5.0D0*DERXY*ZAB/RAB
C
C   FIRST DERIVATIVES
C
          REP1(IDER(1))=REP1(IDER(1)) + DERX
          REP1(IDER(2))=REP1(IDER(2)) + DERY
          REP1(IDER(3))=REP1(IDER(3)) + DERZ
C
          REP1(JDER(1))=REP1(JDER(1)) - DERX
          REP1(JDER(2))=REP1(JDER(2)) - DERY
          REP1(JDER(3))=REP1(JDER(3)) - DERZ
C
C   SECOND DERIVATIVES
C
          REP2(IIDER(1))=REP2(IIDER(1)) - REP0R - DERXX
          REP2(IIDER(2))=REP2(IIDER(2)) - DERXY
          REP2(IIDER(3))=REP2(IIDER(3)) - REP0R - DERYY
          REP2(IIDER(4))=REP2(IIDER(4)) - DERXZ
          REP2(IIDER(5))=REP2(IIDER(5)) - DERYZ
          REP2(IIDER(6))=REP2(IIDER(6)) - REP0R- DERZZ
C
          REP2(JJDER(1))=REP2(JJDER(1)) - REP0R- DERXX
          REP2(JJDER(2))=REP2(JJDER(2)) - DERXY
          REP2(JJDER(3))=REP2(JJDER(3)) - REP0R- DERYY
          REP2(JJDER(4))=REP2(JJDER(4)) - DERXZ
          REP2(JJDER(5))=REP2(JJDER(5)) - DERYZ
          REP2(JJDER(6))=REP2(JJDER(6)) - REP0R- DERZZ
C
          REP2(IJDER(1))=REP2(IJDER(1)) + REP0R+ DERXX
          REP2(IJDER(2))=REP2(IJDER(2)) + DERXY
          REP2(IJDER(3))=REP2(IJDER(3)) + DERXZ
          REP2(IJDER(4))=REP2(IJDER(4)) + DERXY
          REP2(IJDER(5))=REP2(IJDER(5)) + REP0R+ DERYY
          REP2(IJDER(6))=REP2(IJDER(6)) + DERYZ
          REP2(IJDER(7))=REP2(IJDER(7)) + DERXZ
          REP2(IJDER(8))=REP2(IJDER(8)) + DERYZ
          REP2(IJDER(9))=REP2(IJDER(9)) + REP0R+ DERZZ
C
C   THIRD DERIVATIVES
C
          REP3(IIIDER(1))=REP3(IIIDER(1)) - 9.0D0*DERXR + DERXXX
          REP3(IIIDER(2))=REP3(IIIDER(2)) - 3.0D0*DERYR + DERXXY
          REP3(IIIDER(3))=REP3(IIIDER(3)) - 3.0D0*DERXR + DERYYX
          REP3(IIIDER(4))=REP3(IIIDER(4)) - 9.0D0*DERYR + DERYYY
          REP3(IIIDER(5))=REP3(IIIDER(5)) - 3.0D0*DERZR + DERXXZ
          REP3(IIIDER(6))=REP3(IIIDER(6)) + DERXYZ
          REP3(IIIDER(7))=REP3(IIIDER(7)) - 3.0D0*DERZR + DERYYZ
          REP3(IIIDER(8))=REP3(IIIDER(8)) - 3.0D0*DERXR + DERZZX
          REP3(IIIDER(9))=REP3(IIIDER(9)) - 3.0D0*DERYR + DERZZY
          REP3(IIIDER(10))=REP3(IIIDER(10)) - 9.0D0*DERZR + DERZZZ
C
          REP3(JJJDER(1))=REP3(JJJDER(1)) + 9.0D0*DERXR - DERXXX
          REP3(JJJDER(2))=REP3(JJJDER(2)) + 3.0D0*DERYR - DERXXY
          REP3(JJJDER(3))=REP3(JJJDER(3)) + 3.0D0*DERXR - DERYYX
          REP3(JJJDER(4))=REP3(JJJDER(4)) + 9.0D0*DERYR - DERYYY
          REP3(JJJDER(5))=REP3(JJJDER(5)) + 3.0D0*DERZR - DERXXZ
          REP3(JJJDER(6))=REP3(JJJDER(6)) - DERXYZ
          REP3(JJJDER(7))=REP3(JJJDER(7)) + 3.0D0*DERZR - DERYYZ
          REP3(JJJDER(8))=REP3(JJJDER(8)) + 3.0D0*DERXR - DERZZX
          REP3(JJJDER(9))=REP3(JJJDER(9)) + 3.0D0*DERYR - DERZZY
          REP3(JJJDER(10))=REP3(JJJDER(10)) + 9.0D0*DERZR - DERZZZ
C
          REP3(IIJDER(1))=REP3(IIJDER(1)) + 9.0D0*DERXR - DERXXX
          REP3(IIJDER(2))=REP3(IIJDER(2)) + 3.0D0*DERYR - DERXXY
          REP3(IIJDER(3))=REP3(IIJDER(3)) + 3.0D0*DERZR - DERXXZ
          REP3(IIJDER(4))=REP3(IIJDER(4)) + 3.0D0*DERYR - DERXXY
          REP3(IIJDER(5))=REP3(IIJDER(5)) + 3.0D0*DERXR - DERYYX
          REP3(IIJDER(6))=REP3(IIJDER(6)) - DERXYZ
          REP3(IIJDER(7))=REP3(IIJDER(7)) + 3.0D0*DERZR - DERXXZ
          REP3(IIJDER(8))=REP3(IIJDER(8)) - DERXYZ
          REP3(IIJDER(9))=REP3(IIJDER(9)) + 3.0D0*DERXR - DERZZX
          REP3(IIJDER(10))=REP3(IIJDER(10)) + 3.0D0*DERXR - DERYYX
          REP3(IIJDER(11))=REP3(IIJDER(11)) + 9.0D0*DERYR - DERYYY
          REP3(IIJDER(12))=REP3(IIJDER(12)) + 3.0D0*DERZR - DERYYZ
          REP3(IIJDER(13))=REP3(IIJDER(13)) - DERXYZ
          REP3(IIJDER(14))=REP3(IIJDER(14)) + 3.0D0*DERZR - DERYYZ
          REP3(IIJDER(15))=REP3(IIJDER(15)) + 3.0D0*DERYR - DERZZY
          REP3(IIJDER(16))=REP3(IIJDER(16)) + 3.0D0*DERXR - DERZZX
          REP3(IIJDER(17))=REP3(IIJDER(17)) + 3.0D0*DERYR - DERZZY
          REP3(IIJDER(18))=REP3(IIJDER(18)) + 9.0D0*DERZR - DERZZZ
C
          REP3(IJJDER(1))=REP3(IJJDER(1)) - 9.0D0*DERXR + DERXXX
          REP3(IJJDER(2))=REP3(IJJDER(2)) - 3.0D0*DERYR + DERXXY
          REP3(IJJDER(3))=REP3(IJJDER(3)) - 3.0D0*DERZR + DERXXZ
          REP3(IJJDER(4))=REP3(IJJDER(4)) - 3.0D0*DERYR + DERXXY
          REP3(IJJDER(5))=REP3(IJJDER(5)) - 3.0D0*DERXR + DERYYX
          REP3(IJJDER(6))=REP3(IJJDER(6)) + DERXYZ
          REP3(IJJDER(7))=REP3(IJJDER(7)) - 3.0D0*DERZR + DERXXZ
          REP3(IJJDER(8))=REP3(IJJDER(8)) + DERXYZ
          REP3(IJJDER(9))=REP3(IJJDER(9)) - 3.0D0*DERXR + DERZZX
          REP3(IJJDER(10))=REP3(IJJDER(10)) - 3.0D0*DERXR + DERYYX
          REP3(IJJDER(11))=REP3(IJJDER(11)) - 9.0D0*DERYR + DERYYY
          REP3(IJJDER(12))=REP3(IJJDER(12)) - 3.0D0*DERZR + DERYYZ
          REP3(IJJDER(13))=REP3(IJJDER(13)) + DERXYZ
          REP3(IJJDER(14))=REP3(IJJDER(14)) - 3.0D0*DERZR + DERYYZ
          REP3(IJJDER(15))=REP3(IJJDER(15)) - 3.0D0*DERYR + DERZZY
          REP3(IJJDER(16))=REP3(IJJDER(16)) - 3.0D0*DERXR + DERZZX
          REP3(IJJDER(17))=REP3(IJJDER(17)) - 3.0D0*DERYR + DERZZY
          REP3(IJJDER(18))=REP3(IJJDER(18)) - 9.0D0*DERZR + DERZZZ
 100    CONTINUE
 200  CONTINUE
C
      IF(IPRNT .LE. 2) GO TO 400
      WRITE(IOUT,1)REP
      WRITE(IOUT,2)
      DO 300 I=1,NS
        II=(I-1)*3 + 1
        WRITE(IOUT,3)REP1(II),REP1(II+1),REP1(II+2)
 300  CONTINUE
      WRITE(IOUT,4)
      CALL PRINT(REP2,I2N3N,N3N,IOUT)
      WRITE(IOUT,5)
      CALL THROUT(REP3,KST,I3N3N)
  400 CONTINUE
C
C########################
C###JTAPE1 INFORMATION###
C########################
C
C   SIZES OF ARRAYS TO BE WRITEN OUT
C
      INA=INTOWP(N3N)
      INAB=INTOWP(I2N3N)
      INABC=INTOWP(I3N3N)
      ISA=INTOWP(NUMIJ*N3N)
      ISAB=INTOWP(NUMIJ*I2N3N)
      ISABC=INTOWP(NUMIJ*I3N3N)
      ISZ=(N3N+I2N3N)*NUMIJ*NTYPES
      ITA=INTOWP(ISZ)
      IF(IDRVF.EQ.3) THEN
        ISZ=(N3N+I2N3N+I3N3N)*NUMIJ*NTYPES
        ITA=INTOWP(ISZ)
      END IF
C
C   SOME INTERESTING NUMBERS AND LENGTHS
C
      IPASS(1)=NS
      IPASS(2)=NUMIJ
      IPASS(3)=NBFAO
      IPASS(4)=I2N3N
      IPASS(5)=I3N3N
      IPASS(6)=INA
      IPASS(7)=INAB
      IPASS(8)=INABC
      IPASS(9)=ISA
      IPASS(10)=ISAB
      IPASS(11)=ISABC
C
C   POSITONS OF ARRAYS ON THE TAPE
C
C   NUCLEAR REPULSION DERIVATIVES
      IPASS(12)=2
      IPASS(13)=IPASS(12) + NREC(INA)
      IPASS(14)=IPASS(13) + NREC(INAB)
C   ONE ELECTRON DERIVATIVES
      IPASS(15)=IPASS(14) + NREC(INABC)
      IPASS(16)=IPASS(15) + NREC(INA)
      IPASS(17)=IPASS(16) + NREC(INAB)
C   SA , SAB , AND SABC MATRICES
      IPASS(18)=IPASS(17) + NREC(INABC)
      IPASS(19)=IPASS(18) + NREC(ISA)
      IPASS(20)=IPASS(19) + NREC(ISAB)
C   HA , HAB , AND HAB MATRICES
      IF(IDRVF.EQ.3) THEN
        IPASS(21)=IPASS(20) + NREC(ISABC)
      ELSE
        IPASS(21)=IPASS(20)
      END IF
      IPASS(22)=IPASS(21) + NREC(ISA)
      IPASS(23)=IPASS(22) + NREC(ISAB)
C   OVERLAP DERIVATIVE CONTRIBUTIONS
      IF(IDRVF.EQ.3) THEN
        IPASS(24)=IPASS(23) + NREC(ISABC)
      ELSE
        IPASS(24)=IPASS(23)
      END IF
      IPASS(25)=IPASS(24) + NREC(INA)
      IPASS(26)=IPASS(25) + NREC(INAB)
C   TWO ELECTRON DERIVATIVES
      IPASS(27)=IPASS(26) + NREC(INABC)
      IPASS(28)=IPASS(27) + NREC(INA)
      IPASS(29)=IPASS(28) + NREC(INAB)
C   TA , TAB , AND TABC MATRICES
      IPASS(30)=IPASS(29) + NREC(INABC)
      IPASS(31)=IPASS(30) + NREC(ITA)
      IPASS(32)=IPASS(31) + NREC(ITA)
C
CCC   WRITE(6,*) ' IPASS IN REPUL'
CCC   WRITE(6,*)   IPASS
C
C   WRITE THE ARRAYS OUT!
C
      CALL SREW(JTAPE1)
      CALL RWRIT(JTAPE1,IPASS,35,1)
      CALL RWRIT(JTAPE1,REP1,INA,IPASS(12))
      CALL RWRIT(JTAPE1,REP2,INAB,IPASS(13))
      CALL RWRIT(JTAPE1,REP3,INABC,IPASS(14))
      CALL SREW(JTAPE1)
C
C###################
C###END OF JTAPE1###
C###################
C
      RETURN
      END
      SUBROUTINE ECAL(PAX,PAY,PAZ,PBX,PBY,PBZ,P,DUMMY,IQNMX,IOPT)
      IMPLICIT REAL*8 (A-H,O-Z)
      LOGICAL EQUAL,SAME
      INTEGER T,T1,TP1
      DIMENSION IJ(28)
      COMMON/EXYZS/EX(686),EY(686),EZ(686)
      COMMON/SIGNS/IOFF(256),IPRNT
      DATA A00 / 0.0D+00 /
      DATA IESZ / 343 /
      DATA IJ / 1,2,6,9,15,23,28,36,46,58,65,75,87,101,117,126,138,
     *152,168,186,206,217,231,247,265,285,307,331/
C
C NOTE:  THE EX ARRAY HAS THE 6 DIFFERENT FACTORS
C               1) KAB    THE EXP(AVG GAUSSIAN)
C        2) AND 3) THE CONTRACTION COEFFS * NORMALIZATION CONSTANTS
C               4) FACTOR   FACTOR=1 IF SAME FUNCS ON SAME CENTER
C                                    AND SAME MEMBERS OF THE CONTRACTION
C                                    SET
C                           FACTOR=2 IF SAME FUNCS AND CENTERS WITH
C                                    DIFFERENT MEMBERS OF THE CONTR SET
C               5) DIVIDED BY THE AVERAGE EXPONENT
C   AND ONLY FOR THE TWO ELECTRON INTS   6) SQRT(2*(PI)**-.5)
C
C
C  IOPT= 0   .........  ONE ELECTRON E ARRAYS
C      = 1   .........  TWO ELECTRON E ARRAYS
C
      PFACT=1.0D0/(2.0D0*P)
      IADD=0
      IF(IOPT .EQ. 1) IADD=IESZ
C
      I1=IADD+1
      EX(I1)=DUMMY
      EY(I1)=1.0D0
      EZ(I1)=1.0D0
C
C   MAX ORBITAL IS ONE WITH PRINCIPLE QUANTUM NO. 5
C   ONLY CALCULATE E COEFF.S AS LARGE AS IQNMX
C
      DO 700 III=2,IQNMX
C
        INEW=III-1
        DO 600 JJJ=1,III
C
          IPOSN=IOFF(III) + JJJ
          IPOS1=IOFF(MAX0(INEW,JJJ)) + MIN0(INEW,JJJ)
          IPOS2=IJ(IPOS1)
          EQUAL=III.EQ.JJJ
          SAME=INEW.EQ.JJJ
          IJTOT=(III-2) + (JJJ-1)
          MAXT=III+JJJ-1
C
          DO 500 T=1,MAXT
C
            T1=T-1
            R1X1=A00
            R1X2=A00
            R1Y1=A00
            R1Y2=A00
            R1Z1=A00
            R1Z2=A00
            R2X1=A00
            R2X2=A00
            R2Y1=A00
            R2Y2=A00
            R2Z1=A00
            R2Z2=A00
            R3X1=A00
            R3X2=A00
            R3Y1=A00
            R3Y2=A00
            R3Z1=A00
            R3Z2=A00
            IF(T1 .GE. 1) THEN
              ISPOT=IPOS2 + (T1-1)*2
              ISPOT1=ISPOT + 1
              IF(SAME) THEN
                ISPOT=IPOS2 + (T1-1)
                ISPOT1=ISPOT
              END IF
              IF(EQUAL) THEN
                ISPOT1=IPOS2 + T1*2 -1
                GO TO 100
              END IF
              I1=IADD+ISPOT
              R1X1=EX(I1)*PFACT
              R1Y1=EY(I1)*PFACT
              R1Z1=EZ(I1)*PFACT
  100         CONTINUE
              I1=IADD+ISPOT1
              R1X2=EX(I1)*PFACT
              R1Y2=EY(I1)*PFACT
              R1Z2=EZ(I1)*PFACT
            END IF
            ITEST=T-1
            IF(ITEST .LE. IJTOT) THEN
              XDUM=PBX
              YDUM=PBY
              ZDUM=PBZ
              ISPOT=IPOS2 + (T-1)*2
              ISPOT1=ISPOT + 1
              IF(SAME) THEN
                ISPOT=IPOS2 + (T-1)
                ISPOT1=ISPOT
              END IF
              IF(EQUAL) THEN
                ISPOT1=IPOS2 + T*2 -1
                XDUM=PAX
                YDUM=PAY
                ZDUM=PAZ
                GO TO 200
              END IF
              I1=IADD+ISPOT
              R2X1=PAX*EX(I1)
              R2Y1=PAY*EY(I1)
              R2Z1=PAZ*EZ(I1)
  200         CONTINUE
              I1=IADD+ISPOT1
              R2X2=XDUM*EX(I1)
              R2Y2=YDUM*EY(I1)
              R2Z2=ZDUM*EZ(I1)
            END IF
            TP1=T + 1
            ITEST=TP1 - 1
            IF(ITEST .LE. IJTOT) THEN
              ISPOT=IPOS2 + (TP1-1)*2
              ISPOT1=ISPOT + 1
              IF(SAME) THEN
                ISPOT=IPOS2 + (TP1-1)
                ISPOT1=ISPOT
              END IF
              IF(EQUAL) THEN
                ISPOT1=IPOS2 + TP1*2 -1
                GO TO 300
              END IF
              I1=IADD+ISPOT
              R3X1=T*EX(I1)
              R3Y1=T*EY(I1)
              R3Z1=T*EZ(I1)
  300         CONTINUE
              I1=IADD+ISPOT1
              R3X2=T*EX(I1)
              R3Y2=T*EY(I1)
              R3Z2=T*EZ(I1)
            END IF
            ISPOT=IJ(IPOSN) + (T-1)*2
            ISPOT1=ISPOT + 1
            IF(EQUAL) THEN
              ISPOT1=IJ(IPOSN) + (T-1)
              GO TO 400
            END IF
            I1=IADD+ISPOT
            EX(I1)=R1X1 + R2X1 + R3X1
            EY(I1)=R1Y1 + R2Y1 + R3Y1
            EZ(I1)=R1Z1 + R2Z1 + R3Z1
  400       CONTINUE
            I1=IADD+ISPOT1
            EX(I1)=R1X2 + R2X2 + R3X2
            EY(I1)=R1Y2 + R2Y2 + R3Y2
            EZ(I1)=R1Z2 + R2Z2 + R3Z2
  500     CONTINUE
  600   CONTINUE
  700 CONTINUE
C
      RETURN
      END
      SUBROUTINE RDVECS(DA,DB,DC,D1T,OCC,EIG,EAO,NBASIS)
      IMPLICIT REAL*8(A-H,O-Z)
      DIMENSION OCC(NBASIS),EIG(NBASIS),EAO(NBASIS,NBASIS)
      DIMENSION DA(NUMIJ,NTYPES),DB(NUMIJ,NTYPES),DC(NUMIJ,NTYPES)
      DIMENSION D1T(NUMIJ)
      DIMENSION ALPC(465),BETC(465),FOCC(30),NSORB(30)
      DIMENSION NSTR(30),NEND(30),MOTYP(256)
      COMMON/CALIF/LPARA(1024),APARA(1024)
      COMMON/CALQN/ISTYPE,ICTYPE,NDERIV,NTYPES,NBSET
      COMMON/FILES/IOUT,INPUT,IDBG
      COMMON/IPAR2/NBFAO,NUMIJ,NUMNUM
      COMMON/MINFO/ALP(30,30),BET(30,30)
      COMMON/SIGNS/IOFF(256),IPRNT
      DATA A00 / 0.0D+00 /
    1 FORMAT(/,2X,' ALPC MATRIX ',/)
    2 FORMAT(/,2X,' BETC MATRIX ',/)
    3 FORMAT(/,2X,' ALP MATRIX ',/)
    4 FORMAT(/,2X,' BET MATRIX ',/)
    5 FORMAT(//,2X,' NO.',8X,' FOCC',6X,' NSORB',7X,' NSTR',7X,' NEND'/)
    6 FORMAT(2X,I4,3X,F10.5,7X,I5,7X,I5,7X,I5)
    7 FORMAT(/,2X,' AO-MO EIGENVECTOR, VALUES, AND OCCUPATION ',/)
    8 FORMAT(/,2X,' TOTAL DENSITY MATRIX'/)
    9 FORMAT(/,2X,' DA DENSITY MATRIX ITYPE = ',I5,/)
   10 FORMAT(/,2X,' DB DENSITY MATRIX ITYPE = ',I5,/)
   11 FORMAT(/,2X,' DC DENSITY MATRIX ITYPE = ',I5,/)
C
C   GET MORE INFORMATION FROM THE MASTER FILE
      CALL MREAD(APARA,3)
C
      NTYPEP=NTYPES+1
      DO 101 I=1,NTYPEP
      NSORB(I)=LPARA(I+40)
      FOCC(I)=APARA(I+10)
  101 CONTINUE
C
      NTYTRI=IOFF(NTYPEP+1)
      DO 102 I=1,NTYTRI
      ALPC(I)=APARA(I+40)
      BETC(I)=APARA(I+505)
  102 CONTINUE
C
      IF(IPRNT.GT.2) THEN
      WRITE(IOUT,1)
      CALL PRINT(ALPC,465,NTYPES,IOUT)
      WRITE(IOUT,2)
      CALL PRINT(BETC,465,NTYPES,IOUT)
      END IF
C
C   FORM ALP AND BET MATRICES
      DO 103 I=1,NTYPES+1
      DO 103 J=1,NTYPES+1
      ALP(I,J)=A00
      BET(I,J)=A00
  103 CONTINUE
      IJ=0
      DO 104 I=1,NTYPES
      DO 104 J=1,I
      IJ=IJ+1
C*    ALP(I,J)= (1.0D0-ALPC(IJ))*FOCC(I)*FOCC(J)*0.5D0
C*    BET(I,J)=-(1.0D0-BETC(IJ))*FOCC(I)*FOCC(J)*0.25D0
      ALP(I,J)=ALPC(IJ)
      BET(I,J)=BETC(IJ)
      IF(I.EQ.J) GO TO 104
      ALP(J,I)=ALP(I,J)
      BET(J,I)=BET(I,J)
  104 CONTINUE
C
      WRITE(IOUT,3)
      CALL MATOUT(ALP,30,30,NTYPES+1,NTYPES+1,IOUT)
      WRITE(IOUT,4)
      CALL MATOUT(BET,30,30,NTYPES+1,NTYPES+1,IOUT)
C
C   FORM NSTR, NEND AND MOTYP ARRAYS
      NSTR(1)=1
      NEND(1)=NSORB(1)
      DO 105 ITYP=2,NTYPES+1
      NSTR(ITYP)=NEND(ITYP-1)+1
      NEND(ITYP)=NSTR(ITYP)+NSORB(ITYP)-1
  105 CONTINUE
      DO 107 ITYP=1,NTYPES+1
      DO 106 I=NSTR(ITYP),NEND(ITYP)
      MOTYP(I)=ITYP
  106 CONTINUE
  107 CONTINUE
      WRITE(IOUT,5)
      DO 108 I=1,NTYPES+1
  108 WRITE(IOUT,6) I,FOCC(I),NSORB(I),NSTR(I),NEND(I)
C
C    READ IN THE AO EIGENVECTORS, OCCUPATIONS, AND EIGENVALUES
C
      CALL MREAD(EIG,18)
      CALL MREAD(OCC,19)
      CALL MREAD(EAO,22)
      IF(IPRNT .GT. 2) THEN
        WRITE(IOUT,7)
        CALL EIGOUT(EAO,EIG,OCC,NBASIS,NBASIS,NBFAO,NBFAO,IOUT)
      END IF
C
C    FORM THE TOTAL DENSITY MATRIX
      CALL ZERO(D1T,NUMIJ)
      IJ=0
      DO 112 I=1,NBFAO
      DO 112 J=1,I
      IJ=IJ+1
      VALU=A00
      DO 111 K=1,NBASIS
      IF(OCC(K).LE.A00) GO TO 111
      VALU=VALU+EAO(I,K)*EAO(J,K)*OCC(K)
  111 CONTINUE
      D1T(IJ)=VALU
  112 CONTINUE
      IF(IPRNT.GT.2) THEN
      WRITE(IOUT,8)
      CALL PRINT(D1T,NUMIJ,NBFAO,IOUT)
      END IF
C
C   FORM SHELL DENSITY MATRICES
      IJ=0
      DO 120 I=1,NBFAO
      DO 120 J=1,I
      IJ=IJ+1
      DO 115 ITYP=1,NTYPES
      SUMA=A00
      SUMB=A00
      DO 114 KTYP=1,NTYPES
      DO 113 K=NSTR(KTYP),NEND(KTYP)
      FAC=EAO(I,K)*EAO(J,K)
      SUMA=SUMA+ALP(ITYP,KTYP)*FAC
      SUMB=SUMB+BET(ITYP,KTYP)*FAC
  113 CONTINUE
  114 CONTINUE
      DA(IJ,ITYP)=SUMA
      DB(IJ,ITYP)=SUMB
  115 CONTINUE
  120 CONTINUE
C
      DO 125 ITYP=1,NTYPES
      IJ=0
      IST=NSTR(ITYP)
      IED=NEND(ITYP)
      DO 122 I=1,NBFAO
      DO 122 J=1,I
      IJ=IJ+1
      SUMC=A00
      DO 121 K=IST,IED
      FAC=EAO(I,K)*EAO(J,K)
      SUMC=SUMC+FAC
  121 CONTINUE
      DC(IJ,ITYP)=SUMC
  122 CONTINUE
  125 CONTINUE
C
      IF(IPRNT .GT. 2) THEN
      DO 130 ITYP=1,NTYPES
      WRITE(IOUT,9)ITYP
      CALL PRINT(DA(1,ITYP),NUMIJ,NBFAO,IOUT)
      WRITE(IOUT,10)ITYP
      CALL PRINT(DB(1,ITYP),NUMIJ,NBFAO,IOUT)
      WRITE(IOUT,11)ITYP
      CALL PRINT(DC(1,ITYP),NUMIJ,NBFAO,IOUT)
  130 CONTINUE
      END IF
C
      RETURN
      END
      SUBROUTINE BRIDGE(AI,IA,MAXCOR)
      IMPLICIT INTEGER (B-Z)
      IMPLICIT REAL*8 (A)
      DIMENSION AI(1),IA(1)
      COMMON/CALQN/ISTYPE,ICTYPE,NDERIV,NTYPES,NBSET
      COMMON/DATAS/NS,N3N,I2N3N,I3N3N,NBFAO,NUMIJ,NUMIJ2
      COMMON/FILES/IOUT,INPUT,IDBG
      COMMON/IADRS/IPASS(35)
      COMMON/KEEPS/IDRVT,IDRVF
      COMMON/SIZES/INA,INAB,INABC,ISA,ISAB,ISABC
      COMMON/WORKS/JTAPE1,JTAPE2
    1 FORMAT(/,' SORRY, BUT THIS CAN NOT FIT INTO THE PRESENT MACHINE.'
     *,        ' INCREASE MAXCOR AND THE DIMENSION OF BLANK COMMON.'/
     *,        ' ITOTAL = ',I10,5X,' MAXCOR = ',I10/)
    2 FORMAT(/,2X,' ITOTAL = ',I10,5X,' MAXCOR = ',I10/)
C
C   READ IN SIZES AND POINTERS ON THE JTAPE1 FILE
C
      CALL SREW(JTAPE1)
      CALL RREAD(JTAPE1,IPASS,35,1)
      NS=IPASS(1)
      NUMIJ=IPASS(2)
      NUMIJ2=NUMIJ*2
      N3N=NS*3
      NBFAO=IPASS(3)
      I2N3N=IPASS(4)
      I3N3N=IPASS(5)
      INA=IPASS(6)
      INAB=IPASS(7)
      INABC=IPASS(8)
      ISA=IPASS(9)
      ISAB=IPASS(10)
      ISABC=IPASS(11)
C
C   NOW DIVIDE THE ARRAY AI
C
      REP1=1
      REP2=REP1 + N3N
      REP3=REP2 + I2N3N
      EONE1=REP3 + I3N3N
      EONE2=EONE1 + N3N
      EONE3=EONE2 + I2N3N
      S1LAG=EONE3 + I3N3N
      S2LAG=S1LAG + N3N
      S3LAG=S2LAG + I2N3N
      ETWO1=S3LAG + I3N3N
      ETWO2=ETWO1 + N3N
      ETWO3=ETWO2 + I2N3N
      EA=ETWO3 + I3N3N
      EAB=EA + N3N
      EABC=EAB + I2N3N
      E2A=EABC + I3N3N
      B=E2A + N3N*N3N
      BB=B
      CC=BB
      IBMAT=N3N+I2N3N
      IF(IDRVF.EQ.3) THEN
        IBMAT=N3N+I2N3N+I3N3N
      END IF
      SX=CC + IBMAT*NUMIJ*NTYPES
      SY=SX
C!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
C!!!NOTE : THE DERIVATIVE J AND K MATRICES WILL BE STORED SEPARATELY!!!
C!!!     : FOR TCSCF AND GVSCF WAVEFUNCTIONS                        !!!
C!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
      IF(ISTYPE.EQ.3.OR.ISTYPE.EQ.4) THEN
        CC=BB + IBMAT*NUMIJ*NTYPES
        SX=CC + IBMAT*NUMIJ*NTYPES
        SY=SX + NUMIJ
      END IF
      KST=SY + NUMIJ
      IKST=KST+KST-1
      ITOTAL=KST + NS*NS*NS
C
C   MAKE SURE THIS ALL FITS INTO THE MACHINE
C
      IF(ITOTAL .GT. MAXCOR) THEN
        WRITE(IOUT,1) ITOTAL,MAXCOR
        STOP
      END IF
      WRITE(IOUT,2) ITOTAL,MAXCOR
C
C   SO, LET'S DO THE WORK!
C
      CALL MKFILE(AI(REP1),AI(REP2),AI(REP3)
     *,           AI(EONE1),AI(EONE2),AI(EONE3)
     *,           AI(S1LAG),AI(S2LAG),AI(S3LAG)
     *,           AI(ETWO1),AI(ETWO2),AI(ETWO3)
     *,           AI(EA),AI(EAB),AI(EABC),AI(E2A)
     *,           AI(B),AI(BB),AI(CC),IBMAT,AI(SX),AI(SY),IA(IKST))
C
      RETURN
      END
      SUBROUTINE MKFILE(REP1,REP2,REP3
     *,                 EONE1,EONE2,EONE3
     *,                 S1LAG,S2LAG,S3LAG
     *,                 ETWO1,ETWO2,ETWO3
     *,                 EA,EAB,EABC,E2A
     *,                 B,BB,CC,IBMAT,SX,SY,KST)
      IMPLICIT REAL*8 (A-H,O-Z)
      DIMENSION REP1(N3N),REP2(I2N3N),REP3(I3N3N)
     *,         EONE1(N3N),EONE2(I2N3N),EONE3(I3N3N)
     *,         S1LAG(N3N),S2LAG(I2N3N),S3LAG(I3N3N)
     *,         ETWO1(N3N),ETWO2(I2N3N),ETWO3(I3N3N)
     *,         EA(N3N),EAB(I2N3N),EABC(I3N3N),E2A(N3N,N3N)
     *,         B(NUMIJ,IBMAT*NTYPES)
     *,         BB(NTYPES,NUMIJ,IBMAT),CC(NTYPES,NUMIJ,IBMAT)
     *,         SX(NUMIJ),SY(NUMIJ),KST(NS,NS,NS)
      DIMENSION I30(20)
      COMMON/CALQN/ISTYPE,ICTYPE,NDERIV,NTYPES,NBSET
      COMMON/COORD/X(50),Y(50),Z(50),CHG(50)
      COMMON/DATAS/NS,N3N,I2N3N,I3N3N,NBFAO,NUMIJ,NUMIJ2
      COMMON/FILES/IOUT,INPUT,IDBG
      COMMON/IADRS/IPASS(35)
      COMMON/SIGNS/IOFF(256),IPRNT
      COMMON/SIZES/INA,INAB,INABC,ISA,ISAB,ISABC
      COMMON/TAPES/ITAP30,ITAP38,ITAP42,ITAP45,ITAP46
      COMMON/WORKS/JTAPE1,JTAPE2
    1 FORMAT(3F20.10)
    2 FORMAT(/,2X,' NUCLEAR REPULSION FIRST DERIVATIVES ')
    3 FORMAT(/,2X,' NUCLEAR REPULSION SECOND DERIVATIVES ')
    4 FORMAT(/,2X,' NUCLEAR REPULSION THIRD DERIVATIVES ')
    5 FORMAT(/,2X,' ONE ELECTRON FIRST DERIVATIVE MATRIX ')
    6 FORMAT(/,2X,' ONE ELECTRON SECOND DERIVATIVE MATRIX ')
    7 FORMAT(/,2X,' ONE ELECTRON THIRD DERIVATIVE MATRIX ')
    8 FORMAT(/,2X,' TWO ELECTRON FIRST DERIVATIVE MATRIX ')
    9 FORMAT(/,2X,' TWO ELECTRON SECOND DERIVATIVE MATRIX ')
   10 FORMAT(/,2X,' TWO ELECTRON THIRD DERIVATIVE MATRIX ')
   11 FORMAT(/,2X,' OVERLAP FIRST DERIVATIVE * AO LAGRAGIAN ')
   12 FORMAT(/,2X,' OVERLAP SECOND DERIVATIVE * AO LAGRAGIAN ')
   13 FORMAT(/,2X,' OVERLAP THIRD DERIVATIVE * AO LAGRAGIAN ')
   14 FORMAT(/,2X,' TOTAL EA ')
   15 FORMAT(/,2X,' TOTAL EAB ')
   16 FORMAT(/,2X,' TOTAL EABC ')
   17 FORMAT(/,2X,' SYMMETRIZED EAB'/)
   18 FORMAT(20A4)
   19 FORMAT(I5,F20.10)
   20 FORMAT(4F20.10)
C
C   START READING IN
C
C     WRITE(6,*) ' IPASS IN MKFILE'
C     WRITE(6,*)   IPASS
      CALL ARRAY(KST)
C
C:::::::::::::::::::::::::::::::::::::
C::: NUCLEAR REPULSION CONTRIBUTION:::
C:::::::::::::::::::::::::::::::::::::
C
      CALL ZERO(REP1,N3N)
      CALL ZERO(REP2,I2N3N)
      CALL ZERO(REP3,I3N3N)
      CALL SREW(JTAPE1)
      CALL RREAD(JTAPE1,REP1,INA,IPASS(12))
      CALL RREAD(JTAPE1,REP2,INAB,IPASS(13))
      CALL RREAD(JTAPE1,REP3,INABC,IPASS(14))
C
      IF(IPRNT.LT.1) GO TO 201
      WRITE(IOUT,2)
      CALL MATOUT(REP1,3,NS,3,NS,IOUT)
      WRITE(IOUT,3)
      CALL PRINT(REP2,I2N3N,N3N,IOUT)
      WRITE(IOUT,4)
      CALL THROUT(REP3,KST,I3N3N)
C
C:::::::::::::::::::::::::::::::
C:::ONE ELECTRON CONTRIBUTION:::
C:::::::::::::::::::::::::::::::
C
  201 CONTINUE
      CALL ZERO(EONE1,N3N)
      CALL ZERO(EONE2,I2N3N)
      CALL ZERO(EONE3,I3N3N)
      CALL RREAD(JTAPE1,EONE1,INA,IPASS(15))
      CALL RREAD(JTAPE1,EONE2,INAB,IPASS(16))
      CALL RREAD(JTAPE1,EONE3,INABC,IPASS(17))
C
      IF(IPRNT.LT.1) GO TO 202
      WRITE(IOUT,5)
      CALL MATOUT(EONE1,3,NS,3,NS,IOUT)
      WRITE(IOUT,6)
      CALL PRINT(EONE2,I2N3N,N3N,IOUT)
      WRITE(IOUT,7)
      CALL THROUT(EONE3,KST,I3N3N)
C
C:::::::::::::::::::::::::::::::
C:::TWO ELECTRON CONTRIBUTION:::
C:::::::::::::::::::::::::::::::
C
  202 CONTINUE
      CALL ZERO(ETWO1,N3N)
      CALL ZERO(ETWO2,I2N3N)
      CALL ZERO(ETWO3,I3N3N)
      CALL RREAD(JTAPE1,ETWO1,INA,IPASS(27))
      CALL RREAD(JTAPE1,ETWO2,INAB,IPASS(28))
      CALL RREAD(JTAPE1,ETWO3,INABC,IPASS(29))
C
      IF(IPRNT.LT.1) GO TO 203
      WRITE(IOUT,8)
      CALL MATOUT(ETWO1,3,NS,3,NS,IOUT)
      WRITE(IOUT,9)
      CALL PRINT(ETWO2,I2N3N,N3N,IOUT)
      WRITE(IOUT,10)
      CALL THROUT(ETWO3,KST,I3N3N)
C
C::::::::::::::::::::::::::
C:::OVERLAP CONTRIBUTION:::
C::::::::::::::::::::::::::
C
  203 CONTINUE
      CALL ZERO(S1LAG,N3N)
      CALL ZERO(S2LAG,I2N3N)
      CALL ZERO(S3LAG,I3N3N)
      CALL RREAD(JTAPE1,S1LAG,INA,IPASS(24))
      CALL RREAD(JTAPE1,S2LAG,INAB,IPASS(25))
      CALL RREAD(JTAPE1,S3LAG,INABC,IPASS(26))
C
      IF(IPRNT.LT.1) GO TO 204
      WRITE(IOUT,11)
      CALL MATOUT(S1LAG,3,NS,3,NS,IOUT)
      WRITE(IOUT,12)
      CALL PRINT(S2LAG,I2N3N,N3N,IOUT)
      WRITE(IOUT,13)
      CALL THROUT(S3LAG,KST,I3N3N)
C
C::::::::::::::::::::::::::::::
C:::SUM UP ALL CONTRIBUTIONS:::
C::::::::::::::::::::::::::::::
C
  204 CONTINUE
      DO 101 I=1,N3N
      EA(I)=REP1(I)+EONE1(I)+ETWO1(I)-S1LAG(I)
  101 CONTINUE
      DO 102 I=1,I2N3N
      EAB(I)=REP2(I)+EONE2(I)+ETWO2(I)-S2LAG(I)
  102 CONTINUE
      DO 103 I=1,I3N3N
      EABC(I)=REP3(I)+EONE3(I)+ETWO3(I)-S3LAG(I)
  103 CONTINUE
      DO 104 I=1,N3N
      DO 104 J=1,N3N
      IJ=IOFF(MAX0(I,J))+MIN0(I,J)
      E2A(I,J)=EAB(IJ)
  104 CONTINUE
C
C***  IF(IPRNT.LT.1) GO TO 205
      WRITE(IOUT,14)
      CALL MATOUT(EA,3,NS,3,NS,IOUT)
      WRITE(IOUT,15)
      CALL PRINT(EAB,I2N3N,N3N,IOUT)
      WRITE(IOUT,16)
      CALL THROUT(EABC,KST,I3N3N)
      WRITE(IOUT,17)
      CALL MATOUT(E2A,N3N,N3N,N3N,N3N,IOUT)
C
C::::::::::::::::::::::::::::
C:::FORM TAPE42 AND TAPE45:::
C::::::::::::::::::::::::::::
C
  205 CONTINUE
      CALL RFILE(ITAP42)
      CALL RFILE(ITAP45)
      CALL SWRIT(ITAP42,EA,INA)
      CALL SWRIT(ITAP42,E2A,N3N*N3N*2)
C
C   OVERLAP DERIVATIVE INTEGRALS
      CALL RREAD(JTAPE1,B,ISA,IPASS(18))
      DO 105 IABC=1,N3N
      CALL SWRIT(ITAP42,B(1,IABC),NUMIJ2)
  105 CONTINUE
      CALL RREAD(JTAPE1,B,ISAB,IPASS(19))
      DO 106 IABC=1,I2N3N
      CALL SWRIT(ITAP45,B(1,IABC),NUMIJ2)
  106 CONTINUE
C*    IF(IDRVF.EQ.3) THEN
C*    CALL RREAD(JTAPE1,B,ISABC,IPASS(20))
C*    DO 107 IABC=1,I3N3N
C*    CALL SWRIT(ITAP45,B(1,IABC),NUMIJ2)
C*107 CONTINUE
C*    END IF
C
C   ONE ELECTRON DERIVATIVE INTEGRALS
      CALL RREAD(JTAPE1,B,ISA,IPASS(21))
      DO 108 IABC=1,N3N
      CALL SWRIT(ITAP42,B(1,IABC),NUMIJ2)
  108 CONTINUE
      CALL RREAD(JTAPE1,B,ISAB,IPASS(22))
      DO 109 IABC=1,I2N3N
      CALL SWRIT(ITAP45,B(1,IABC),NUMIJ2)
  109 CONTINUE
C*    IF(IDRVF.EQ.3) THEN
C*    CALL RREAD(JTAPE1,B,ISABC,IPASS(23))
C*    DO 110 IABC=1,I3N3N
C*    CALL SWRIT(ITAP45,B(1,IABC),NUMIJ2)
C*110 CONTINUE
C*    END IF
C
C   TWO ELECTRON DERIVATIVE INTEGRALS
      ISIZ2=IBMAT*NUMIJ2*NTYPES
      NTREAD=NTYPES
C
C............CL  GR  TC  GV  MC.........
      GO TO (206,207,208,208,209),ISTYPE
C
C:::::::::::::::::::::::
C:::CLOSED SHELL CASE:::
C:::::::::::::::::::::::
  206 CONTINUE
      CALL RREAD(JTAPE1,B,ISIZ2,IPASS(30))
      DO 111 IABC=1,N3N
C*    WRITE(6,*) ' IABC = ',IABC
C*    CALL PRINT(B(1,IABC),NUMIJ,NBFAO,IOUT)
      CALL SWRIT(ITAP42,B(1,IABC),NUMIJ2)
  111 CONTINUE
      DO 112 IABC=1,I2N3N
      IXYZ=IABC+N3N
      CALL SWRIT(ITAP45,B(1,IXYZ),NUMIJ2)
  112 CONTINUE
C*    DO 113 IABC=1,I3N3N
C*    IXYZ=IABC+N3N+I2N3N
C*    CALL SWRIT(ITAP45,B(1,IXYZ),NUMIJ2)
C*113 CONTINUE
      GO TO 210
C
C:::::::::::::::::::::::::::::
C:::GENERAL OPEN-SHELL CASE:::
C:::::::::::::::::::::::::::::
  207 CONTINUE
      CALL RREAD(JTAPE1,BB,ISIZ2,IPASS(30))
      DO 125 ITYP=1,NTREAD
C
      DO 116 IABC=1,N3N
      DO 115 I=1,NUMIJ
  115 SX(I)=BB(ITYP,I,IABC)
C*    WRITE(6,*) ' ITYP = ',ITYP,' IABC = ',IABC
C*    CALL PRINT(SX,NUMIJ,NBFAO,IOUT)
      CALL SWRIT(ITAP42,SX,NUMIJ2)
  116 CONTINUE
      DO 118 IABC=1,I2N3N
      IXYZ=IABC+N3N
      DO 117 I=1,NUMIJ
  117 SX(I)=BB(ITYP,I,IXYZ)
      CALL SWRIT(ITAP45,SX,NUMIJ2)
  118 CONTINUE
C*    DO 120 IABC=1,I3N3N
C*    IXYZ=IABC+N3N+I2N3N
C*    DO 119 I=1,NUMIJ
C*119 SX(I)=BB(ITYP,I,IXYZ)
C*    CALL SWRIT(ITAP45,SX,NUMIJ2)
C*120 CONTINUE
C
  125 CONTINUE
      GO TO 210
C
C::::::::::::::::::::::::::
C:::TCSCF AND GVSCF CASE:::
C::::::::::::::::::::::::::
  208 CONTINUE
      CALL RREAD(JTAPE1,BB,ISIZ2,IPASS(30))
      CALL RREAD(JTAPE1,CC,ISIZ2,IPASS(31))
      DO 140 ITYP=1,NTREAD
C
C   FOR THE DERIVATIVE J MATRICES
      DO 127 IABC=1,N3N
      DO 126 I=1,NUMIJ
  126 SX(I)=BB(ITYP,I,IABC)
C*    WRITE(6,*) ' ITYP = ',ITYP,' IABC = ',IABC
C*    CALL PRINT(SX,NUMIJ,NBFAO,IOUT)
      CALL SWRIT(ITAP42,SX,NUMIJ2)
  127 CONTINUE
      DO 129 IABC=1,I2N3N
      IXYZ=IABC+N3N
      DO 128 I=1,NUMIJ
  128 SX(I)=BB(ITYP,I,IXYZ)
      CALL SWRIT(ITAP45,SX,NUMIJ2)
  129 CONTINUE
C*    DO 131 IABC=1,I3N3N
C*    IXYZ=IABC+N3N+I2N3N
C*    DO 130 I=1,NUMIJ
C*130 SX(I)=BB(ITYP,I,IXYZ)
C*    CALL SWRIT(ITAP45,SX,NUMIJ2)
C*131 CONTINUE
C
C   FOR THE DERIVATIVE K MATRICES
      DO 133 IABC=1,N3N
      DO 132 I=1,NUMIJ
  132 SY(I)=CC(ITYP,I,IABC)
C*    WRITE(6,*) ' ITYP = ',ITYP,' IABC = ',IABC
C*    CALL PRINT(SY,NUMIJ,NBFAO,IOUT)
      CALL SWRIT(ITAP42,SY,NUMIJ2)
  133 CONTINUE
      DO 135 IABC=1,I2N3N
      IXYZ=IABC+N3N
      DO 134 I=1,NUMIJ
  134 SY(I)=CC(ITYP,I,IXYZ)
      CALL SWRIT(ITAP45,SY,NUMIJ2)
  135 CONTINUE
C*    DO 137 IABC=1,I3N3N
C*    IXYZ=IABC+N3N+I2N3N
C*    DO 136 I=1,NUMIJ
C*136 SY(I)=CC(ITYP,I,IXYZ)
C*    CALL SWRIT(ITAP45,SY,NUMIJ2)
C*137 CONTINUE
C
  140 CONTINUE
      GO TO 210
C
C::::::::::::::::
C:::MCSCF CASE:::
C::::::::::::::::
  209 CONTINUE
C
C:::::::::::::::::
C:::FORM TAPE46:::
C:::::::::::::::::
C
  210 CONTINUE
      CALL RFILE(ITAP46)
      CALL SWRIT(ITAP46,EABC,INABC)
C
C:::::::::::::::::
C:::FORM TAPE11:::
C:::::::::::::::::
C
      ITAP11=11
      REWIND ITAP11
      READ(ITAP11,18) (I30(I),I=1,20)
      READ(ITAP11,19) NATOM,ESCF
      DO 145 I=1,NATOM
      READ(ITAP11,20) CHG(I),X(I),Y(I),Z(I)
  145 CONTINUE
      REWIND ITAP11
      WRITE(ITAP11,18) (I30(I),I=1,20)
      WRITE(ITAP11,19) NATOM,ESCF
      DO 146 I=1,NATOM
      WRITE(ITAP11,20) CHG(I),X(I),Y(I),Z(I)
  146 CONTINUE
      DO 147 I=1,NATOM
      II=(I-1)*3
      WRITE(ITAP11,20) CHG(I),EA(II+1),EA(II+2),EA(II+3)
  147 CONTINUE
      REWIND ITAP11
C
      CALL SREW(ITAP42)
      CALL SREW(ITAP45)
      CALL SREW(ITAP46)
      CALL SREW(JTAPE1)
      RETURN
      END
      SUBROUTINE ARRAY(KST)
      IMPLICIT INTEGER (A-Z)
      DIMENSION KST(NS,NS,NS)
      COMMON/INDEX/IX(84),IY(84),IZ(84),JX(84),JY(84),JZ(84)
      COMMON/IPAR1/NS,N3N,I2N3N,I3N3N
      COMMON/IPAR5/IANG,IANGSQ,LARGL,LARGL2,I2LARL,I4LARL
      COMMON/IPAR6/IMTOT
      COMMON/SIGNS/IOFF(256),IPRNT
C
C   SET UP THE KST ARRAY FOR THIRD DERIVATIVES
C
      KTOT=1
      IADD=10
      KST(1,1,1)=1
      DO 300 I=2,NS
        DO 200 J=1,I
          DO 100 K=1,J
            KST(I,J,K)=KTOT + IADD
            IF(I .EQ. J) THEN
              IF(I .EQ. K) THEN
                IADD=10
              ELSE
                IADD=18
              END IF
            ELSE
              IF(J .EQ. K) THEN
                IADD=18
              ELSE
                IADD=27
              END IF
            END IF
            KTOT=KST(I,J,K)
  100     CONTINUE
  200   CONTINUE
  300 CONTINUE
C
C   SET UP THE IX,IY,AND IZ ARRAYS
C
      DO 400 I=1,IMTOT
        IX(I)=IANG*JX(I) + 1
        IY(I)=IANG*JY(I) + 1
        IZ(I)=IANG*JZ(I) + 1
  400 CONTINUE
C
      RETURN
      END
      SUBROUTINE IARRY(KST,IC,I1,II2,III3)
      IMPLICIT INTEGER (A-Z)
      DIMENSION KST(NS,NS,NS),I1(3),II2(6),III3(10)
      COMMON/IPAR1/NS,N3N,I2N3N,I3N3N
      COMMON/SIGNS/IOFF(256),IPRNT
C
      I1(1)=(IC-1)*3 + 1
      I1(2)=I1(1) + 1
      I1(3)=I1(2) + 1
C
      ICNT=0
      DO 200 I=1,3
        DO 100 J=1,I
          ICNT=ICNT + 1
          II2(ICNT)=IOFF(I1(I)) + I1(J)
  100   CONTINUE
  200 CONTINUE
C
      III3(1)=KST(IC,IC,IC)
      DO 300 I=2,10
        III3(I)=III3(I-1) + 1
  300 CONTINUE
C
      RETURN
      END
      SUBROUTINE IJARRY(KST,IC,JC,I1,J1,IJ2,IIJ3,IJJ3)
      IMPLICIT INTEGER (A-Z)
      DIMENSION KST(NS,NS,NS),I1(3)
      DIMENSION J1(3),IJ2(9),IIJ3(18),IJJ3(18)
      COMMON/IPAR1/NS,N3N,I2N3N,I3N3N
      COMMON/SIGNS/IOFF(256),IPRNT
C
      ICNT=0
      DO 200 I=1,3
        DO 100 J=1,3
          ICNT=ICNT + 1
          IJ2(ICNT)=IOFF(I1(I)) + J1(J)
  100   CONTINUE
  200 CONTINUE
C
      IIJ3(1)=KST(IC,IC,JC)
      DO 300 I=2,18
        IIJ3(I)=IIJ3(I-1) + 1
  300 CONTINUE
C
      IJJ3(1)=KST(IC,JC,JC)
      DO 400 I=2,18
        IJJ3(I)=IJJ3(I-1) + 1
  400 CONTINUE
C
      RETURN
      END
      SUBROUTINE IJKARY(KST,IC,JC,KC,IJK3)
      IMPLICIT INTEGER (A-Z)
      DIMENSION KST(NS,NS,NS),IJK3(27)
      COMMON/IPAR1/NS,N3N,I2N3N,I3N3N
      COMMON/SIGNS/IOFF(256),IPRNT
C
      IJK3(1)=KST(IC,JC,KC)
      DO 100 I=2,27
        IJK3(I)=IJK3(I-1) + 1
  100 CONTINUE
C
      RETURN
      END
      SUBROUTINE VCALCU(GTT,GUU,GVV,PX,PY,PZ,P,IQN,JQN,ITEST)
      IMPLICIT REAL*8 (A-H,O-Z)
      LOGICAL EFGRAD,SECOND,THIRD
      DIMENSION GT(10),GU(10),GV(10)
      DIMENSION GTT(LARGL2,NS,LARGL),GUU(LARGL2,NS,LARGL)
     *,         GVV(LARGL2,NS,LARGL)
      COMMON/COORD/X(50),Y(50),Z(50),CHG(50)
      COMMON/IPAR1/NS,N3N,I2N3,I3N3N
      COMMON/IPAR5/IANG,IANGSQ,LARGL,LARGL2,I2LARL,I4LARL
      COMMON/ROOT /WS,U(9),W(9),NROOTS
      COMMON/TOLER/TOL(10)
      DATA A00 / 0.0D+00 /
C
C  ITEST = 0 ........ NORMAL NUCLEAR ATTRACTION
C  ITEST = 1 ........ USED DO ELECTRIC FIELD GRADIENT CALCULATION
C                     AND IN NUCLEAR ATTRACTION DERIVATIVE
      EFGRAD=ITEST.EQ.1
      SECOND=ITEST.EQ.2
      THIRD=ITEST.EQ.3
C
C   SUM OVER ALL NUCLEAR CENTRES
C
      NROOTS=(IQN + JQN -2)/2 + 1
      IF(EFGRAD) NROOTS=NROOTS + 1
      IF(SECOND) NROOTS=NROOTS + 2
      IF(THIRD)  NROOTS=NROOTS + 3
      MAX=IQN + JQN - 1
      IF(EFGRAD) MAX=MAX + 1
      IF(SECOND) MAX=MAX + 2
      IF(THIRD)  MAX=MAX + 3
C
C
      DO 500 IC=1,NS
        ZNUC=-CHG(IC)
        CX=X(IC)
        CY=Y(IC)
        CZ=Z(IC)
        BT=CX-PX
        BU=CY-PY
        BV=CZ-PZ
        IF(ABS(BT) .LT. TOL(3)) BT=A00
        IF(ABS(BU) .LT. TOL(3)) BU=A00
        IF(ABS(BV) .LT. TOL(3)) BV=A00
        CP2=BT*BT + BU*BU + BV*BV
        WS=P*CP2
        IF(NROOTS .LE. 3) CALL RT123
        IF(NROOTS .EQ. 4) CALL ROOT4
        IF(NROOTS .EQ. 5) CALL ROOT5
        IF(NROOTS .GE. 6) CALL DROOT
        GU(1)=1.0D0
        GV(1)=1.0D0
        DO 400 IROOT=1,NROOTS
          ROOT2=U(IROOT)/(1+U(IROOT))
          A2=P*ROOT2
          GT(1)=W(IROOT)*ZNUC
          GT(2)= 2.0D0*BT*A2*W(IROOT)*ZNUC
          GU(2)= 2.0D0*BU*A2
          GV(2)= 2.0D0*BV*A2
          MAXM1=MAX-1
C02-01-89 IF(MAXM1 .LT. 2) GO TO 300
          IF(MAXM1 .LT. 2) GO TO 310
          A2X2=2.0D0*A2
          DO 300 I=2,MAXM1
            GT(I+1)=A2X2*(BT*GT(I) - (I-1)*GT(I-1))
            GU(I+1)=A2X2*(BU*GU(I) - (I-1)*GU(I-1))
            GV(I+1)=A2X2*(BV*GV(I) - (I-1)*GV(I-1))
  300     CONTINUE
C02-01-89   MAKE FORTRAN 77 STANDARD LOOP (TO 310 NOT 300 WITH IF ABOVE)
  310     CONTINUE
C
          DO 200 I=1,MAX
            GTT(I,IC,IROOT)= GT(I)
            GUU(I,IC,IROOT)= GU(I)
            GVV(I,IC,IROOT)= GV(I)
  200     CONTINUE
C
  400   CONTINUE
C
  500 CONTINUE
C
      RETURN
      END
      SUBROUTINE GCAL(GT,GU,GV,ALPHA,WQP,BT,BU,BV,MAX,PQ,NROOT)
      IMPLICIT REAL*8 (A-H,O-Z)
      DIMENSION GT(I4LARL,I2LARL),GU(I4LARL,I2LARL)
      DIMENSION GV(I4LARL,I2LARL)
      COMMON/CALQN/ISTYPE,ICTYPE,NDERIV,NTYPES,NBSET
      COMMON/IPAR5/IANG,IANGSQ,LARGL,LARGL2,I2LARL,I4LARL
      COMMON/ROOT /WS,U(9),W(9),NROOTS
      DATA A00 / 0.0D+00 /
C
C   ZERO OUT THE R ARRAY
C
      WS=WQP
      NROOTS=NROOT + NDERIV
      MAX=MAX + NDERIV
      DO 105 I=1,MAX
        DO 100 J=1,NROOTS
          GT(I,J)=A00
          GU(I,J)=A00
          GV(I,J)=A00
  100   CONTINUE
  105 CONTINUE
C
C   GET THE RYS ROOTS AND WEIGHTS
C
      IF(NROOTS .LE. 3) CALL RT123
      IF(NROOTS .EQ. 4) CALL ROOT4
      IF(NROOTS .EQ. 5) CALL ROOT5
      IF(NROOTS .GE. 6) CALL DROOT
C
C   FORM GT, GU, AND GV OVER NROOTS
C   AND SUM INTO R ARRAY
C
      DO 300 IROOT=1,NROOTS
        ROOT2=U(IROOT)/(1+U(IROOT))
        A=DSQRT(ALPHA*ROOT2)
        GT(1,IROOT)= 1.0D0*W(IROOT)/PQ
        GU(1,IROOT)= 1.0D0
        GV(1,IROOT)= 1.0D0
        GT(2,IROOT)= 2.0D0*BT*A*A*W(IROOT)/PQ
        GU(2,IROOT)= 2.0D0*BU*A*A
        GV(2,IROOT)= 2.0D0*BV*A*A
        MAXM1=MAX-1
C02-01-89   IF(MAXM1 .LT. 2) GO TO 200
        IF(MAXM1 .LT. 2) GO TO 210
        DO 200 I=2,MAXM1
          GT(I+1,IROOT)=2.0D0*A*A*(BT*GT(I,IROOT) - (I-1)*GT(I-1,IROOT))
          GU(I+1,IROOT)=2.0D0*A*A*(BU*GU(I,IROOT) - (I-1)*GU(I-1,IROOT))
          GV(I+1,IROOT)=2.0D0*A*A*(BV*GV(I,IROOT) - (I-1)*GV(I-1,IROOT))
  200   CONTINUE
C02-01-89   MAKE FORTRAN 77 STANDARD LOOP (TO 210 NOT 200 WITH IF ABOVE)
  210 CONTINUE
  300 CONTINUE
C
      RETURN
      END
      SUBROUTINE THROUT(ETHREE,KST,ISZ)
      IMPLICIT REAL*8(A-H,O-Z)
      DIMENSION ETHREE(ISZ),KST(NS,NS,NS)
      COMMON/FILES/IOUT,INPUT,IDBG
      COMMON/IPAR1/NS,N3N,I2N3N,I3N3N
    1 FORMAT(/,2X,' ATOM 1  ATOM 2  ATOM 3   DEGREES OF FREEDOM')
    2 FORMAT(/,3X,I3,5X,I3,5X,I3,7X,I5,' TO ',I5,/)
    3 FORMAT(5(F20.10,5X))
C
C   WRITE OUT THRID DERIVATIVE INFORMATION
C
      DO 300 I=1,NS
        DO 200 J=1,I
          DO 100 K=1,J
            ISRT=KST(I,J,K)
            IF(I .EQ. J) THEN
              IF(I .EQ. K) THEN
                IADD=9
              ELSE
                IADD=17
              END IF
            ELSE
              IF(J .EQ. K) THEN
                IADD=17
              ELSE
                IADD=26
              END IF
            END IF
            IEND=ISRT+IADD
            WRITE(IOUT,1)
            WRITE(IOUT,2)I,J,K,ISRT,IEND
            WRITE(IOUT,3) (ETHREE(II), II=ISRT,IEND)
 100      CONTINUE
 200    CONTINUE
 300  CONTINUE
C
      RETURN
      END
      SUBROUTINE INTYPE(I,J,K,L,IX)
C
C   THIS ROUTINE FINDS THE TYPE OF INTEGRAL
C
C
      IF(I-L) 202,201,202
C   (11/11)
  201 IX=1
      GO TO 230
  202 IF(J-L) 208,203,211
  203 IF(K-L) 205,204,205
C   (21/11)=(12/11)=(11/21)=(11/12)
  204 IX=4
      GO TO 230
  205 IF(I-K) 207,206,207
C   (21/21)=(21/12)=(12/21)=(12/12)
  206 IX=5
      GO TO 230
C   (31/21)=(31/12)=(13/21)=(13/12)=(21/31)=(21/13)=(12/31)=(12/13)
  207 IX=11
      GO TO 230
  208 IF(K-L) 210,209,210
C   (31/22)=(13/22)=(22/31)=(22/13)
  209 IX=8
      GO TO 230
C   (41/32)=(41/23)=(14/32)=(14/23)=(32/41)=(32/14)=(23/41)=(23/14)
  210 IX=14
      GO TO 230
  211 IF(I-J) 212,212,217
  212 IF(I-K) 213,213,214
C   (22/21)=(22/12)=(21/22)=(12/22)
  213 IX=3
      GO TO 230
  214 IF(K-L) 215,215,216
C   (22/11)=(11/22)
  215 IX=2
      GO TO 230
C   (33/21)=(33/12)=(21/33)=(12/33)
  216 IX=6
      GO TO 230
  217 IF(I-K) 218,218,219
C   (32/31)=(32/13)=(23/31)=(23/13)=(31/32)=(31/23)=(13/32)=(13/23)
  218 IX=9
      GO TO 230
  219 IF(J-K) 220,221,222
C   (42/31)=(42/13)=(24/31)=(24/13)=(31/42)=(31/24)=(13/42)=(13/24)
  220 IX=13
      GO TO 230
C   (32/21)=(32/12)=(23/21)=(23/12)=(21/32)=(21/23)=(12/32)=(12/23)
  221 IX=10
      GO TO 230
  222 IF(K-L) 223,223,224
C   (32/11)=(23/11)=(11/32)=(11/23)
  223 IX=7
      GO TO 230
C   (43/21)=(43/12)=(34/21)=(34/12)=(21/43)=(21/34)=(12/43)=(12/34)
  224 IX=12
C
  230 CONTINUE
C
      RETURN
      END
      BLOCK DATA
      COMMON/EINFO/IPLACE(49),ISAME(49)
      COMMON/INDEX/IX(84),IY(84),IZ(84),JX(84),JY(84),JZ(84)
      COMMON/NARRY/N2II(6,2),N2IK(9),N2KI(9),N2IK2(9,3),N3III(10,3)
      COMMON/NARR2/N3IIK(18,4),N3IKK(18,3),N3IJK(27,6),N3JKK(18,2)
      COMMON/NARR3/N3LLI(18,6),N3LLL(10,6),N3ABC(27,4)
C
C   FIRST ROW CONTAINS S,P, AND D INDICES
C   SECOND ROW CONTAINS F
C   THIRD ROW CONTAINS G
C   FOURTH AND FIFTH ROWS CONTAIN  H
C   SIXTH AND SEVENTH ROWS CONTAIN  I
C
      DATA JX / 0, 1, 0, 0, 2, 0, 0, 1, 1, 0,
     *3, 0, 0, 2, 2, 1, 0, 1, 0, 1,
     *4, 0, 0, 3, 3, 1, 0, 1, 0, 2, 2, 0, 2, 1, 1,
     *5, 0, 0, 4, 4, 1, 0, 1, 0, 3, 3, 2, 0, 2, 0, 3, 1, 1, 2,
     *1, 2,
     *6, 0, 0, 5, 5, 1, 0, 1, 0, 4, 4, 2, 0, 2, 0, 3, 3, 0, 5,
     *1, 1, 3, 3, 2, 1, 2, 1, 2/
      DATA JY / 0, 0, 1, 0, 0, 2, 0, 1, 0, 1,
     *0, 3, 0, 1, 0, 2, 2, 0, 1, 1,
     *0, 4, 0, 1, 0, 3, 3, 0, 1, 2, 0, 2, 1, 2, 1,
     *0, 5, 0, 1, 0, 4, 4, 0, 1, 2, 0, 3, 3, 0, 2, 1, 3, 1, 2,
     *2, 1,
     *0, 6, 0, 1, 0, 5, 5, 0, 1, 2, 0, 4, 4, 0, 2, 3, 0, 3, 1,
     *5, 1, 2, 1, 3, 3, 1, 2, 2/
      DATA JZ / 0, 0, 0, 1, 0, 0, 2, 0, 1, 1,
     *0, 0, 3, 0, 1, 0, 1, 2, 2, 1,
     *0, 0, 4, 0, 1, 0, 1, 3, 3, 0, 2, 2, 1, 1, 2,
     *0, 0, 5, 0, 1, 0, 1, 4, 4, 0, 2, 0, 2, 3, 3, 1, 1, 3, 1,
     *2, 2,
     *0, 0, 6, 0, 1, 0, 1, 5, 5, 0, 2, 0, 2, 4, 4, 0, 3, 3, 1,
     *1, 4, 1, 2, 1, 2, 3, 3, 2/
      DATA IPLACE /  1,  3, 10, 29, 66,127,218,
     *               2,  6, 16, 37, 76,139,232,
     *               9, 15, 23, 47, 88,153,248,
     *              28, 36, 46, 58,102,169,266,
     *              65, 75, 87,101,117,187,286,
     *             126,138,152,168,186,206,308,
     *             217,231,247,265,285,307,331/
      DATA ISAME / 0,0,0,0,0,0,0,
     *             0,1,0,0,0,0,0,
     *             0,0,1,0,0,0,0,
     *             0,0,0,1,0,0,0,
     *             0,0,0,0,1,0,0,
     *             0,0,0,0,0,1,0,
     *             0,0,0,0,0,0,1/
      DATA N2II / 1,2,5,3,6,9,1,4,5,7,8,9/
      DATA N2IK / 1,2,4,2,3,5,4,5,6/
      DATA N3III / 1,4,5,11,7,6,14,9,15,18,1,4,5,11,7,13,14,9,15,18,
     *             1,2,10,11,3,8,12,16,17,18/
      DATA N2IK2 / 1,2,4,2,3,5,4,5,6,1,2,3,2,5,6,3,6,9,
     *             1,4,7,4,5,8,7,8,9/
      DATA N2KI / 1,4,7,2,5,8,3,6,9/
      DATA N3IIK / 1,2,5,2, 3, 6,5, 6, 8, 3, 4, 7, 6, 7, 9, 8, 9,10,
     *             1,4,7,4, 5, 6,7, 6, 9, 5,11,14, 6,14,15, 9,15,18,
     *             1,4,7,4, 5, 8,7, 8, 9, 5,11,14, 8,14,15, 9,15,18,
     *             1,2,3,2,10,13,3,13,16,10,11,12,13,12,17,16,17,18/
      DATA N3IKK / 1,4,7,4, 5, 8,7, 6, 9, 5,11,14, 6,14,15, 9,15,18,
     *             1,4,7,2,10,13,3,13,16, 5,11,14, 8,12,17, 9,15,18,
     *             1,2,3,4, 5, 6,7, 8, 9,10,11,12,13,14,15,16,17,18/
      DATA N3IJK / 1, 4, 7,2, 5, 8,3, 6, 9,4,10,13,5,11,14,6,12,15,
     *             7,13,16,8,14,17,9,15,18,
     *             1,4,7,4,10,13,7,13,16,2,5,8,5,11,14,8,14,17,
     *             3,6,9,6,12,15,9,15,18,
     *             1,2,3, 4, 5, 6, 7, 8, 9,4,5,6,10,11,12,13,14,15,
     *             7,8,9,13,14,15,16,17,18,
     *             1,4,7,4,10,13,7,13,16,2,5,8,5,11,14,8,14,17,
     *             3,6,9,6,12,15,9,15,18,
     *             1,2,3, 4, 5, 6, 7, 8, 9,4,5,6,10,11,12,13,14,15,
     *             7,8,9,13,14,15,16,17,18,
     *             1, 4, 7,2, 5, 8,3, 6, 9,4,10,13,5,11,14,6,12,15,
     *             7,13,16,8,14,17,9,15,18/
      DATA N3JKK / 1,4,7,2,10,13,3, 6, 9,5,11,14,6,12,15,9,15,18,
     *             1,4,7,4, 5, 8,7,13,16,5,11,14,8,14,17,9,15,18/
      DATA N3LLI / 1,10,19, 2,13,20, 7,16,25, 5,14,23, 6,15,24, 9,18,27,
     *             1,10,19, 4,11,22, 3,12,21, 5,14,23, 8,17,26, 9,18,27,
     *             1, 4, 7,10,13, 8,19,22,25,11,14,17,20,23,26,21,24,27,
     *             1, 4, 7, 2, 5,16, 3, 6, 9,11,14,17,12,15,18,21,24,27,
     *             1, 2, 3,10,11, 6,19,20,21,13,14,15,22,23,24,25,26,27,
     *             1, 2, 3, 4, 5,12, 7, 8, 9,13,14,15,16,17,18,25,26,27/
      DATA N3LLL / 1, 2, 5,14,19, 6,23, 9,18,27,
     *             1, 4,13,14, 7, 8,17,21,24,27,
     *             1,10,13,14, 7,12,17,21,24,27,
     *             1, 2, 5,14,19,20,23, 9,18,27,
     *             1, 4,11,14, 3,16,15,25,26,27,
     *             1,10,11,14, 3,22,15,25,26,27/
      DATA N3ABC / 1, 4, 7, 2, 5, 8, 3, 6, 9,10,13,16,11,14,17,12,15,18,
     *            19,22,25,20,23,26,21,24,27,
     *             1,10,19, 2,11,20, 3,12,21, 4,13,22, 5,14,23, 6,15,24,
     *             7,16,25, 8,17,26, 9,18,27,
     *             1,10,19, 4,13,22, 7,16,25, 2,11,20, 5,14,23, 8,17,26,
     *             3,12,21, 6,15,24, 9,18,27,
     *             1, 4, 7,10,13,16,19,22,25, 2, 5, 8,11,14,17,20,23,26,
     *             3, 6, 9,12,15,18,21,24,27/
C
      END
